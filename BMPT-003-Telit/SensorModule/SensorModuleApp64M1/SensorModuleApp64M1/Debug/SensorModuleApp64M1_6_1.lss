
SensorModuleApp64M1_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00004032  000040c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004032  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006f9  0080010c  0080010c  000040d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000040d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004104  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000708  00000000  00000000  00004148  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e2e  00000000  00000000  00004850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002258  00000000  00000000  0000b67e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004bc4  00000000  00000000  0000d8d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001114  00000000  00000000  0001249c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000029a5  00000000  00000000  000135b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c66  00000000  00000000  00015f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d0  00000000  00000000  00019bbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__ctors_end>
       4:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
       8:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
       c:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      10:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      14:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      18:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      1c:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      20:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      24:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      28:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      2c:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      30:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__vector_12>
      34:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      38:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      3c:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      40:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      44:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      48:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__vector_18>
      4c:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      50:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__vector_20>
      54:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__vector_21>
      58:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      5c:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      60:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      64:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      68:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      6c:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_27>
      70:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      74:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      78:	0c 94 02 01 	jmp	0x204	; 0x204 <__bad_interrupt>
      7c:	f9 04       	cpc	r15, r9
      7e:	1b 05       	cpc	r17, r11
      80:	36 05       	cpc	r19, r6
      82:	3e 05       	cpc	r19, r14
      84:	46 05       	cpc	r20, r6
      86:	50 05       	cpc	r21, r0
      88:	fc 04       	cpc	r15, r12
      8a:	13 05       	cpc	r17, r3
      8c:	b6 10       	cpse	r11, r6
      8e:	d0 10       	cpse	r13, r0
      90:	d2 10       	cpse	r13, r2
      92:	74 10       	cpse	r7, r4
      94:	74 10       	cpse	r7, r4
      96:	74 10       	cpse	r7, r4
      98:	74 10       	cpse	r7, r4
      9a:	74 10       	cpse	r7, r4
      9c:	74 10       	cpse	r7, r4
      9e:	74 10       	cpse	r7, r4
      a0:	74 10       	cpse	r7, r4
      a2:	d4 10       	cpse	r13, r4
      a4:	74 10       	cpse	r7, r4
      a6:	74 10       	cpse	r7, r4
      a8:	74 10       	cpse	r7, r4
      aa:	dd 10       	cpse	r13, r13
      ac:	74 10       	cpse	r7, r4
      ae:	74 10       	cpse	r7, r4
      b0:	e6 10       	cpse	r14, r6
      b2:	74 10       	cpse	r7, r4
      b4:	74 10       	cpse	r7, r4
      b6:	ef 10       	cpse	r14, r15
      b8:	74 10       	cpse	r7, r4
      ba:	74 10       	cpse	r7, r4
      bc:	fb 10       	cpse	r15, r11
      be:	74 10       	cpse	r7, r4
      c0:	74 10       	cpse	r7, r4
      c2:	74 10       	cpse	r7, r4
      c4:	01 11       	cpse	r16, r1
      c6:	74 10       	cpse	r7, r4
      c8:	32 11       	cpse	r19, r2
      ca:	38 11       	cpse	r19, r8
      cc:	74 10       	cpse	r7, r4
      ce:	74 10       	cpse	r7, r4
      d0:	46 11       	cpse	r20, r6
      d2:	51 11       	cpse	r21, r1
      d4:	5d 11       	cpse	r21, r13
      d6:	60 11       	cpse	r22, r0
      d8:	74 10       	cpse	r7, r4
      da:	63 11       	cpse	r22, r3
      dc:	66 11       	cpse	r22, r6
      de:	74 10       	cpse	r7, r4
      e0:	86 11       	cpse	r24, r6
      e2:	74 10       	cpse	r7, r4
      e4:	dc 11       	cpse	r29, r12
      e6:	28 12       	cpse	r2, r24
      e8:	e8 11       	cpse	r30, r8
      ea:	08 12       	cpse	r0, r24
      ec:	74 10       	cpse	r7, r4
      ee:	74 10       	cpse	r7, r4
      f0:	74 10       	cpse	r7, r4
      f2:	74 10       	cpse	r7, r4
      f4:	74 10       	cpse	r7, r4
      f6:	74 10       	cpse	r7, r4
      f8:	74 10       	cpse	r7, r4
      fa:	74 10       	cpse	r7, r4
      fc:	74 10       	cpse	r7, r4
      fe:	74 10       	cpse	r7, r4
     100:	74 10       	cpse	r7, r4
     102:	74 10       	cpse	r7, r4
     104:	74 10       	cpse	r7, r4
     106:	74 10       	cpse	r7, r4
     108:	74 10       	cpse	r7, r4
     10a:	74 10       	cpse	r7, r4
     10c:	74 10       	cpse	r7, r4
     10e:	74 10       	cpse	r7, r4
     110:	74 10       	cpse	r7, r4
     112:	74 10       	cpse	r7, r4
     114:	74 10       	cpse	r7, r4
     116:	74 10       	cpse	r7, r4
     118:	74 10       	cpse	r7, r4
     11a:	74 10       	cpse	r7, r4
     11c:	74 10       	cpse	r7, r4
     11e:	74 10       	cpse	r7, r4
     120:	74 10       	cpse	r7, r4
     122:	74 10       	cpse	r7, r4
     124:	74 10       	cpse	r7, r4
     126:	74 10       	cpse	r7, r4
     128:	74 10       	cpse	r7, r4
     12a:	74 10       	cpse	r7, r4
     12c:	74 10       	cpse	r7, r4
     12e:	74 10       	cpse	r7, r4
     130:	74 10       	cpse	r7, r4
     132:	74 10       	cpse	r7, r4
     134:	74 10       	cpse	r7, r4
     136:	74 10       	cpse	r7, r4
     138:	74 10       	cpse	r7, r4
     13a:	74 10       	cpse	r7, r4
     13c:	74 10       	cpse	r7, r4
     13e:	74 10       	cpse	r7, r4
     140:	74 10       	cpse	r7, r4
     142:	74 10       	cpse	r7, r4
     144:	74 10       	cpse	r7, r4
     146:	74 10       	cpse	r7, r4
     148:	74 10       	cpse	r7, r4
     14a:	74 10       	cpse	r7, r4
     14c:	74 10       	cpse	r7, r4
     14e:	74 10       	cpse	r7, r4
     150:	74 10       	cpse	r7, r4
     152:	74 10       	cpse	r7, r4
     154:	74 10       	cpse	r7, r4
     156:	74 10       	cpse	r7, r4
     158:	74 10       	cpse	r7, r4
     15a:	74 10       	cpse	r7, r4
     15c:	74 10       	cpse	r7, r4
     15e:	74 10       	cpse	r7, r4
     160:	74 10       	cpse	r7, r4
     162:	74 10       	cpse	r7, r4
     164:	74 10       	cpse	r7, r4
     166:	74 10       	cpse	r7, r4
     168:	74 10       	cpse	r7, r4
     16a:	74 10       	cpse	r7, r4
     16c:	74 10       	cpse	r7, r4
     16e:	74 10       	cpse	r7, r4
     170:	74 10       	cpse	r7, r4
     172:	74 10       	cpse	r7, r4
     174:	74 10       	cpse	r7, r4
     176:	74 10       	cpse	r7, r4
     178:	74 10       	cpse	r7, r4
     17a:	74 10       	cpse	r7, r4
     17c:	74 10       	cpse	r7, r4
     17e:	74 10       	cpse	r7, r4
     180:	74 10       	cpse	r7, r4
     182:	74 10       	cpse	r7, r4
     184:	74 10       	cpse	r7, r4
     186:	74 10       	cpse	r7, r4
     188:	a8 10       	cpse	r10, r8
     18a:	ef 15       	cp	r30, r15
     18c:	30 17       	cp	r19, r16
     18e:	69 15       	cp	r22, r9
     190:	06 17       	cp	r16, r22
     192:	bc 15       	cp	r27, r12
     194:	cb 16       	cp	r12, r27
     196:	06 15       	cp	r16, r6
     198:	8b 14       	cp	r8, r11
     19a:	0b 14       	cp	r0, r11
     19c:	ac 13       	cpse	r26, r28
     19e:	45 16       	cp	r4, r21

000001a0 <__trampolines_end>:
     1a0:	b5 01       	movw	r22, r10
     1a2:	a4 01       	movw	r20, r8

000001a4 <FwPartNum>:
     1a4:	36 30 31 30 31 30 2d 30 30 30 30 30 31 00 00 00     601010-000001...
	...

000001b5 <buildVersion>:
     1b5:	32 2e 30 2e 30 2e 30 30 30 31 00 00 00 00 00 00     2.0.0.0001......
	...

000001c6 <udpBulkTransferSeq>:
     1c6:	1b 5a 00 00                                         .Z..

000001ca <__ctors_end>:
     1ca:	11 24       	eor	r1, r1
     1cc:	1f be       	out	0x3f, r1	; 63
     1ce:	cf ef       	ldi	r28, 0xFF	; 255
     1d0:	d0 e1       	ldi	r29, 0x10	; 16
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	cd bf       	out	0x3d, r28	; 61

000001d6 <__do_copy_data>:
     1d6:	11 e0       	ldi	r17, 0x01	; 1
     1d8:	a0 e0       	ldi	r26, 0x00	; 0
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	e2 e3       	ldi	r30, 0x32	; 50
     1de:	f0 e4       	ldi	r31, 0x40	; 64
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__do_copy_data+0x10>
     1e2:	05 90       	lpm	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	ac 30       	cpi	r26, 0x0C	; 12
     1e8:	b1 07       	cpc	r27, r17
     1ea:	d9 f7       	brne	.-10     	; 0x1e2 <__do_copy_data+0xc>

000001ec <__do_clear_bss>:
     1ec:	28 e0       	ldi	r18, 0x08	; 8
     1ee:	ac e0       	ldi	r26, 0x0C	; 12
     1f0:	b1 e0       	ldi	r27, 0x01	; 1
     1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <.do_clear_bss_start>

000001f4 <.do_clear_bss_loop>:
     1f4:	1d 92       	st	X+, r1

000001f6 <.do_clear_bss_start>:
     1f6:	a5 30       	cpi	r26, 0x05	; 5
     1f8:	b2 07       	cpc	r27, r18
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <.do_clear_bss_loop>
     1fc:	0e 94 16 1b 	call	0x362c	; 0x362c <main>
     200:	0c 94 17 20 	jmp	0x402e	; 0x402e <_exit>

00000204 <__bad_interrupt>:
     204:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000208 <initADC>:
void selectRow4(void)
{
    PORTB &= 0x7E; // Clear Bit0 and Bit7
    PORTC &= 0xFE; // Clear Bit0
    PORTD &= 0xFE; // Clear Bit0
    PORTB |= 0x01; // Set Bit0 
     208:	22 e5       	ldi	r18, 0x52	; 82
     20a:	31 e0       	ldi	r19, 0x01	; 1
     20c:	4a e1       	ldi	r20, 0x1A	; 26
     20e:	51 e0       	ldi	r21, 0x01	; 1
     210:	da 01       	movw	r26, r20
     212:	f9 01       	movw	r30, r18
     214:	87 e0       	ldi	r24, 0x07	; 7
     216:	11 92       	st	Z+, r1
     218:	11 92       	st	Z+, r1
     21a:	1d 92       	st	X+, r1
     21c:	1d 92       	st	X+, r1
     21e:	81 50       	subi	r24, 0x01	; 1
     220:	d1 f7       	brne	.-12     	; 0x216 <initADC+0xe>
     222:	22 5f       	subi	r18, 0xF2	; 242
     224:	3f 4f       	sbci	r19, 0xFF	; 255
     226:	42 5f       	subi	r20, 0xF2	; 242
     228:	5f 4f       	sbci	r21, 0xFF	; 255
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	2a 38       	cpi	r18, 0x8A	; 138
     22e:	38 07       	cpc	r19, r24
     230:	79 f7       	brne	.-34     	; 0x210 <initADC+0x8>
     232:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sampleCount>
     236:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     23a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     23e:	80 64       	ori	r24, 0x40	; 64
     240:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     244:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     248:	8f 77       	andi	r24, 0x7F	; 127
     24a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     24e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     252:	8f 7d       	andi	r24, 0xDF	; 223
     254:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     258:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     25c:	89 60       	ori	r24, 0x09	; 9
     25e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     262:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     266:	87 60       	ori	r24, 0x07	; 7
     268:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     26c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     270:	88 60       	ori	r24, 0x08	; 8
     272:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     276:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     27a:	80 68       	ori	r24, 0x80	; 128
     27c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     280:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     284:	80 7e       	andi	r24, 0xE0	; 224
     286:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     28a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     28e:	89 60       	ori	r24, 0x09	; 9
     290:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     294:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <channelIndex>
     298:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sampleCount>
     29c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <runCalibrationFlag>
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <activeRow>
     2a6:	85 b1       	in	r24, 0x05	; 5
     2a8:	8e 77       	andi	r24, 0x7E	; 126
     2aa:	85 b9       	out	0x05, r24	; 5
     2ac:	40 98       	cbi	0x08, 0	; 8
     2ae:	58 98       	cbi	0x0b, 0	; 11
     2b0:	2f 9a       	sbi	0x05, 7	; 5
     2b2:	08 95       	ret

000002b4 <averageADCData>:
     2b4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sampleCount>
     2b8:	88 23       	and	r24, r24
     2ba:	11 f1       	breq	.+68     	; 0x300 <averageADCData+0x4c>
     2bc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <runCalibrationFlag>
     2c0:	81 11       	cpse	r24, r1
     2c2:	1f c0       	rjmp	.+62     	; 0x302 <averageADCData+0x4e>
     2c4:	4a e1       	ldi	r20, 0x1A	; 26
     2c6:	51 e0       	ldi	r21, 0x01	; 1
     2c8:	62 e5       	ldi	r22, 0x52	; 82
     2ca:	71 e0       	ldi	r23, 0x01	; 1
     2cc:	fb 01       	movw	r30, r22
     2ce:	da 01       	movw	r26, r20
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
     2d6:	96 95       	lsr	r25
     2d8:	87 95       	ror	r24
     2da:	96 95       	lsr	r25
     2dc:	87 95       	ror	r24
     2de:	8d 93       	st	X+, r24
     2e0:	9d 93       	st	X+, r25
     2e2:	11 92       	st	Z+, r1
     2e4:	11 92       	st	Z+, r1
     2e6:	2f 5f       	subi	r18, 0xFF	; 255
     2e8:	27 30       	cpi	r18, 0x07	; 7
     2ea:	99 f7       	brne	.-26     	; 0x2d2 <averageADCData+0x1e>
     2ec:	42 5f       	subi	r20, 0xF2	; 242
     2ee:	5f 4f       	sbci	r21, 0xFF	; 255
     2f0:	62 5f       	subi	r22, 0xF2	; 242
     2f2:	7f 4f       	sbci	r23, 0xFF	; 255
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	42 35       	cpi	r20, 0x52	; 82
     2f8:	58 07       	cpc	r21, r24
     2fa:	41 f7       	brne	.-48     	; 0x2cc <averageADCData+0x18>
     2fc:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sampleCount>
     300:	08 95       	ret
     302:	08 95       	ret

00000304 <setNextSensorRow>:
     304:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <activeRow>
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <activeRow>
     30e:	85 30       	cpi	r24, 0x05	; 5
     310:	50 f0       	brcs	.+20     	; 0x326 <setNextSensorRow+0x22>
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <activeRow>
     318:	85 b1       	in	r24, 0x05	; 5
     31a:	8e 77       	andi	r24, 0x7E	; 126
     31c:	85 b9       	out	0x05, r24	; 5
     31e:	40 98       	cbi	0x08, 0	; 8
     320:	58 98       	cbi	0x0b, 0	; 11
     322:	2f 9a       	sbi	0x05, 7	; 5
     324:	08 95       	ret
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	b9 f3       	breq	.-18     	; 0x318 <setNextSensorRow+0x14>
     32a:	82 30       	cpi	r24, 0x02	; 2
     32c:	61 f0       	breq	.+24     	; 0x346 <setNextSensorRow+0x42>
     32e:	83 30       	cpi	r24, 0x03	; 3
     330:	81 f0       	breq	.+32     	; 0x352 <setNextSensorRow+0x4e>
     332:	84 30       	cpi	r24, 0x04	; 4
     334:	09 f0       	breq	.+2      	; 0x338 <setNextSensorRow+0x34>
     336:	08 95       	ret
     338:	85 b1       	in	r24, 0x05	; 5
     33a:	8e 77       	andi	r24, 0x7E	; 126
     33c:	85 b9       	out	0x05, r24	; 5
     33e:	40 98       	cbi	0x08, 0	; 8
     340:	58 98       	cbi	0x0b, 0	; 11
     342:	28 9a       	sbi	0x05, 0	; 5
     344:	08 95       	ret
     346:	85 b1       	in	r24, 0x05	; 5
     348:	8e 77       	andi	r24, 0x7E	; 126
     34a:	85 b9       	out	0x05, r24	; 5
     34c:	40 98       	cbi	0x08, 0	; 8
     34e:	58 9a       	sbi	0x0b, 0	; 11
     350:	08 95       	ret
     352:	85 b1       	in	r24, 0x05	; 5
     354:	8e 77       	andi	r24, 0x7E	; 126
     356:	85 b9       	out	0x05, r24	; 5
     358:	58 98       	cbi	0x0b, 0	; 11
     35a:	40 9a       	sbi	0x08, 0	; 8
     35c:	08 95       	ret

0000035e <startADCConversion>:
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <runCalibrationFlag>
     366:	81 11       	cpse	r24, r1
     368:	08 c0       	rjmp	.+16     	; 0x37a <startADCConversion+0x1c>
     36a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     36e:	80 64       	ori	r24, 0x40	; 64
     370:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret
     37a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <calInitDone.2267>
     37e:	88 23       	and	r24, r24
     380:	69 f0       	breq	.+26     	; 0x39c <startADCConversion+0x3e>
     382:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     386:	88 23       	and	r24, r24
     388:	09 f4       	brne	.+2      	; 0x38c <startADCConversion+0x2e>
     38a:	48 c0       	rjmp	.+144    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     38c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     390:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     394:	80 64       	ori	r24, 0x40	; 64
     396:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     39a:	ec cf       	rjmp	.-40     	; 0x374 <startADCConversion+0x16>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <calInitDone.2267>
     3a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     3a6:	95 b1       	in	r25, 0x05	; 5
     3a8:	9e 77       	andi	r25, 0x7E	; 126
     3aa:	95 b9       	out	0x05, r25	; 5
     3ac:	40 98       	cbi	0x08, 0	; 8
     3ae:	58 98       	cbi	0x0b, 0	; 11
     3b0:	2f 9a       	sbi	0x05, 7	; 5
     3b2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <activeRow>
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	0e 94 f5 18 	call	0x31ea	; 0x31ea <setDAC>
     3be:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <calRow>
     3c2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <calSensor>
     3c6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <channelIndex>
     3ca:	22 e5       	ldi	r18, 0x52	; 82
     3cc:	31 e0       	ldi	r19, 0x01	; 1
     3ce:	4a e1       	ldi	r20, 0x1A	; 26
     3d0:	51 e0       	ldi	r21, 0x01	; 1
     3d2:	da 01       	movw	r26, r20
     3d4:	f9 01       	movw	r30, r18
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	11 92       	st	Z+, r1
     3da:	11 92       	st	Z+, r1
     3dc:	1d 92       	st	X+, r1
     3de:	1d 92       	st	X+, r1
     3e0:	8f 5f       	subi	r24, 0xFF	; 255
     3e2:	87 30       	cpi	r24, 0x07	; 7
     3e4:	c9 f7       	brne	.-14     	; 0x3d8 <startADCConversion+0x7a>
     3e6:	22 5f       	subi	r18, 0xF2	; 242
     3e8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ea:	42 5f       	subi	r20, 0xF2	; 242
     3ec:	5f 4f       	sbci	r21, 0xFF	; 255
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	2a 38       	cpi	r18, 0x8A	; 138
     3f2:	38 07       	cpc	r19, r24
     3f4:	71 f7       	brne	.-36     	; 0x3d2 <startADCConversion+0x74>
     3f6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sampleCount>
     3fa:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     3fe:	80 7e       	andi	r24, 0xE0	; 224
     400:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     404:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     408:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <channelIndex>
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	ec 5f       	subi	r30, 0xFC	; 252
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	80 81       	ld	r24, Z
     414:	89 2b       	or	r24, r25
     416:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     41a:	ac cf       	rjmp	.-168    	; 0x374 <startADCConversion+0x16>
     41c:	f8 94       	cli
     41e:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <getDAC>
     422:	ec 01       	movw	r28, r24
     424:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <calSensor>
     428:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <calRow>
     42c:	69 2f       	mov	r22, r25
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	9b 01       	movw	r18, r22
     432:	e7 e0       	ldi	r30, 0x07	; 7
     434:	8e 9f       	mul	r24, r30
     436:	20 0d       	add	r18, r0
     438:	31 1d       	adc	r19, r1
     43a:	11 24       	eor	r1, r1
     43c:	22 0f       	add	r18, r18
     43e:	33 1f       	adc	r19, r19
     440:	f9 01       	movw	r30, r18
     442:	ee 5a       	subi	r30, 0xAE	; 174
     444:	fe 4f       	sbci	r31, 0xFE	; 254
     446:	40 81       	ld	r20, Z
     448:	51 81       	ldd	r21, Z+1	; 0x01
     44a:	52 95       	swap	r21
     44c:	42 95       	swap	r20
     44e:	4f 70       	andi	r20, 0x0F	; 15
     450:	45 27       	eor	r20, r21
     452:	5f 70       	andi	r21, 0x0F	; 15
     454:	45 27       	eor	r20, r21
     456:	f9 01       	movw	r30, r18
     458:	ef 56       	subi	r30, 0x6F	; 111
     45a:	f8 4f       	sbci	r31, 0xF8	; 248
     45c:	51 83       	std	Z+1, r21	; 0x01
     45e:	40 83       	st	Z, r20
     460:	4d 3f       	cpi	r20, 0xFD	; 253
     462:	e1 e0       	ldi	r30, 0x01	; 1
     464:	5e 07       	cpc	r21, r30
     466:	08 f4       	brcc	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     468:	48 c0       	rjmp	.+144    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     46a:	44 30       	cpi	r20, 0x04	; 4
     46c:	52 40       	sbci	r21, 0x02	; 2
     46e:	08 f4       	brcc	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     470:	c8 c0       	rjmp	.+400    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
     472:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <calRetryCount.2264>
     476:	99 30       	cpi	r25, 0x09	; 9
     478:	08 f0       	brcs	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	44 c0       	rjmp	.+136    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     47c:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <getDAC>
     480:	84 36       	cpi	r24, 0x64	; 100
     482:	22 e0       	ldi	r18, 0x02	; 2
     484:	92 07       	cpc	r25, r18
     486:	08 f0       	brcs	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     488:	88 c1       	rjmp	.+784    	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <setDAC>
     490:	0e 94 35 1a 	call	0x346a	; 0x346a <toggleRow2LED>
     494:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	09 f4       	brne	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     49c:	7b c1       	rjmp	.+758    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     4a4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <calRetryCount.2264>
     4a8:	8f 5f       	subi	r24, 0xFF	; 255
     4aa:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <calRetryCount.2264>
     4ae:	22 e5       	ldi	r18, 0x52	; 82
     4b0:	31 e0       	ldi	r19, 0x01	; 1
     4b2:	4a e1       	ldi	r20, 0x1A	; 26
     4b4:	51 e0       	ldi	r21, 0x01	; 1
     4b6:	da 01       	movw	r26, r20
     4b8:	f9 01       	movw	r30, r18
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	11 92       	st	Z+, r1
     4be:	11 92       	st	Z+, r1
     4c0:	1d 92       	st	X+, r1
     4c2:	1d 92       	st	X+, r1
     4c4:	8f 5f       	subi	r24, 0xFF	; 255
     4c6:	87 30       	cpi	r24, 0x07	; 7
     4c8:	c9 f7       	brne	.-14     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ca:	22 5f       	subi	r18, 0xF2	; 242
     4cc:	3f 4f       	sbci	r19, 0xFF	; 255
     4ce:	42 5f       	subi	r20, 0xF2	; 242
     4d0:	5f 4f       	sbci	r21, 0xFF	; 255
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	2a 38       	cpi	r18, 0x8A	; 138
     4d6:	38 07       	cpc	r19, r24
     4d8:	71 f7       	brne	.-36     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4da:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sampleCount>
     4de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     4e2:	87 30       	cpi	r24, 0x07	; 7
     4e4:	08 f0       	brcs	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e6:	09 c1       	rjmp	.+530    	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
     4e8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <channelIndex>
     4ec:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <sensorSampleCount>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     4f6:	78 94       	sei
     4f8:	3d cf       	rjmp	.-390    	; 0x374 <startADCConversion+0x16>
     4fa:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <calRetryCount.2264>
     4fe:	29 30       	cpi	r18, 0x09	; 9
     500:	08 f4       	brcc	.+2      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     502:	0e c1       	rjmp	.+540    	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     504:	f9 99       	sbic	0x1f, 1	; 31
     506:	fe cf       	rjmp	.-4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     508:	9e e0       	ldi	r25, 0x0E	; 14
     50a:	89 9f       	mul	r24, r25
     50c:	90 01       	movw	r18, r0
     50e:	11 24       	eor	r1, r1
     510:	22 59       	subi	r18, 0x92	; 146
     512:	38 4f       	sbci	r19, 0xF8	; 248
     514:	cb 01       	movw	r24, r22
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	6c 2f       	mov	r22, r28
     51c:	82 0f       	add	r24, r18
     51e:	93 1f       	adc	r25, r19
     520:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
     524:	f9 99       	sbic	0x1f, 1	; 31
     526:	fe cf       	rjmp	.-4      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     528:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <calRow>
     52c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	ee e0       	ldi	r30, 0x0E	; 14
     538:	2e 9f       	mul	r18, r30
     53a:	80 0d       	add	r24, r0
     53c:	91 1d       	adc	r25, r1
     53e:	11 24       	eor	r1, r1
     540:	6d 2f       	mov	r22, r29
     542:	81 59       	subi	r24, 0x91	; 145
     544:	98 4f       	sbci	r25, 0xF8	; 248
     546:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
     54a:	f9 99       	sbic	0x1f, 1	; 31
     54c:	fe cf       	rjmp	.-4      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     54e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <calRow>
     552:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <calSensor>
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	f9 01       	movw	r30, r18
     55a:	47 e0       	ldi	r20, 0x07	; 7
     55c:	84 9f       	mul	r24, r20
     55e:	e0 0d       	add	r30, r0
     560:	f1 1d       	adc	r31, r1
     562:	11 24       	eor	r1, r1
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	ef 56       	subi	r30, 0x6F	; 111
     56a:	f8 4f       	sbci	r31, 0xF8	; 248
     56c:	4e e0       	ldi	r20, 0x0E	; 14
     56e:	84 9f       	mul	r24, r20
     570:	c0 01       	movw	r24, r0
     572:	11 24       	eor	r1, r1
     574:	8e 5c       	subi	r24, 0xCE	; 206
     576:	98 4f       	sbci	r25, 0xF8	; 248
     578:	22 0f       	add	r18, r18
     57a:	33 1f       	adc	r19, r19
     57c:	60 81       	ld	r22, Z
     57e:	82 0f       	add	r24, r18
     580:	93 1f       	adc	r25, r19
     582:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
     586:	f9 99       	sbic	0x1f, 1	; 31
     588:	fe cf       	rjmp	.-4      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     58a:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <calRow>
     58e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	37 e0       	ldi	r19, 0x07	; 7
     598:	23 9f       	mul	r18, r19
     59a:	e0 0d       	add	r30, r0
     59c:	f1 1d       	adc	r31, r1
     59e:	11 24       	eor	r1, r1
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	ef 56       	subi	r30, 0x6F	; 111
     5a6:	f8 4f       	sbci	r31, 0xF8	; 248
     5a8:	61 81       	ldd	r22, Z+1	; 0x01
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	4e e0       	ldi	r20, 0x0E	; 14
     5b0:	24 9f       	mul	r18, r20
     5b2:	80 0d       	add	r24, r0
     5b4:	91 1d       	adc	r25, r1
     5b6:	11 24       	eor	r1, r1
     5b8:	8d 5c       	subi	r24, 0xCD	; 205
     5ba:	98 4f       	sbci	r25, 0xF8	; 248
     5bc:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
     5c0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     5c4:	8f 5f       	subi	r24, 0xFF	; 255
     5c6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <calSensor>
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	0e 94 f5 18 	call	0x31ea	; 0x31ea <setDAC>
     5d2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     5d6:	80 7e       	andi	r24, 0xE0	; 224
     5d8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     5dc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <calSensor>
     5e0:	e7 30       	cpi	r30, 0x07	; 7
     5e2:	08 f0       	brcs	.+2      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     5e4:	b3 c0       	rjmp	.+358    	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
     5e6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	ec 5f       	subi	r30, 0xFC	; 252
     5ee:	fe 4f       	sbci	r31, 0xFE	; 254
     5f0:	80 81       	ld	r24, Z
     5f2:	89 2b       	or	r24, r25
     5f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     5f8:	0e 94 3a 1a 	call	0x3474	; 0x3474 <toggleRow3LED>
     5fc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <calRetryCount.2264>
     600:	56 cf       	rjmp	.-340    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     602:	f9 99       	sbic	0x1f, 1	; 31
     604:	fe cf       	rjmp	.-4      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
     606:	ee e0       	ldi	r30, 0x0E	; 14
     608:	8e 9f       	mul	r24, r30
     60a:	90 01       	movw	r18, r0
     60c:	11 24       	eor	r1, r1
     60e:	22 59       	subi	r18, 0x92	; 146
     610:	38 4f       	sbci	r19, 0xF8	; 248
     612:	cb 01       	movw	r24, r22
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	6c 2f       	mov	r22, r28
     61a:	82 0f       	add	r24, r18
     61c:	93 1f       	adc	r25, r19
     61e:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
     622:	f9 99       	sbic	0x1f, 1	; 31
     624:	fe cf       	rjmp	.-4      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
     626:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <calRow>
     62a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	3e e0       	ldi	r19, 0x0E	; 14
     636:	23 9f       	mul	r18, r19
     638:	80 0d       	add	r24, r0
     63a:	91 1d       	adc	r25, r1
     63c:	11 24       	eor	r1, r1
     63e:	6d 2f       	mov	r22, r29
     640:	81 59       	subi	r24, 0x91	; 145
     642:	98 4f       	sbci	r25, 0xF8	; 248
     644:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
     648:	f9 99       	sbic	0x1f, 1	; 31
     64a:	fe cf       	rjmp	.-4      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     64c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <calRow>
     650:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <calSensor>
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	f9 01       	movw	r30, r18
     658:	47 e0       	ldi	r20, 0x07	; 7
     65a:	84 9f       	mul	r24, r20
     65c:	e0 0d       	add	r30, r0
     65e:	f1 1d       	adc	r31, r1
     660:	11 24       	eor	r1, r1
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	ef 56       	subi	r30, 0x6F	; 111
     668:	f8 4f       	sbci	r31, 0xF8	; 248
     66a:	4e e0       	ldi	r20, 0x0E	; 14
     66c:	84 9f       	mul	r24, r20
     66e:	c0 01       	movw	r24, r0
     670:	11 24       	eor	r1, r1
     672:	8e 5c       	subi	r24, 0xCE	; 206
     674:	98 4f       	sbci	r25, 0xF8	; 248
     676:	22 0f       	add	r18, r18
     678:	33 1f       	adc	r19, r19
     67a:	60 81       	ld	r22, Z
     67c:	82 0f       	add	r24, r18
     67e:	93 1f       	adc	r25, r19
     680:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
     684:	f9 99       	sbic	0x1f, 1	; 31
     686:	fe cf       	rjmp	.-4      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
     688:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <calRow>
     68c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	fc 01       	movw	r30, r24
     694:	37 e0       	ldi	r19, 0x07	; 7
     696:	23 9f       	mul	r18, r19
     698:	e0 0d       	add	r30, r0
     69a:	f1 1d       	adc	r31, r1
     69c:	11 24       	eor	r1, r1
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	ef 56       	subi	r30, 0x6F	; 111
     6a4:	f8 4f       	sbci	r31, 0xF8	; 248
     6a6:	61 81       	ldd	r22, Z+1	; 0x01
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	4e e0       	ldi	r20, 0x0E	; 14
     6ae:	24 9f       	mul	r18, r20
     6b0:	80 0d       	add	r24, r0
     6b2:	91 1d       	adc	r25, r1
     6b4:	11 24       	eor	r1, r1
     6b6:	8d 5c       	subi	r24, 0xCD	; 205
     6b8:	98 4f       	sbci	r25, 0xF8	; 248
     6ba:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
     6be:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     6c2:	8f 5f       	subi	r24, 0xFF	; 255
     6c4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <calSensor>
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <setDAC>
     6d0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     6d4:	80 7e       	andi	r24, 0xE0	; 224
     6d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     6da:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <calSensor>
     6de:	e7 30       	cpi	r30, 0x07	; 7
     6e0:	c8 f4       	brcc	.+50     	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
     6e2:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	ec 5f       	subi	r30, 0xFC	; 252
     6ea:	fe 4f       	sbci	r31, 0xFE	; 254
     6ec:	80 81       	ld	r24, Z
     6ee:	89 2b       	or	r24, r25
     6f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     6f4:	0e 94 27 1a 	call	0x344e	; 0x344e <toggleAllLEDs>
     6f8:	da ce       	rjmp	.-588    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     6fa:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <calSensor>
     6fe:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <calRow>
     702:	cf 5f       	subi	r28, 0xFF	; 255
     704:	c0 93 15 01 	sts	0x0115, r28	; 0x800115 <calRow>
     708:	0e 94 82 01 	call	0x304	; 0x304 <setNextSensorRow>
     70c:	c4 30       	cpi	r28, 0x04	; 4
     70e:	78 f5       	brcc	.+94     	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	ea ce       	rjmp	.-556    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     714:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     718:	89 60       	ori	r24, 0x09	; 9
     71a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     71e:	ea cf       	rjmp	.-44     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     720:	cd 39       	cpi	r28, 0x9D	; 157
     722:	e1 e0       	ldi	r30, 0x01	; 1
     724:	de 07       	cpc	r29, r30
     726:	c0 f0       	brcs	.+48     	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
     728:	ce 01       	movw	r24, r28
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <setDAC>
     730:	0e 94 30 1a 	call	0x3460	; 0x3460 <toggleRow1LED>
     734:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     738:	88 23       	and	r24, r24
     73a:	61 f1       	breq	.+88     	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
     73c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
     740:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <calRetryCount.2264>
     744:	8f 5f       	subi	r24, 0xFF	; 255
     746:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <calRetryCount.2264>
     74a:	b1 ce       	rjmp	.-670    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     74c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     750:	89 60       	ori	r24, 0x09	; 9
     752:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     756:	50 cf       	rjmp	.-352    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
     758:	21 e0       	ldi	r18, 0x01	; 1
     75a:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <calFail>
     75e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <calFailRow>
     762:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <calFailSensor>
     766:	9f 5f       	subi	r25, 0xFF	; 255
     768:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <calSensor>
     76c:	ad cf       	rjmp	.-166    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
     76e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <runCalibrationFlag>
     772:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <calInitDone.2267>
     776:	0e 94 22 1a 	call	0x3444	; 0x3444 <turnOffAllLEDs>
     77a:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <calFailSensor>
     77e:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <calFailRow>
     782:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <calFail>
     786:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <sendCalStatusMsg>
     78a:	0e 94 c0 08 	call	0x1180	; 0x1180 <readCalValues>
     78e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     792:	aa ce       	rjmp	.-684    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     794:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <calRetryCount.2264>
     798:	8a ce       	rjmp	.-748    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <calFail>
     7a0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <calRow>
     7a4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <calFailRow>
     7a8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     7ac:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <calFailSensor>
     7b0:	88 cf       	rjmp	.-240    	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>

000007b2 <__vector_27>:
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	2f 93       	push	r18
     7be:	3f 93       	push	r19
     7c0:	4f 93       	push	r20
     7c2:	5f 93       	push	r21
     7c4:	6f 93       	push	r22
     7c6:	7f 93       	push	r23
     7c8:	8f 93       	push	r24
     7ca:	9f 93       	push	r25
     7cc:	af 93       	push	r26
     7ce:	bf 93       	push	r27
     7d0:	cf 93       	push	r28
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31
     7d6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
     7da:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
     7de:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <channelIndex>
     7e2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <activeRow>
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	fc 01       	movw	r30, r24
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	e8 1b       	sub	r30, r24
     7fa:	f9 0b       	sbc	r31, r25
     7fc:	e4 0f       	add	r30, r20
     7fe:	f1 1d       	adc	r31, r1
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	ee 5a       	subi	r30, 0xAE	; 174
     806:	fe 4f       	sbci	r31, 0xFE	; 254
     808:	82 2f       	mov	r24, r18
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	93 2b       	or	r25, r19
     80e:	20 81       	ld	r18, Z
     810:	31 81       	ldd	r19, Z+1	; 0x01
     812:	82 0f       	add	r24, r18
     814:	93 1f       	adc	r25, r19
     816:	91 83       	std	Z+1, r25	; 0x01
     818:	80 83       	st	Z, r24
     81a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sensorSampleCount>
     81e:	8f 5f       	subi	r24, 0xFF	; 255
     820:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <sensorSampleCount>
     824:	c0 91 16 01 	lds	r28, 0x0116	; 0x800116 <runCalibrationFlag>
     828:	cc 23       	and	r28, r28
     82a:	c9 f0       	breq	.+50     	; 0x85e <__EEPROM_REGION_LENGTH__+0x5e>
     82c:	80 31       	cpi	r24, 0x10	; 16
     82e:	28 f4       	brcc	.+10     	; 0x83a <__EEPROM_REGION_LENGTH__+0x3a>
     830:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     834:	80 64       	ori	r24, 0x40	; 64
     836:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     83a:	ff 91       	pop	r31
     83c:	ef 91       	pop	r30
     83e:	cf 91       	pop	r28
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	7f 91       	pop	r23
     84a:	6f 91       	pop	r22
     84c:	5f 91       	pop	r21
     84e:	4f 91       	pop	r20
     850:	3f 91       	pop	r19
     852:	2f 91       	pop	r18
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti
     85e:	84 30       	cpi	r24, 0x04	; 4
     860:	38 f3       	brcs	.-50     	; 0x830 <__EEPROM_REGION_LENGTH__+0x30>
     862:	4f 5f       	subi	r20, 0xFF	; 255
     864:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <channelIndex>
     868:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     86c:	80 7e       	andi	r24, 0xE0	; 224
     86e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     872:	47 30       	cpi	r20, 0x07	; 7
     874:	50 f1       	brcs	.+84     	; 0x8ca <__EEPROM_REGION_LENGTH__+0xca>
     876:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     87a:	89 60       	ori	r24, 0x09	; 9
     87c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     880:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <channelIndex>
     884:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <activeRow>
     888:	84 30       	cpi	r24, 0x04	; 4
     88a:	c1 f1       	breq	.+112    	; 0x8fc <__EEPROM_REGION_LENGTH__+0xfc>
     88c:	0e 94 82 01 	call	0x304	; 0x304 <setNextSensorRow>
     890:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <sensorSampleCount>
     894:	8c 2f       	mov	r24, r28
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <activeRow>
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	21 50       	subi	r18, 0x01	; 1
     8a0:	31 09       	sbc	r19, r1
     8a2:	f9 01       	movw	r30, r18
     8a4:	ee 0f       	add	r30, r30
     8a6:	ff 1f       	adc	r31, r31
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	ee 0f       	add	r30, r30
     8ae:	ff 1f       	adc	r31, r31
     8b0:	e2 1b       	sub	r30, r18
     8b2:	f3 0b       	sbc	r31, r19
     8b4:	e8 0f       	add	r30, r24
     8b6:	f9 1f       	adc	r31, r25
     8b8:	ee 0f       	add	r30, r30
     8ba:	ff 1f       	adc	r31, r31
     8bc:	e3 53       	subi	r30, 0x33	; 51
     8be:	f8 4f       	sbci	r31, 0xF8	; 248
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	0e 94 f5 18 	call	0x31ea	; 0x31ea <setDAC>
     8c8:	b8 cf       	rjmp	.-144    	; 0x83a <__EEPROM_REGION_LENGTH__+0x3a>
     8ca:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     8ce:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <channelIndex>
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	ec 5f       	subi	r30, 0xFC	; 252
     8d6:	fe 4f       	sbci	r31, 0xFE	; 254
     8d8:	80 81       	ld	r24, Z
     8da:	89 2b       	or	r24, r25
     8dc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     8e0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sampleCount>
     8e4:	8f 5f       	subi	r24, 0xFF	; 255
     8e6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sampleCount>
     8ea:	c0 91 19 01 	lds	r28, 0x0119	; 0x800119 <channelIndex>
     8ee:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <sensorSampleCount>
     8f2:	c7 30       	cpi	r28, 0x07	; 7
     8f4:	78 f2       	brcs	.-98     	; 0x894 <__EEPROM_REGION_LENGTH__+0x94>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	ce cf       	rjmp	.-100    	; 0x898 <__EEPROM_REGION_LENGTH__+0x98>
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sensorsReadyFlag>
     902:	c4 cf       	rjmp	.-120    	; 0x88c <__EEPROM_REGION_LENGTH__+0x8c>

00000904 <getAveragedADCDataPtr>:
     904:	8a e1       	ldi	r24, 0x1A	; 26
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	08 95       	ret

0000090a <startSensorCalibration>:
}

// Kicks off the calibration process
void startSensorCalibration(void)
{
    runCalibrationFlag = 1;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <runCalibrationFlag>
     910:	08 95       	ret

00000912 <getSensorsReadyFlag>:
}

BYTE getSensorsReadyFlag(void)
{
    return sensorsReadyFlag;
}
     912:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sensorsReadyFlag>
     916:	08 95       	ret

00000918 <clearSensorsReadyFlag>:

void clearSensorsReadyFlag(void)
{
    sensorsReadyFlag = 0;
     918:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sensorsReadyFlag>
     91c:	08 95       	ret

0000091e <getRunCalibrationFlag>:
}

BYTE getRunCalibrationFlag(void)
{
    return runCalibrationFlag;
}
     91e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <runCalibrationFlag>
     922:	08 95       	ret

00000924 <getCalStatusData>:

// Returns the most recent calibration results data
void getCalStatusData(BYTE* status, BYTE* calRow, BYTE* calSensor)
{
    *status = calFail;
     924:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <calFail>
     928:	fc 01       	movw	r30, r24
     92a:	20 83       	st	Z, r18
    *calRow = calFailRow;
     92c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <calFailRow>
     930:	fb 01       	movw	r30, r22
     932:	80 83       	st	Z, r24
    *calSensor = calFailSensor;
     934:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <calFailSensor>
     938:	fa 01       	movw	r30, r20
     93a:	80 83       	st	Z, r24
     93c:	08 95       	ret

0000093e <addByteToChecksum>:
/********************************************************************
 Clears the 'deviceUpdateMsgReceivedFlag'.
 ********************************************************************/
void clearDeviceUpdateMsgReceivedFlag(void)
{
    deviceUpdateMsgReceivedFlag = 0;
     93e:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <runningCS1>
     942:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <runningCS1+0x1>
     946:	a9 01       	movw	r20, r18
     948:	48 0f       	add	r20, r24
     94a:	51 1d       	adc	r21, r1
     94c:	ca 01       	movw	r24, r20
     94e:	4f 3f       	cpi	r20, 0xFF	; 255
     950:	51 05       	cpc	r21, r1
     952:	19 f0       	breq	.+6      	; 0x95a <addByteToChecksum+0x1c>
     954:	10 f0       	brcs	.+4      	; 0x95a <addByteToChecksum+0x1c>
     956:	8f 5f       	subi	r24, 0xFF	; 255
     958:	91 09       	sbc	r25, r1
     95a:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <runningCS1+0x1>
     95e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <runningCS1>
     962:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <runningCS2>
     966:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <runningCS2+0x1>
     96a:	28 0f       	add	r18, r24
     96c:	39 1f       	adc	r19, r25
     96e:	2f 3f       	cpi	r18, 0xFF	; 255
     970:	31 05       	cpc	r19, r1
     972:	19 f0       	breq	.+6      	; 0x97a <addByteToChecksum+0x3c>
     974:	10 f0       	brcs	.+4      	; 0x97a <addByteToChecksum+0x3c>
     976:	2f 5f       	subi	r18, 0xFF	; 255
     978:	31 09       	sbc	r19, r1
     97a:	30 93 79 02 	sts	0x0279, r19	; 0x800279 <runningCS2+0x1>
     97e:	20 93 78 02 	sts	0x0278, r18	; 0x800278 <runningCS2>
     982:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <Msg_CS1>
     986:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <Msg_CS2>
     98a:	08 95       	ret

0000098c <transmitAddByteToChecksum>:
     98c:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <transmitRunningChecksum1>
     990:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <transmitRunningChecksum1+0x1>
     994:	a9 01       	movw	r20, r18
     996:	48 0f       	add	r20, r24
     998:	51 1d       	adc	r21, r1
     99a:	ca 01       	movw	r24, r20
     99c:	4f 3f       	cpi	r20, 0xFF	; 255
     99e:	51 05       	cpc	r21, r1
     9a0:	19 f0       	breq	.+6      	; 0x9a8 <transmitAddByteToChecksum+0x1c>
     9a2:	10 f0       	brcs	.+4      	; 0x9a8 <transmitAddByteToChecksum+0x1c>
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	91 09       	sbc	r25, r1
     9a8:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <transmitRunningChecksum1+0x1>
     9ac:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <transmitRunningChecksum1>
     9b0:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <transmitRunningChecksum2>
     9b4:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <transmitRunningChecksum2+0x1>
     9b8:	28 0f       	add	r18, r24
     9ba:	39 1f       	adc	r19, r25
     9bc:	2f 3f       	cpi	r18, 0xFF	; 255
     9be:	31 05       	cpc	r19, r1
     9c0:	19 f0       	breq	.+6      	; 0x9c8 <transmitAddByteToChecksum+0x3c>
     9c2:	10 f0       	brcs	.+4      	; 0x9c8 <transmitAddByteToChecksum+0x3c>
     9c4:	2f 5f       	subi	r18, 0xFF	; 255
     9c6:	31 09       	sbc	r19, r1
     9c8:	30 93 75 02 	sts	0x0275, r19	; 0x800275 <transmitRunningChecksum2+0x1>
     9cc:	20 93 74 02 	sts	0x0274, r18	; 0x800274 <transmitRunningChecksum2>
     9d0:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <transmitFinalChecksum1>
     9d4:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <transmitFinalChecksum2>
     9d8:	08 95       	ret

000009da <stepAsipStateMachine>:
     9da:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <AsipSMState>
     9de:	4e 2f       	mov	r20, r30
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	48 30       	cpi	r20, 0x08	; 8
     9e4:	51 05       	cpc	r21, r1
     9e6:	38 f4       	brcc	.+14     	; 0x9f6 <stepAsipStateMachine+0x1c>
     9e8:	fa 01       	movw	r30, r20
     9ea:	e2 5c       	subi	r30, 0xC2	; 194
     9ec:	ff 4f       	sbci	r31, 0xFF	; 255
     9ee:	0c 94 e2 1f 	jmp	0x3fc4	; 0x3fc4 <__tablejump2__>
     9f2:	82 3c       	cpi	r24, 0xC2	; 194
     9f4:	a9 f1       	breq	.+106    	; 0xa60 <stepAsipStateMachine+0x86>
     9f6:	08 95       	ret
     9f8:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <Msg_CS1>
     9fc:	89 17       	cp	r24, r25
     9fe:	09 f4       	brne	.+2      	; 0xa02 <stepAsipStateMachine+0x28>
     a00:	77 c0       	rjmp	.+238    	; 0xaf0 <stepAsipStateMachine+0x116>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <runningCS1+0x1>
     a0a:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <runningCS1>
     a0e:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <runningCS2+0x1>
     a12:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <runningCS2>
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <Msg_CS1>
     a1c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <Msg_CS2>
     a20:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <AsipSMState>
     a24:	08 95       	ret
     a26:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <Msg_CS2>
     a2a:	89 13       	cpse	r24, r25
     a2c:	ea cf       	rjmp	.-44     	; 0xa02 <stepAsipStateMachine+0x28>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <ASIPMessageReady>
     a34:	e6 cf       	rjmp	.-52     	; 0xa02 <stepAsipStateMachine+0x28>
     a36:	83 35       	cpi	r24, 0x53	; 83
     a38:	09 f4       	brne	.+2      	; 0xa3c <stepAsipStateMachine+0x62>
     a3a:	5e c0       	rjmp	.+188    	; 0xaf8 <stepAsipStateMachine+0x11e>
     a3c:	82 3c       	cpi	r24, 0xC2	; 194
     a3e:	09 f7       	brne	.-62     	; 0xa02 <stepAsipStateMachine+0x28>
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <runningCS1+0x1>
     a48:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <runningCS1>
     a4c:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <runningCS2+0x1>
     a50:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <runningCS2>
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <Msg_CS1>
     a5a:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <Msg_CS2>
     a5e:	82 ec       	ldi	r24, 0xC2	; 194
     a60:	0e 94 9f 04 	call	0x93e	; 0x93e <addByteToChecksum>
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     a6a:	08 95       	ret
     a6c:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <Msg_Class>
     a70:	0e 94 9f 04 	call	0x93e	; 0x93e <addByteToChecksum>
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     a7a:	08 95       	ret
     a7c:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <Msg_ID>
     a80:	0e 94 9f 04 	call	0x93e	; 0x93e <addByteToChecksum>
     a84:	84 e0       	ldi	r24, 0x04	; 4
     a86:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     a8a:	08 95       	ret
     a8c:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <Msg_Length>
     a90:	81 11       	cpse	r24, r1
     a92:	1b c0       	rjmp	.+54     	; 0xaca <stepAsipStateMachine+0xf0>
     a94:	86 e0       	ldi	r24, 0x06	; 6
     a96:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	0c 94 9f 04 	jmp	0x93e	; 0x93e <addByteToChecksum>
     aa0:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <PayloadCount>
     aa4:	9f 5f       	subi	r25, 0xFF	; 255
     aa6:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <PayloadCount>
     aaa:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <Msg_Length>
     aae:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <PayloadIndex>
     ab2:	92 17       	cp	r25, r18
     ab4:	79 f0       	breq	.+30     	; 0xad4 <stepAsipStateMachine+0xfa>
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	9e 0f       	add	r25, r30
     aba:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <PayloadIndex>
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	e8 57       	subi	r30, 0x78	; 120
     ac2:	fc 4f       	sbci	r31, 0xFC	; 252
     ac4:	80 83       	st	Z, r24
     ac6:	0c 94 9f 04 	jmp	0x93e	; 0x93e <addByteToChecksum>
     aca:	95 e0       	ldi	r25, 0x05	; 5
     acc:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <AsipSMState>
     ad0:	0c 94 9f 04 	jmp	0x93e	; 0x93e <addByteToChecksum>
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	e8 57       	subi	r30, 0x78	; 120
     ad8:	fc 4f       	sbci	r31, 0xFC	; 252
     ada:	80 83       	st	Z, r24
     adc:	0e 94 9f 04 	call	0x93e	; 0x93e <addByteToChecksum>
     ae0:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <PayloadCount>
     ae4:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <PayloadIndex>
     ae8:	86 e0       	ldi	r24, 0x06	; 6
     aea:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     aee:	08 95       	ret
     af0:	87 e0       	ldi	r24, 0x07	; 7
     af2:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     af6:	08 95       	ret
     af8:	0e 94 9f 04 	call	0x93e	; 0x93e <addByteToChecksum>
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     b02:	08 95       	ret

00000b04 <buildAsipTransmitMessage>:
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	d8 2f       	mov	r29, r24
     b10:	c6 2f       	mov	r28, r22
     b12:	04 2f       	mov	r16, r20
     b14:	f2 2e       	mov	r15, r18
     b16:	13 2f       	mov	r17, r19
     b18:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <outgoingMsg>
     b1c:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <outgoingMsg+0x1>
     b20:	40 93 7e 02 	sts	0x027E, r20	; 0x80027e <outgoingMsg+0x2>
     b24:	20 93 7f 02 	sts	0x027F, r18	; 0x80027f <outgoingMsg+0x3>
     b28:	30 93 80 02 	sts	0x0280, r19	; 0x800280 <outgoingMsg+0x4>
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <transmitRunningChecksum1+0x1>
     b34:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <transmitRunningChecksum1>
     b38:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <transmitRunningChecksum2+0x1>
     b3c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <transmitRunningChecksum2>
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <transmitFinalChecksum1>
     b46:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <transmitFinalChecksum2>
     b4a:	82 ec       	ldi	r24, 0xC2	; 194
     b4c:	0e 94 c6 04 	call	0x98c	; 0x98c <transmitAddByteToChecksum>
     b50:	83 e5       	ldi	r24, 0x53	; 83
     b52:	0e 94 c6 04 	call	0x98c	; 0x98c <transmitAddByteToChecksum>
     b56:	8d 2f       	mov	r24, r29
     b58:	0e 94 c6 04 	call	0x98c	; 0x98c <transmitAddByteToChecksum>
     b5c:	8c 2f       	mov	r24, r28
     b5e:	0e 94 c6 04 	call	0x98c	; 0x98c <transmitAddByteToChecksum>
     b62:	80 2f       	mov	r24, r16
     b64:	0e 94 c6 04 	call	0x98c	; 0x98c <transmitAddByteToChecksum>
     b68:	00 23       	and	r16, r16
     b6a:	71 f0       	breq	.+28     	; 0xb88 <buildAsipTransmitMessage+0x84>
     b6c:	cf 2d       	mov	r28, r15
     b6e:	d1 2f       	mov	r29, r17
     b70:	01 50       	subi	r16, 0x01	; 1
     b72:	10 e0       	ldi	r17, 0x00	; 0
     b74:	0f 5f       	subi	r16, 0xFF	; 255
     b76:	1f 4f       	sbci	r17, 0xFF	; 255
     b78:	0c 0f       	add	r16, r28
     b7a:	1d 1f       	adc	r17, r29
     b7c:	89 91       	ld	r24, Y+
     b7e:	0e 94 c6 04 	call	0x98c	; 0x98c <transmitAddByteToChecksum>
     b82:	c0 17       	cp	r28, r16
     b84:	d1 07       	cpc	r29, r17
     b86:	d1 f7       	brne	.-12     	; 0xb7c <buildAsipTransmitMessage+0x78>
     b88:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <transmitFinalChecksum1>
     b8c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <outgoingMsg+0x5>
     b90:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <transmitFinalChecksum2>
     b94:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <outgoingMsg+0x6>
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	08 95       	ret

00000ba4 <sendASIPSensorDataMsg>:
/*********************************************************************
 ASIP equivalent to the sendCANSensorDataMsg function. This does not
 transmit immediately, but adds the levels to the flow rate message queue
 *********************************************************************/
void sendASIPSensorDataMsg(BYTE * levels)
{
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	ec 01       	movw	r28, r24
	BYTE * pMessage;
	_CLI();
     baa:	f8 94       	cli
	BYTE * serialNumPtr = getSerialNumPtr() + 4;
     bac:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <getSerialNumPtr>
     bb0:	dc 01       	movw	r26, r24
	
	if(scFlowRateMessageCount < MAXIMUM_FLOW_RATE_MESSAGES)
     bb2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <scFlowRateMessageCount>
     bb6:	98 31       	cpi	r25, 0x18	; 24
     bb8:	50 f5       	brcc	.+84     	; 0xc0e <sendASIPSensorDataMsg+0x6a>
	{
		// Write pointer
		pMessage = scbFlowRateTxQueue + (scFlowRateMessageCount * 6);
     bba:	86 e0       	ldi	r24, 0x06	; 6
     bbc:	98 9f       	mul	r25, r24
     bbe:	f0 01       	movw	r30, r0
     bc0:	11 24       	eor	r1, r1
     bc2:	e5 57       	subi	r30, 0x75	; 117
     bc4:	fe 4f       	sbci	r31, 0xFE	; 254
		
		pMessage[0] = *(serialNumPtr); // Serial Num 
     bc6:	14 96       	adiw	r26, 0x04	; 4
     bc8:	8c 91       	ld	r24, X
     bca:	14 97       	sbiw	r26, 0x04	; 4
     bcc:	80 83       	st	Z, r24
		pMessage[1] = *(serialNumPtr + 1); // Serial Num
     bce:	15 96       	adiw	r26, 0x05	; 5
     bd0:	8c 91       	ld	r24, X
     bd2:	15 97       	sbiw	r26, 0x05	; 5
     bd4:	81 83       	std	Z+1, r24	; 0x01
		pMessage[2] = *(serialNumPtr + 2); // Serial Num 
     bd6:	16 96       	adiw	r26, 0x06	; 6
     bd8:	8c 91       	ld	r24, X
     bda:	16 97       	sbiw	r26, 0x06	; 6
     bdc:	82 83       	std	Z+2, r24	; 0x02
		pMessage[3] = *(serialNumPtr + 3); // Serial Num 
     bde:	17 96       	adiw	r26, 0x07	; 7
     be0:	8c 91       	ld	r24, X
     be2:	83 83       	std	Z+3, r24	; 0x03
		pMessage[4] = ((levels[0] << 4) | (levels[1] & 0x0F)); // Rows 1 & 2
     be4:	28 81       	ld	r18, Y
     be6:	80 e1       	ldi	r24, 0x10	; 16
     be8:	28 9f       	mul	r18, r24
     bea:	90 01       	movw	r18, r0
     bec:	11 24       	eor	r1, r1
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	8f 70       	andi	r24, 0x0F	; 15
     bf2:	28 2b       	or	r18, r24
     bf4:	24 83       	std	Z+4, r18	; 0x04
		pMessage[5] = ((levels[2] << 4) | (levels[3] & 0x0F)); // Rows 3 & 4
     bf6:	2a 81       	ldd	r18, Y+2	; 0x02
     bf8:	80 e1       	ldi	r24, 0x10	; 16
     bfa:	28 9f       	mul	r18, r24
     bfc:	90 01       	movw	r18, r0
     bfe:	11 24       	eor	r1, r1
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	8f 70       	andi	r24, 0x0F	; 15
     c04:	28 2b       	or	r18, r24
     c06:	25 83       	std	Z+5, r18	; 0x05
		
		scFlowRateMessageCount++;
     c08:	9f 5f       	subi	r25, 0xFF	; 255
     c0a:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <scFlowRateMessageCount>
	}
	_SEI();
     c0e:	78 94       	sei
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <addFlowRateMessage>:
 ********************************************************************/
void addFlowRateMessage(BYTE * message)
{
	BYTE i;
	BYTE * pMessage;
	if(scFlowRateMessageCount < MAXIMUM_FLOW_RATE_MESSAGES)
     c16:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <scFlowRateMessageCount>
     c1a:	28 31       	cpi	r18, 0x18	; 24
     c1c:	90 f4       	brcc	.+36     	; 0xc42 <addFlowRateMessage+0x2c>
     c1e:	fc 01       	movw	r30, r24
     c20:	86 e0       	ldi	r24, 0x06	; 6
     c22:	28 9f       	mul	r18, r24
     c24:	d0 01       	movw	r26, r0
     c26:	11 24       	eor	r1, r1
     c28:	a5 57       	subi	r26, 0x75	; 117
     c2a:	be 4f       	sbci	r27, 0xFE	; 254
     c2c:	af 01       	movw	r20, r30
     c2e:	4a 5f       	subi	r20, 0xFA	; 250
     c30:	5f 4f       	sbci	r21, 0xFF	; 255
	{
		pMessage = scbFlowRateTxQueue + (scFlowRateMessageCount * 6);

		for(i = 0; i < 6; i++)
		{
			pMessage[i] = message[i];	
     c32:	81 91       	ld	r24, Z+
     c34:	8d 93       	st	X+, r24
	BYTE * pMessage;
	if(scFlowRateMessageCount < MAXIMUM_FLOW_RATE_MESSAGES)
	{
		pMessage = scbFlowRateTxQueue + (scFlowRateMessageCount * 6);

		for(i = 0; i < 6; i++)
     c36:	e4 17       	cp	r30, r20
     c38:	f5 07       	cpc	r31, r21
     c3a:	d9 f7       	brne	.-10     	; 0xc32 <addFlowRateMessage+0x1c>
		{
			pMessage[i] = message[i];	
		}

		scFlowRateMessageCount++;
     c3c:	2f 5f       	subi	r18, 0xFF	; 255
     c3e:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <scFlowRateMessageCount>
     c42:	08 95       	ret

00000c44 <sendFlowRateMessages>:
/********************************************************************
 Takes the flow rate transmit queue and sends it out as an ASIP message.
 ********************************************************************/
void sendFlowRateMessages(void)
{
	if(scFlowRateMessageCount > 0)
     c44:	40 91 8a 01 	lds	r20, 0x018A	; 0x80018a <scFlowRateMessageCount>
     c48:	41 11       	cpse	r20, r1
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <sendFlowRateMessages+0xa>
     c4c:	08 95       	ret
	{
		buildAsipTransmitMessage(0x0A, 0x01, scFlowRateMessageCount * 6, scbFlowRateTxQueue);
     c4e:	84 2f       	mov	r24, r20
     c50:	88 0f       	add	r24, r24
     c52:	48 0f       	add	r20, r24
     c54:	44 0f       	add	r20, r20
     c56:	2b e8       	ldi	r18, 0x8B	; 139
     c58:	31 e0       	ldi	r19, 0x01	; 1
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	8a e0       	ldi	r24, 0x0A	; 10
     c5e:	0e 94 82 05 	call	0xb04	; 0xb04 <buildAsipTransmitMessage>
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     c62:	8c e7       	ldi	r24, 0x7C	; 124
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <sendUdpPacket>
{
	if(scFlowRateMessageCount > 0)
	{
		buildAsipTransmitMessage(0x0A, 0x01, scFlowRateMessageCount * 6, scbFlowRateTxQueue);
		transmitAsipMessage();
		scFlowRateMessageCount = 0;
     c6a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <scFlowRateMessageCount>
     c6e:	08 95       	ret

00000c70 <sendFwUpdatePacketAckMessage>:
	}
}

void sendFwUpdatePacketAckMessage(void)
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	00 d0       	rcall	.+0      	; 0xc76 <sendFwUpdatePacketAckMessage+0x6>
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
    BYTE payload[] = {0x00, 0x31};
     c7a:	19 82       	std	Y+1, r1	; 0x01
     c7c:	81 e3       	ldi	r24, 0x31	; 49
     c7e:	8a 83       	std	Y+2, r24	; 0x02
    
    outgoingMsg.MsgClass = 0x01;
     c80:	ec e7       	ldi	r30, 0x7C	; 124
     c82:	f2 e0       	ldi	r31, 0x02	; 2
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 83       	st	Z, r24
    outgoingMsg.MsgId = 0x00;
     c88:	11 82       	std	Z+1, r1	; 0x01
    outgoingMsg.PayloadLength = 2;
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	82 83       	std	Z+2, r24	; 0x02
    outgoingMsg.PayloadPtr = payload;
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	94 83       	std	Z+4, r25	; 0x04
     c94:	83 83       	std	Z+3, r24	; 0x03
    outgoingMsg.Checksum1 = 0x4A;
     c96:	8a e4       	ldi	r24, 0x4A	; 74
     c98:	85 83       	std	Z+5, r24	; 0x05
    outgoingMsg.Checksum2 = 0x83;
     c9a:	83 e8       	ldi	r24, 0x83	; 131
     c9c:	86 83       	std	Z+6, r24	; 0x06
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     c9e:	cf 01       	movw	r24, r30
     ca0:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <sendUdpPacket>
    outgoingMsg.PayloadPtr = payload;
    outgoingMsg.Checksum1 = 0x4A;
    outgoingMsg.Checksum2 = 0x83;

	transmitAsipMessage();    
}
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <sendStartFwUpdateAckMessage>:


void sendStartFwUpdateAckMessage(void)
{
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	1f 92       	push	r1
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
    BYTE mode = 3;
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	89 83       	std	Y+1, r24	; 0x01

    outgoingMsg.MsgClass = 0x00;
     cbc:	ec e7       	ldi	r30, 0x7C	; 124
     cbe:	f2 e0       	ldi	r31, 0x02	; 2
     cc0:	10 82       	st	Z, r1
    outgoingMsg.MsgId = 0x05;
     cc2:	85 e0       	ldi	r24, 0x05	; 5
     cc4:	81 83       	std	Z+1, r24	; 0x01
    outgoingMsg.PayloadLength = 1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	82 83       	std	Z+2, r24	; 0x02
    outgoingMsg.PayloadPtr = &mode;
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	94 83       	std	Z+4, r25	; 0x04
     cd0:	83 83       	std	Z+3, r24	; 0x03
    outgoingMsg.Checksum1 = 0x1F;
     cd2:	8f e1       	ldi	r24, 0x1F	; 31
     cd4:	85 83       	std	Z+5, r24	; 0x05
    outgoingMsg.Checksum2 = 0x45;
     cd6:	85 e4       	ldi	r24, 0x45	; 69
     cd8:	86 83       	std	Z+6, r24	; 0x06
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     cda:	cf 01       	movw	r24, r30
     cdc:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <sendUdpPacket>
    outgoingMsg.PayloadPtr = &mode;
    outgoingMsg.Checksum1 = 0x1F;
    outgoingMsg.Checksum2 = 0x45;

    transmitAsipMessage();
}
     ce0:	0f 90       	pop	r0
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <sendStartCalAckMessage>:

void sendStartCalAckMessage(void)
{
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	00 d0       	rcall	.+0      	; 0xcee <sendStartCalAckMessage+0x6>
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
    BYTE payload[] = {ASIP_CLASS_FIELD_CAL, 0x0A};
     cf2:	88 e0       	ldi	r24, 0x08	; 8
     cf4:	89 83       	std	Y+1, r24	; 0x01
     cf6:	8a e0       	ldi	r24, 0x0A	; 10
     cf8:	8a 83       	std	Y+2, r24	; 0x02

    outgoingMsg.MsgClass = 0x01;
     cfa:	ec e7       	ldi	r30, 0x7C	; 124
     cfc:	f2 e0       	ldi	r31, 0x02	; 2
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	80 83       	st	Z, r24
    outgoingMsg.MsgId = 0x00;
     d02:	11 82       	std	Z+1, r1	; 0x01
    outgoingMsg.PayloadLength = 2;
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	82 83       	std	Z+2, r24	; 0x02
    outgoingMsg.PayloadPtr = payload;
     d08:	ce 01       	movw	r24, r28
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	94 83       	std	Z+4, r25	; 0x04
     d0e:	83 83       	std	Z+3, r24	; 0x03
    outgoingMsg.Checksum1 = 0x2B;
     d10:	8b e2       	ldi	r24, 0x2B	; 43
     d12:	85 83       	std	Z+5, r24	; 0x05
    outgoingMsg.Checksum2 = 0x6C;
     d14:	8c e6       	ldi	r24, 0x6C	; 108
     d16:	86 83       	std	Z+6, r24	; 0x06
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     d18:	cf 01       	movw	r24, r30
     d1a:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <sendUdpPacket>
    outgoingMsg.PayloadPtr = payload;
    outgoingMsg.Checksum1 = 0x2B;
    outgoingMsg.Checksum2 = 0x6C;

    transmitAsipMessage();
}
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <sendFwUpdatePacketNackMessage>:

void sendFwUpdatePacketNackMessage(void)
{
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <sendFwUpdatePacketNackMessage+0x6>
     d2e:	1f 92       	push	r1
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
    BYTE payload[] = {0x00, 0x31, 0x00};
     d34:	19 82       	std	Y+1, r1	; 0x01
     d36:	81 e3       	ldi	r24, 0x31	; 49
     d38:	8a 83       	std	Y+2, r24	; 0x02
     d3a:	1b 82       	std	Y+3, r1	; 0x03

    outgoingMsg.MsgClass = 0x01;
     d3c:	ec e7       	ldi	r30, 0x7C	; 124
     d3e:	f2 e0       	ldi	r31, 0x02	; 2
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 83       	st	Z, r24
    outgoingMsg.MsgId = 0x01;
     d44:	81 83       	std	Z+1, r24	; 0x01
    outgoingMsg.PayloadLength = 3;
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	82 83       	std	Z+2, r24	; 0x02
    outgoingMsg.PayloadPtr = payload;
     d4a:	ce 01       	movw	r24, r28
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	94 83       	std	Z+4, r25	; 0x04
     d50:	83 83       	std	Z+3, r24	; 0x03
    outgoingMsg.Checksum1 = 0x4C;
     d52:	8c e4       	ldi	r24, 0x4C	; 76
     d54:	85 83       	std	Z+5, r24	; 0x05
    outgoingMsg.Checksum2 = 0xD6;
     d56:	86 ed       	ldi	r24, 0xD6	; 214
     d58:	86 83       	std	Z+6, r24	; 0x06
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     d5a:	cf 01       	movw	r24, r30
     d5c:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <sendUdpPacket>
    outgoingMsg.PayloadPtr = payload;
    outgoingMsg.Checksum1 = 0x4C;
    outgoingMsg.Checksum2 = 0xD6;

    transmitAsipMessage();
}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <sendFwUpdateCompleteAckMessage>:

void sendFwUpdateCompleteAckMessage(void)
{
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	00 d0       	rcall	.+0      	; 0xd72 <sendFwUpdateCompleteAckMessage+0x6>
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
    BYTE payload[] = {0x00, 0x30};
     d76:	19 82       	std	Y+1, r1	; 0x01
     d78:	80 e3       	ldi	r24, 0x30	; 48
     d7a:	8a 83       	std	Y+2, r24	; 0x02

    outgoingMsg.MsgClass = 0x01;
     d7c:	ec e7       	ldi	r30, 0x7C	; 124
     d7e:	f2 e0       	ldi	r31, 0x02	; 2
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	80 83       	st	Z, r24
    outgoingMsg.MsgId = 0x00;
     d84:	11 82       	std	Z+1, r1	; 0x01
    outgoingMsg.PayloadLength = 2;
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	82 83       	std	Z+2, r24	; 0x02
    outgoingMsg.PayloadPtr = payload;
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	94 83       	std	Z+4, r25	; 0x04
     d90:	83 83       	std	Z+3, r24	; 0x03
    outgoingMsg.Checksum1 = 0x49;
     d92:	89 e4       	ldi	r24, 0x49	; 73
     d94:	85 83       	std	Z+5, r24	; 0x05
    outgoingMsg.Checksum2 = 0x82;
     d96:	82 e8       	ldi	r24, 0x82	; 130
     d98:	86 83       	std	Z+6, r24	; 0x06
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     d9a:	cf 01       	movw	r24, r30
     d9c:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <sendUdpPacket>
    outgoingMsg.PayloadPtr = payload;
    outgoingMsg.Checksum1 = 0x49;
    outgoingMsg.Checksum2 = 0x82;

    transmitAsipMessage();
}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <processValidAsipMessages>:
 This function processes buffered ASIP data. If a valid ASIP
 message is found, an appropriate action is triggered based on the
 message class and ID.
*********************************************************************/
void processValidAsipMessages(void)
{
     daa:	cf 93       	push	r28
    BYTE reqFlags;

    reqFlags = getCANDataRequestFlags();
     dac:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
     db0:	c8 2f       	mov	r28, r24
    
    if(ASIPMessageReady)
     db2:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <ASIPMessageReady>
     db6:	88 23       	and	r24, r24
     db8:	81 f0       	breq	.+32     	; 0xdda <processValidAsipMessages+0x30>
    {
        switch(Msg_Class)
     dba:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <Msg_Class>
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	71 f0       	breq	.+28     	; 0xdde <processValidAsipMessages+0x34>
     dc2:	98 f1       	brcs	.+102    	; 0xe2a <processValidAsipMessages+0x80>
     dc4:	88 30       	cpi	r24, 0x08	; 8
     dc6:	d1 f0       	breq	.+52     	; 0xdfc <processValidAsipMessages+0x52>
     dc8:	8a 30       	cpi	r24, 0x0A	; 10
     dca:	29 f4       	brne	.+10     	; 0xdd6 <processValidAsipMessages+0x2c>
                    }
                }
                break;

			case ASIP_CLASS_FLOW:
				if(Msg_ID == 0x03) // Blockage Info
     dcc:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <Msg_ID>
     dd0:	83 30       	cpi	r24, 0x03	; 3
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <processValidAsipMessages+0x2c>
     dd4:	70 c0       	rjmp	.+224    	; 0xeb6 <processValidAsipMessages+0x10c>
				
            default:
                break;

        }
        ASIPMessageReady = 0;
     dd6:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <ASIPMessageReady>
    }
}
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret
                }
                                                  
                break;

            case ASIP_CLASS_ACK:
                if(Msg_ID == 0x00) // Ack Ack
     dde:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <Msg_ID>
     de2:	91 11       	cpse	r25, r1
     de4:	f8 cf       	rjmp	.-16     	; 0xdd6 <processValidAsipMessages+0x2c>
                {
                    if((Msg_Payload[0] == ASIP_CLASS_FIELD_CAL) && (Msg_Payload[1] == 0x0B))
     de6:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <Msg_Payload>
     dea:	98 30       	cpi	r25, 0x08	; 8
     dec:	a1 f7       	brne	.-24     	; 0xdd6 <processValidAsipMessages+0x2c>
     dee:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <Msg_Payload+0x1>
     df2:	9b 30       	cpi	r25, 0x0B	; 11
     df4:	81 f7       	brne	.-32     	; 0xdd6 <processValidAsipMessages+0x2c>
                    {
                        calStatusDataAckReceived = 1;
     df6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <calStatusDataAckReceived>
     dfa:	ed cf       	rjmp	.-38     	; 0xdd6 <processValidAsipMessages+0x2c>
                    }
                }
                break;
                   
            case ASIP_CLASS_FIELD_CAL:
                if(Msg_ID == 0x0A) // Field Cal command
     dfc:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <Msg_ID>
     e00:	8a 30       	cpi	r24, 0x0A	; 10
     e02:	49 f7       	brne	.-46     	; 0xdd6 <processValidAsipMessages+0x2c>
                {
                    // send cal CAN command to all sensors on the bus,
                    //  then start a self-cal
                    // Save the connected sensor count, then wait for 
                    //    that many cal status responses
                    if(!getRunCalibrationFlag())
     e04:	0e 94 8f 04 	call	0x91e	; 0x91e <getRunCalibrationFlag>
     e08:	81 11       	cpse	r24, r1
     e0a:	e5 cf       	rjmp	.-54     	; 0xdd6 <processValidAsipMessages+0x2c>
                    {
                        disableSensorDataTx();
     e0c:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <disableSensorDataTx>
                        clearCalStatusResponseCount();
     e10:	0e 94 8f 12 	call	0x251e	; 0x251e <clearCalStatusResponseCount>
                        sendStartCalAckMessage();
     e14:	0e 94 74 06 	call	0xce8	; 0xce8 <sendStartCalAckMessage>
                        setCANDataRequestFlags(reqFlags | FIELD_CAL_REQ_BITMASK);
     e18:	8c 2f       	mov	r24, r28
     e1a:	80 68       	ori	r24, 0x80	; 128
     e1c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <setCANDataRequestFlags>
                        sendStartCalCommand(); 
     e20:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <sendStartCalCommand>
                        startSensorCalibration();    
     e24:	0e 94 85 04 	call	0x90a	; 0x90a <startSensorCalibration>
     e28:	d6 cf       	rjmp	.-84     	; 0xdd6 <processValidAsipMessages+0x2c>
    if(ASIPMessageReady)
    {
        switch(Msg_Class)
        {
            case ASIP_CLASS_DEVICE:     
            if(Msg_ID == 0x00)
     e2a:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <Msg_ID>
     e2e:	81 11       	cpse	r24, r1
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <processValidAsipMessages+0xa6>
                {
                    if(!getRunDeviceInfoSeq())  // Ignore if a previous request is still being processed
     e32:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <runDeviceInfoSeq>
     e36:	81 11       	cpse	r24, r1
     e38:	ce cf       	rjmp	.-100    	; 0xdd6 <processValidAsipMessages+0x2c>
                    {
                        disableSensorDataTx();
     e3a:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <disableSensorDataTx>
                        setCANDataRequestFlags(reqFlags | SYSTEM_DEV_INFO_REQ_BITMASK);
     e3e:	8c 2f       	mov	r24, r28
     e40:	80 62       	ori	r24, 0x20	; 32
     e42:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <setCANDataRequestFlags>
                        resetConnectedSensors();
     e46:	0e 94 43 12 	call	0x2486	; 0x2486 <resetConnectedSensors>
						sendPingAllSensors();   // Request all connected sensors to reply with serial number
     e4a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <sendPingAllSensors>
     e4e:	c3 cf       	rjmp	.-122    	; 0xdd6 <processValidAsipMessages+0x2c>
                    }
                }
                else if(Msg_ID == 0x30) // Update complete / jump to app command
     e50:	80 33       	cpi	r24, 0x30	; 48
     e52:	09 f4       	brne	.+2      	; 0xe56 <processValidAsipMessages+0xac>
     e54:	5f c0       	rjmp	.+190    	; 0xf14 <processValidAsipMessages+0x16a>
                {
                    sendCANFwUpdateComplete();
                    sendCANSensorDataEnableMsg();
                    sendFwUpdateCompleteAckMessage();
                }
                else if(Msg_ID == 0x31) // Firmware write command with address
     e56:	81 33       	cpi	r24, 0x31	; 49
     e58:	09 f4       	brne	.+2      	; 0xe5c <processValidAsipMessages+0xb2>
     e5a:	40 c0       	rjmp	.+128    	; 0xedc <processValidAsipMessages+0x132>
                        reqFlags = getCANDataRequestFlags();
                        setCANDataRequestFlags(reqFlags | FW_UPDATE_DATA_RX_BITMASK);
                        nextAddress += 250;
                    }
                }
                else if(Msg_ID == 0x32) // Start FW Update w/ Serial Number 
     e5c:	82 33       	cpi	r24, 0x32	; 50
     e5e:	09 f0       	breq	.+2      	; 0xe62 <processValidAsipMessages+0xb8>
     e60:	ba cf       	rjmp	.-140    	; 0xdd6 <processValidAsipMessages+0x2c>
                {
                    sendCANSensorDataDisableMsg(); // Disable sensor CAN traffic until the update is done
     e62:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <sendCANSensorDataDisableMsg>
                    
                    receivedAddress = 0;
                    nextAddress = 0;
     e66:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <nextAddress>
     e6a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <nextAddress+0x1>
     e6e:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <nextAddress+0x2>
     e72:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <nextAddress+0x3>

                    // Check if Serial Num  matches this module...payload is 10-byte serial num string
                    // If not, re-Tx the command via CAN
                    if(compareSerialNums(&Msg_Payload[4], (getSerialNumPtr() + 4))) // Serial Num matches this module
     e76:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <getSerialNumPtr>
     e7a:	bc 01       	movw	r22, r24
     e7c:	6c 5f       	subi	r22, 0xFC	; 252
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	8c e8       	ldi	r24, 0x8C	; 140
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <compareSerialNums>
     e88:	88 23       	and	r24, r24
     e8a:	09 f4       	brne	.+2      	; 0xe8e <processValidAsipMessages+0xe4>
     e8c:	71 c0       	rjmp	.+226    	; 0xf70 <processValidAsipMessages+0x1c6>
                    {
                        _CLI();
     e8e:	f8 94       	cli
                        // Set eeprom flag here...
                        // jump to bootloader...
						eeprom_busy_wait();
     e90:	f9 99       	sbic	0x1f, 1	; 31
     e92:	fe cf       	rjmp	.-4      	; 0xe90 <processValidAsipMessages+0xe6>
						while(eeprom_read_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC) != 0x01)
     e94:	8a e6       	ldi	r24, 0x6A	; 106
     e96:	97 e0       	ldi	r25, 0x07	; 7
     e98:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_read_byte>
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <processValidAsipMessages+0xf8>
     ea0:	40 c0       	rjmp	.+128    	; 0xf22 <processValidAsipMessages+0x178>
						{
							eeprom_busy_wait();
     ea2:	f9 99       	sbic	0x1f, 1	; 31
     ea4:	fe cf       	rjmp	.-4      	; 0xea2 <processValidAsipMessages+0xf8>
							eeprom_write_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC, 0x01);
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	8a e6       	ldi	r24, 0x6A	; 106
     eaa:	97 e0       	ldi	r25, 0x07	; 7
     eac:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
							eeprom_busy_wait();
     eb0:	f9 99       	sbic	0x1f, 1	; 31
     eb2:	fe cf       	rjmp	.-4      	; 0xeb0 <processValidAsipMessages+0x106>
     eb4:	ef cf       	rjmp	.-34     	; 0xe94 <processValidAsipMessages+0xea>
                break;

			case ASIP_CLASS_FLOW:
				if(Msg_ID == 0x03) // Blockage Info
				{
                    if((Msg_Length % 5) == 0)
     eb6:	60 91 88 04 	lds	r22, 0x0488	; 0x800488 <Msg_Length>
     eba:	8d ec       	ldi	r24, 0xCD	; 205
     ebc:	68 9f       	mul	r22, r24
     ebe:	81 2d       	mov	r24, r1
     ec0:	11 24       	eor	r1, r1
     ec2:	86 95       	lsr	r24
     ec4:	86 95       	lsr	r24
     ec6:	98 2f       	mov	r25, r24
     ec8:	99 0f       	add	r25, r25
     eca:	99 0f       	add	r25, r25
     ecc:	89 0f       	add	r24, r25
     ece:	68 13       	cpse	r22, r24
     ed0:	82 cf       	rjmp	.-252    	; 0xdd6 <processValidAsipMessages+0x2c>
                    {
                        fillBlockageDataBuffer(&Msg_Payload[0], Msg_Length);
     ed2:	88 e8       	ldi	r24, 0x88	; 136
     ed4:	93 e0       	ldi	r25, 0x03	; 3
     ed6:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <fillBlockageDataBuffer>
     eda:	7d cf       	rjmp	.-262    	; 0xdd6 <processValidAsipMessages+0x2c>
                    sendCANSensorDataEnableMsg();
                    sendFwUpdateCompleteAckMessage();
                }
                else if(Msg_ID == 0x31) // Firmware write command with address
                {
                    setCANDataRequestFlags(reqFlags & ~(START_FW_UPDATE_RESP_BITMASK)); // Clear the start FW Update flag
     edc:	8c 2f       	mov	r24, r28
     ede:	8b 7f       	andi	r24, 0xFB	; 251
     ee0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <setCANDataRequestFlags>
                    
                    // Make sure the address is correct
                    receivedAddress = (DWORD)Msg_Payload[0] | ((DWORD)Msg_Payload[1] << 8) | ((DWORD)Msg_Payload[2] << 16) | ((DWORD)Msg_Payload[3] << 24);
                    
                    if(receivedAddress != nextAddress)
     ee4:	40 91 88 03 	lds	r20, 0x0388	; 0x800388 <Msg_Payload>
     ee8:	50 91 89 03 	lds	r21, 0x0389	; 0x800389 <Msg_Payload+0x1>
     eec:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <Msg_Payload+0x2>
     ef0:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <Msg_Payload+0x3>
     ef4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <nextAddress>
     ef8:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <nextAddress+0x1>
     efc:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <nextAddress+0x2>
     f00:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <nextAddress+0x3>
     f04:	48 17       	cp	r20, r24
     f06:	59 07       	cpc	r21, r25
     f08:	6a 07       	cpc	r22, r26
     f0a:	7b 07       	cpc	r23, r27
     f0c:	69 f0       	breq	.+26     	; 0xf28 <processValidAsipMessages+0x17e>
                    {
                        sendFwUpdatePacketNackMessage();
     f0e:	0e 94 94 06 	call	0xd28	; 0xd28 <sendFwUpdatePacketNackMessage>
     f12:	61 cf       	rjmp	.-318    	; 0xdd6 <processValidAsipMessages+0x2c>
						sendPingAllSensors();   // Request all connected sensors to reply with serial number
                    }
                }
                else if(Msg_ID == 0x30) // Update complete / jump to app command
                {
                    sendCANFwUpdateComplete();
     f14:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <sendCANFwUpdateComplete>
                    sendCANSensorDataEnableMsg();
     f18:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <sendCANSensorDataEnableMsg>
                    sendFwUpdateCompleteAckMessage();
     f1c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <sendFwUpdateCompleteAckMessage>
     f20:	5a cf       	rjmp	.-332    	; 0xdd6 <processValidAsipMessages+0x2c>
						{
							eeprom_busy_wait();
							eeprom_write_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC, 0x01);
							eeprom_busy_wait();
						}
                        jumpToBootloader();
     f22:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <jumpToBootloader>
     f26:	57 cf       	rjmp	.-338    	; 0xdd6 <processValidAsipMessages+0x2c>
     f28:	ec e8       	ldi	r30, 0x8C	; 140
     f2a:	f3 e0       	ldi	r31, 0x03	; 3
     f2c:	a6 e8       	ldi	r26, 0x86	; 134
     f2e:	b2 e0       	ldi	r27, 0x02	; 2
    BYTE i;

    for(i = 0; i < 250; i++)
    {
        // Copy the FW image data, but ignore the 4 byte address
        fwUpdateDataBuff[i] = Msg_Payload[i + 4];
     f30:	81 91       	ld	r24, Z+
     f32:	8d 93       	st	X+, r24

static void fillFwDataBuffer(void)
{
    BYTE i;

    for(i = 0; i < 250; i++)
     f34:	84 e0       	ldi	r24, 0x04	; 4
     f36:	e6 38       	cpi	r30, 0x86	; 134
     f38:	f8 07       	cpc	r31, r24
     f3a:	d1 f7       	brne	.-12     	; 0xf30 <processValidAsipMessages+0x186>
                        sendFwUpdatePacketNackMessage();
                    }
                    else
                    {
                        fillFwDataBuffer();
                        reqFlags = getCANDataRequestFlags();
     f3c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
                        setCANDataRequestFlags(reqFlags | FW_UPDATE_DATA_RX_BITMASK);
     f40:	88 60       	ori	r24, 0x08	; 8
     f42:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <setCANDataRequestFlags>
                        nextAddress += 250;
     f46:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <nextAddress>
     f4a:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <nextAddress+0x1>
     f4e:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <nextAddress+0x2>
     f52:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <nextAddress+0x3>
     f56:	86 50       	subi	r24, 0x06	; 6
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	af 4f       	sbci	r26, 0xFF	; 255
     f5c:	bf 4f       	sbci	r27, 0xFF	; 255
     f5e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <nextAddress>
     f62:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <nextAddress+0x1>
     f66:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <nextAddress+0x2>
     f6a:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <nextAddress+0x3>
     f6e:	33 cf       	rjmp	.-410    	; 0xdd6 <processValidAsipMessages+0x2c>
                        jumpToBootloader();
                    }
                    else
                    {
                        // Re-Tx via CAN
                        sendCANStartFwUpdateMsg(&Msg_Payload[4]);
     f70:	8c e8       	ldi	r24, 0x8C	; 140
     f72:	93 e0       	ldi	r25, 0x03	; 3
     f74:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <sendCANStartFwUpdateMsg>
     f78:	2e cf       	rjmp	.-420    	; 0xdd6 <processValidAsipMessages+0x2c>

00000f7a <sendBITMessage>:

    transmitAsipMessage();
}

void sendBITMessage(WORD id, BYTE severity)
{
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <sendBITMessage+0x6>
     f80:	00 d0       	rcall	.+0      	; 0xf82 <sendBITMessage+0x8>
     f82:	1f 92       	push	r1
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
    BYTE payload[5];

    payload[0] = 1;
     f88:	21 e0       	ldi	r18, 0x01	; 1
     f8a:	29 83       	std	Y+1, r18	; 0x01
    payload[1] = (BYTE)(id & 0xFF);
     f8c:	8a 83       	std	Y+2, r24	; 0x02
    payload[2] = (BYTE)(id >> 8);
     f8e:	9b 83       	std	Y+3, r25	; 0x03
    payload[3] = severity;
     f90:	6c 83       	std	Y+4, r22	; 0x04
    payload[4] = 0; // 0 => fail
     f92:	1d 82       	std	Y+5, r1	; 0x05
    
    buildAsipTransmitMessage(0x03, 0x09, 5, &payload[0]);
     f94:	9e 01       	movw	r18, r28
     f96:	2f 5f       	subi	r18, 0xFF	; 255
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	45 e0       	ldi	r20, 0x05	; 5
     f9c:	69 e0       	ldi	r22, 0x09	; 9
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	0e 94 82 05 	call	0xb04	; 0xb04 <buildAsipTransmitMessage>
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     fa4:	8c e7       	ldi	r24, 0x7C	; 124
     fa6:	92 e0       	ldi	r25, 0x02	; 2
     fa8:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <sendUdpPacket>
    payload[3] = severity;
    payload[4] = 0; // 0 => fail
    
    buildAsipTransmitMessage(0x03, 0x09, 5, &payload[0]);
    transmitAsipMessage();
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <getFwDataPtr>:
}

BYTE * getFwDataPtr(void)
{
    return &fwUpdateDataBuff[0];
}
     fbc:	86 e8       	ldi	r24, 0x86	; 134
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	08 95       	ret

00000fc2 <storeDeviceInfoData>:


// Collects data packets from a wired sensor and assembles 
//  them into a device info response message
void storeDeviceInfoData(BYTE * data)
{
     fc2:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <deviceInfoIndex>
     fc6:	dc 01       	movw	r26, r24
     fc8:	98 e0       	ldi	r25, 0x08	; 8
     fca:	92 0f       	add	r25, r18
    BYTE i;

    for(i = 0; i < 8; i++)
    {
        deviceInfoForwardingBuff[deviceInfoIndex] = *(data++);
     fcc:	8d 91       	ld	r24, X+
     fce:	e2 2f       	mov	r30, r18
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	ee 5d       	subi	r30, 0xDE	; 222
     fd4:	fd 4f       	sbci	r31, 0xFD	; 253
     fd6:	80 83       	st	Z, r24
     fd8:	2f 5f       	subi	r18, 0xFF	; 255
//  them into a device info response message
void storeDeviceInfoData(BYTE * data)
{
    BYTE i;

    for(i = 0; i < 8; i++)
     fda:	29 13       	cpse	r18, r25
     fdc:	f7 cf       	rjmp	.-18     	; 0xfcc <storeDeviceInfoData+0xa>
     fde:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <deviceInfoIndex>
    {
        deviceInfoForwardingBuff[deviceInfoIndex] = *(data++);
        deviceInfoIndex++;
    }

    if(deviceInfoIndex >= 74)
     fe2:	2a 34       	cpi	r18, 0x4A	; 74
     fe4:	08 f4       	brcc	.+2      	; 0xfe8 <storeDeviceInfoData+0x26>
     fe6:	08 95       	ret
    {
        deviceInfoIndex = 0;
     fe8:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <deviceInfoIndex>
        i = getCANDataRequestFlags();
     fec:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
        setCANDataRequestFlags(i | DEV_INFO_READY_BITMASK);
     ff0:	80 61       	ori	r24, 0x10	; 16
     ff2:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <setCANDataRequestFlags>

00000ff6 <getRunDeviceInfoSeq>:
}

BYTE getRunDeviceInfoSeq(void)
{
    return runDeviceInfoSeq;
}
     ff6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <runDeviceInfoSeq>
     ffa:	08 95       	ret

00000ffc <setRunDeviceInfoSeq>:

void setRunDeviceInfoSeq(void)
{
    runDeviceInfoSeq = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <runDeviceInfoSeq>
    1002:	08 95       	ret

00001004 <clearRunDeviceInfoSeq>:
}

void clearRunDeviceInfoSeq(void)
{
    runDeviceInfoSeq = 0;
    1004:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <runDeviceInfoSeq>
    1008:	08 95       	ret

0000100a <getCalStatusAckReceivedFlag>:
}

BYTE getCalStatusAckReceivedFlag(void)
{
    return calStatusDataAckReceived;
}
    100a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <calStatusDataAckReceived>
    100e:	08 95       	ret

00001010 <clearCalStatusAckReceivedFlag>:

void clearCalStatusAckReceivedFlag(void)
{
    calStatusDataAckReceived = 0;
    1010:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <calStatusDataAckReceived>
    1014:	08 95       	ret

00001016 <transmitDeviceInfoASIP>:
}

void transmitDeviceInfoASIP(void)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	1f 92       	push	r1
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    BYTE sensorCount = 0;
    1020:	19 82       	std	Y+1, r1	; 0x01
	
	buildAsipTransmitMessage(0x00, 0x01, 74, deviceInfoForwardingBuff);
    1022:	22 e2       	ldi	r18, 0x22	; 34
    1024:	32 e0       	ldi	r19, 0x02	; 2
    1026:	4a e4       	ldi	r20, 0x4A	; 74
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0e 94 82 05 	call	0xb04	; 0xb04 <buildAsipTransmitMessage>
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
    1030:	8c e7       	ldi	r24, 0x7C	; 124
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <sendUdpPacket>
{
    BYTE sensorCount = 0;
	
	buildAsipTransmitMessage(0x00, 0x01, 74, deviceInfoForwardingBuff);
	transmitAsipMessage();
	sensorCount = getConnectedSensorCount() + 1; // Get wired sensor count and add one for the wireless
    1038:	0e 94 89 12 	call	0x2512	; 0x2512 <getConnectedSensorCount>
    103c:	8f 5f       	subi	r24, 0xFF	; 255
    103e:	89 83       	std	Y+1, r24	; 0x01
	buildAsipTransmitMessage(0x0A, 0x02, 1, &sensorCount);
    1040:	9e 01       	movw	r18, r28
    1042:	2f 5f       	subi	r18, 0xFF	; 255
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	41 e0       	ldi	r20, 0x01	; 1
    1048:	62 e0       	ldi	r22, 0x02	; 2
    104a:	8a e0       	ldi	r24, 0x0A	; 10
    104c:	0e 94 82 05 	call	0xb04	; 0xb04 <buildAsipTransmitMessage>
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
    1050:	8c e7       	ldi	r24, 0x7C	; 124
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <sendUdpPacket>
	buildAsipTransmitMessage(0x00, 0x01, 74, deviceInfoForwardingBuff);
	transmitAsipMessage();
	sensorCount = getConnectedSensorCount() + 1; // Get wired sensor count and add one for the wireless
	buildAsipTransmitMessage(0x0A, 0x02, 1, &sensorCount);
	transmitAsipMessage();
}
    1058:	0f 90       	pop	r0
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	08 95       	ret

00001060 <sendDeviceInfo>:
    buildAsipTransmitMessage(0x03, 0x09, 5, &payload[0]);
    transmitAsipMessage();
}

void sendDeviceInfo(void)
{
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    BYTE i;
    BYTE * tempPtr;

    tempPtr = getSerialNumPtr();
    1064:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <getSerialNumPtr>
    1068:	a2 e2       	ldi	r26, 0x22	; 34
    106a:	b2 e0       	ldi	r27, 0x02	; 2
    106c:	2c e6       	ldi	r18, 0x6C	; 108
    106e:	32 e0       	ldi	r19, 0x02	; 2
    1070:	fd 01       	movw	r30, r26

    for(i = 0; i < 74; i++)
    {
        deviceInfoForwardingBuff[i] = 0;
    1072:	11 92       	st	Z+, r1
    BYTE i;
    BYTE * tempPtr;

    tempPtr = getSerialNumPtr();

    for(i = 0; i < 74; i++)
    1074:	2e 17       	cp	r18, r30
    1076:	3f 07       	cpc	r19, r31
    1078:	e1 f7       	brne	.-8      	; 0x1072 <sendDeviceInfo+0x12>
    107a:	fc 01       	movw	r30, r24
    107c:	cc e2       	ldi	r28, 0x2C	; 44
    107e:	d2 e0       	ldi	r29, 0x02	; 2
    }

    // Build payload
    for(i = 0; i < 10; i++)
    {
        deviceInfoForwardingBuff[i] = *tempPtr++;
    1080:	81 91       	ld	r24, Z+
    1082:	8d 93       	st	X+, r24
    {
        deviceInfoForwardingBuff[i] = 0;
    }

    // Build payload
    for(i = 0; i < 10; i++)
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	ac 32       	cpi	r26, 0x2C	; 44
    1088:	b8 07       	cpc	r27, r24
    108a:	d1 f7       	brne	.-12     	; 0x1080 <sendDeviceInfo+0x20>
    {
        deviceInfoForwardingBuff[i] = *tempPtr++;
    }

    tempPtr = (BYTE *)getFwVersionPtr();
    108c:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <getFwVersionPtr>
    1090:	fc 01       	movw	r30, r24
    1092:	2c e3       	ldi	r18, 0x3C	; 60
    1094:	32 e0       	ldi	r19, 0x02	; 2

    for(i = 10; i < 26; i++)
    {
        deviceInfoForwardingBuff[i] = *tempPtr++;
    1096:	81 91       	ld	r24, Z+
    1098:	89 93       	st	Y+, r24
        deviceInfoForwardingBuff[i] = *tempPtr++;
    }

    tempPtr = (BYTE *)getFwVersionPtr();

    for(i = 10; i < 26; i++)
    109a:	2c 17       	cp	r18, r28
    109c:	3d 07       	cpc	r19, r29
    109e:	d9 f7       	brne	.-10     	; 0x1096 <sendDeviceInfo+0x36>
    {
        deviceInfoForwardingBuff[i] = *tempPtr++;
    }

    readFwPartNum(&deviceInfoForwardingBuff[26]);
    10a0:	8c e3       	ldi	r24, 0x3C	; 60
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <readFwPartNum>

    readHwVersion(&deviceInfoForwardingBuff[42]);
    10a8:	8c e4       	ldi	r24, 0x4C	; 76
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <readHwVersion>
    readHwPartNum(&deviceInfoForwardingBuff[58]);
    10b0:	8c e5       	ldi	r24, 0x5C	; 92
    10b2:	92 e0       	ldi	r25, 0x02	; 2
    10b4:	0e 94 3f 1a 	call	0x347e	; 0x347e <readHwPartNum>
    
	transmitDeviceInfoASIP();

}
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    readFwPartNum(&deviceInfoForwardingBuff[26]);

    readHwVersion(&deviceInfoForwardingBuff[42]);
    readHwPartNum(&deviceInfoForwardingBuff[58]);
    
	transmitDeviceInfoASIP();
    10bc:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <transmitDeviceInfoASIP>

000010c0 <transmitCalStatusInfoASIP>:
}

// Configures the calibration results ASIP message and copies 
//  the data into the WiFi transmit buffer.
void transmitCalStatusInfoASIP(BYTE sensorCount, BYTE* dataBuffer)
{
    10c0:	9b 01       	movw	r18, r22
    BYTE totalLength;
    
    totalLength = (sensorCount * 7) + 1;
    *dataBuffer = sensorCount; // Set payload field of sensor count
    10c2:	fb 01       	movw	r30, r22
    10c4:	80 83       	st	Z, r24
    buildAsipTransmitMessage(ASIP_CLASS_FIELD_CAL, 0x0B, totalLength, dataBuffer);
    10c6:	48 2f       	mov	r20, r24
    10c8:	44 0f       	add	r20, r20
    10ca:	44 0f       	add	r20, r20
    10cc:	44 0f       	add	r20, r20
    10ce:	48 1b       	sub	r20, r24
    10d0:	4f 5f       	subi	r20, 0xFF	; 255
    10d2:	6b e0       	ldi	r22, 0x0B	; 11
    10d4:	88 e0       	ldi	r24, 0x08	; 8
    10d6:	0e 94 82 05 	call	0xb04	; 0xb04 <buildAsipTransmitMessage>
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
    10da:	8c e7       	ldi	r24, 0x7C	; 124
    10dc:	92 e0       	ldi	r25, 0x02	; 2
    10de:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <sendUdpPacket>

000010e2 <resetDeviceInfoBuffer>:
//  in the event of an abort/timeout situation
void resetDeviceInfoBuffer(void)
{
	BYTE flags = 0;
	
	deviceInfoIndex = 0;
    10e2:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <deviceInfoIndex>
    flags = getCANDataRequestFlags();
    10e6:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
	
	if(!(flags & SYSTEM_DEV_INFO_REQ_BITMASK))
    10ea:	85 fd       	sbrc	r24, 5
    10ec:	08 95       	ret
	{
		// Only do this if the wireless sensor's device info has been sent
		setCANDataRequestFlags(flags | DEV_INFO_READY_BITMASK);	
    10ee:	80 61       	ori	r24, 0x10	; 16
    10f0:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <setCANDataRequestFlags>

000010f4 <initBitMonitor>:
static BYTE systemErrorState;
static BYTE lastActiveBIT = 0xFF;

void initBitMonitor(void)
{
    systemErrorState = ERROR_STATE_NORMAL;
    10f4:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <systemErrorState>
    10f8:	08 95       	ret

000010fa <stepBitMonitorStateMachine>:
}

void stepBitMonitorStateMachine(void)
{
    switch(systemErrorState)
    10fa:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <systemErrorState>
    10fe:	81 11       	cpse	r24, r1
    1100:	08 95       	ret
    {
        case ERROR_STATE_NORMAL:
            if((!getCANTrafficDetected()) && (get30SecStartupTimer()) && (getHwConfig() == HW_TYPE_WIRED))
    1102:	0e 94 40 12 	call	0x2480	; 0x2480 <getCANTrafficDetected>
    1106:	81 11       	cpse	r24, r1
    1108:	08 c0       	rjmp	.+16     	; 0x111a <__stack+0x1b>
    110a:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <get30SecStartupTimer>
    110e:	88 23       	and	r24, r24
    1110:	21 f0       	breq	.+8      	; 0x111a <__stack+0x1b>
    1112:	0e 94 cf 1b 	call	0x379e	; 0x379e <getHwConfig>
    1116:	88 23       	and	r24, r24
    1118:	59 f0       	breq	.+22     	; 0x1130 <__stack+0x31>
            {
                sendCANBitResultsMsg(0x01);
                systemErrorState = ERROR_STATE_NO_CAN;
            }
            else if(getSensorOORFlag())
    111a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <getSensorOORFlag>
    111e:	88 23       	and	r24, r24
    1120:	79 f3       	breq	.-34     	; 0x1100 <__stack+0x1>
            {
                sendCANBitResultsMsg(0x02);
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sendCANBitResultsMsg>
                systemErrorState = ERROR_STATE_SENSOR_OOR;
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <systemErrorState>
    112e:	08 95       	ret
    switch(systemErrorState)
    {
        case ERROR_STATE_NORMAL:
            if((!getCANTrafficDetected()) && (get30SecStartupTimer()) && (getHwConfig() == HW_TYPE_WIRED))
            {
                sendCANBitResultsMsg(0x01);
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sendCANBitResultsMsg>
                systemErrorState = ERROR_STATE_NO_CAN;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <systemErrorState>
    113c:	08 95       	ret

0000113e <getActiveSystemError>:
    }
}

BYTE getActiveSystemError(void)
{
    return (systemErrorState == ERROR_STATE_NORMAL)?0:1;     
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <systemErrorState>
    1144:	91 11       	cpse	r25, r1
    1146:	01 c0       	rjmp	.+2      	; 0x114a <getActiveSystemError+0xc>
    1148:	80 e0       	ldi	r24, 0x00	; 0
}
    114a:	08 95       	ret

0000114c <setLastActiveBIT>:

void setLastActiveBIT(BYTE val)
{
    lastActiveBIT = val;
    114c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lastActiveBIT>
    1150:	08 95       	ret

00001152 <getLastActiveBIT>:
}

BYTE getLastActiveBIT(void)
{
    return lastActiveBIT;
    1152:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lastActiveBIT>
    1156:	08 95       	ret

00001158 <initBlockageProcessor>:


BYTE getNoMagDetectionDone(void)
{
    return noMagDetectionDone;
}
    1158:	e8 e9       	ldi	r30, 0x98	; 152
    115a:	f4 e0       	ldi	r31, 0x04	; 4
    115c:	10 82       	st	Z, r1
    115e:	11 82       	std	Z+1, r1	; 0x01
    1160:	12 82       	std	Z+2, r1	; 0x02
    1162:	13 82       	std	Z+3, r1	; 0x03
    1164:	8f e0       	ldi	r24, 0x0F	; 15
    1166:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <noMagnetRowMask>
    116a:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <sensorOORFlag>
    116e:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <flowDetectedFlag>
    1172:	e9 ec       	ldi	r30, 0xC9	; 201
    1174:	f7 e0       	ldi	r31, 0x07	; 7
    1176:	10 82       	st	Z, r1
    1178:	11 82       	std	Z+1, r1	; 0x01
    117a:	12 82       	std	Z+2, r1	; 0x02
    117c:	13 82       	std	Z+3, r1	; 0x03
    117e:	08 95       	ret

00001180 <readCalValues>:
    1180:	af 92       	push	r10
    1182:	bf 92       	push	r11
    1184:	cf 92       	push	r12
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	80 e4       	ldi	r24, 0x40	; 64
    1196:	c8 2e       	mov	r12, r24
    1198:	87 e0       	ldi	r24, 0x07	; 7
    119a:	d8 2e       	mov	r13, r24
    119c:	86 01       	movw	r16, r12
    119e:	00 54       	subi	r16, 0x40	; 64
    11a0:	17 40       	sbci	r17, 0x07	; 7
    11a2:	c8 01       	movw	r24, r16
    11a4:	8f 56       	subi	r24, 0x6F	; 111
    11a6:	98 4f       	sbci	r25, 0xF8	; 248
    11a8:	7c 01       	movw	r14, r24
    11aa:	e6 01       	movw	r28, r12
    11ac:	2e 97       	sbiw	r28, 0x0e	; 14
    11ae:	03 53       	subi	r16, 0x33	; 51
    11b0:	18 4f       	sbci	r17, 0xF8	; 248
    11b2:	f9 99       	sbic	0x1f, 1	; 31
    11b4:	fe cf       	rjmp	.-4      	; 0x11b2 <readCalValues+0x32>
    11b6:	ce 01       	movw	r24, r28
    11b8:	cc 96       	adiw	r24, 0x3c	; 60
    11ba:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_read_byte>
    11be:	a8 2e       	mov	r10, r24
    11c0:	b1 2c       	mov	r11, r1
    11c2:	f9 99       	sbic	0x1f, 1	; 31
    11c4:	fe cf       	rjmp	.-4      	; 0x11c2 <readCalValues+0x42>
    11c6:	ce 01       	movw	r24, r28
    11c8:	cd 96       	adiw	r24, 0x3d	; 61
    11ca:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_read_byte>
    11ce:	95 01       	movw	r18, r10
    11d0:	38 2b       	or	r19, r24
    11d2:	c9 01       	movw	r24, r18
    11d4:	8f 3f       	cpi	r24, 0xFF	; 255
    11d6:	3f ef       	ldi	r19, 0xFF	; 255
    11d8:	93 07       	cpc	r25, r19
    11da:	b9 f1       	breq	.+110    	; 0x124a <readCalValues+0xca>
    11dc:	f8 01       	movw	r30, r16
    11de:	81 93       	st	Z+, r24
    11e0:	91 93       	st	Z+, r25
    11e2:	8f 01       	movw	r16, r30
    11e4:	f9 99       	sbic	0x1f, 1	; 31
    11e6:	fe cf       	rjmp	.-4      	; 0x11e4 <readCalValues+0x64>
    11e8:	ce 01       	movw	r24, r28
    11ea:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_read_byte>
    11ee:	a8 2e       	mov	r10, r24
    11f0:	b1 2c       	mov	r11, r1
    11f2:	f9 99       	sbic	0x1f, 1	; 31
    11f4:	fe cf       	rjmp	.-4      	; 0x11f2 <readCalValues+0x72>
    11f6:	ce 01       	movw	r24, r28
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_read_byte>
    11fe:	95 01       	movw	r18, r10
    1200:	38 2b       	or	r19, r24
    1202:	c9 01       	movw	r24, r18
    1204:	8f 3f       	cpi	r24, 0xFF	; 255
    1206:	3f ef       	ldi	r19, 0xFF	; 255
    1208:	93 07       	cpc	r25, r19
    120a:	e1 f0       	breq	.+56     	; 0x1244 <readCalValues+0xc4>
    120c:	f7 01       	movw	r30, r14
    120e:	81 93       	st	Z+, r24
    1210:	91 93       	st	Z+, r25
    1212:	7f 01       	movw	r14, r30
    1214:	22 96       	adiw	r28, 0x02	; 2
    1216:	cc 16       	cp	r12, r28
    1218:	dd 06       	cpc	r13, r29
    121a:	59 f6       	brne	.-106    	; 0x11b2 <readCalValues+0x32>
    121c:	fe e0       	ldi	r31, 0x0E	; 14
    121e:	cf 0e       	add	r12, r31
    1220:	d1 1c       	adc	r13, r1
    1222:	28 e7       	ldi	r18, 0x78	; 120
    1224:	c2 16       	cp	r12, r18
    1226:	27 e0       	ldi	r18, 0x07	; 7
    1228:	d2 06       	cpc	r13, r18
    122a:	09 f0       	breq	.+2      	; 0x122e <readCalValues+0xae>
    122c:	b7 cf       	rjmp	.-146    	; 0x119c <readCalValues+0x1c>
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	bf 90       	pop	r11
    1240:	af 90       	pop	r10
    1242:	08 95       	ret
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	e1 cf       	rjmp	.-62     	; 0x120c <readCalValues+0x8c>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	92 e0       	ldi	r25, 0x02	; 2
    124e:	c6 cf       	rjmp	.-116    	; 0x11dc <readCalValues+0x5c>

00001250 <applyCalibrationToData>:
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	0e 94 82 04 	call	0x904	; 0x904 <getAveragedADCDataPtr>
    1258:	fc 01       	movw	r30, r24
    125a:	61 e9       	ldi	r22, 0x91	; 145
    125c:	77 e0       	ldi	r23, 0x07	; 7
    125e:	c9 ec       	ldi	r28, 0xC9	; 201
    1260:	d7 e0       	ldi	r29, 0x07	; 7
    1262:	af 01       	movw	r20, r30
    1264:	42 5f       	subi	r20, 0xF2	; 242
    1266:	5f 4f       	sbci	r21, 0xFF	; 255
    1268:	db 01       	movw	r26, r22
    126a:	05 c0       	rjmp	.+10     	; 0x1276 <applyCalibrationToData+0x26>
    126c:	21 93       	st	Z+, r18
    126e:	31 93       	st	Z+, r19
    1270:	4e 17       	cp	r20, r30
    1272:	5f 07       	cpc	r21, r31
    1274:	81 f0       	breq	.+32     	; 0x1296 <applyCalibrationToData+0x46>
    1276:	20 81       	ld	r18, Z
    1278:	31 81       	ldd	r19, Z+1	; 0x01
    127a:	8d 91       	ld	r24, X+
    127c:	9d 91       	ld	r25, X+
    127e:	28 1b       	sub	r18, r24
    1280:	39 0b       	sbc	r19, r25
    1282:	37 ff       	sbrs	r19, 7
    1284:	f3 cf       	rjmp	.-26     	; 0x126c <applyCalibrationToData+0x1c>
    1286:	31 95       	neg	r19
    1288:	21 95       	neg	r18
    128a:	31 09       	sbc	r19, r1
    128c:	21 93       	st	Z+, r18
    128e:	31 93       	st	Z+, r19
    1290:	4e 17       	cp	r20, r30
    1292:	5f 07       	cpc	r21, r31
    1294:	81 f7       	brne	.-32     	; 0x1276 <applyCalibrationToData+0x26>
    1296:	62 5f       	subi	r22, 0xF2	; 242
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	fa 01       	movw	r30, r20
    129c:	c6 17       	cp	r28, r22
    129e:	d7 07       	cpc	r29, r23
    12a0:	01 f7       	brne	.-64     	; 0x1262 <applyCalibrationToData+0x12>
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	08 95       	ret

000012a8 <getMaxSensorDataIndex>:
    12a8:	cf 93       	push	r28
    12aa:	c8 2f       	mov	r28, r24
    12ac:	0e 94 82 04 	call	0x904	; 0x904 <getAveragedADCDataPtr>
    12b0:	fc 01       	movw	r30, r24
    12b2:	2e e0       	ldi	r18, 0x0E	; 14
    12b4:	c2 9f       	mul	r28, r18
    12b6:	e0 0d       	add	r30, r0
    12b8:	f1 1d       	adc	r31, r1
    12ba:	11 24       	eor	r1, r1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	21 91       	ld	r18, Z+
    12c6:	31 91       	ld	r19, Z+
    12c8:	42 17       	cp	r20, r18
    12ca:	53 07       	cpc	r21, r19
    12cc:	10 f4       	brcc	.+4      	; 0x12d2 <getMaxSensorDataIndex+0x2a>
    12ce:	89 2f       	mov	r24, r25
    12d0:	a9 01       	movw	r20, r18
    12d2:	9f 5f       	subi	r25, 0xFF	; 255
    12d4:	97 30       	cpi	r25, 0x07	; 7
    12d6:	b1 f7       	brne	.-20     	; 0x12c4 <getMaxSensorDataIndex+0x1c>
    12d8:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <runNoMagnetDetection>
    12dc:	99 23       	and	r25, r25
    12de:	59 f1       	breq	.+86     	; 0x1336 <getMaxSensorDataIndex+0x8e>
    12e0:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <noMagnetRowMask>
    12e4:	6c 2f       	mov	r22, r28
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	e2 2f       	mov	r30, r18
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	0c 2e       	mov	r0, r28
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <getMaxSensorDataIndex+0x4c>
    12f0:	f5 95       	asr	r31
    12f2:	e7 95       	ror	r30
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <getMaxSensorDataIndex+0x48>
    12f8:	e0 fd       	sbrc	r30, 0
    12fa:	3f c0       	rjmp	.+126    	; 0x137a <getMaxSensorDataIndex+0xd2>
    12fc:	fb 01       	movw	r30, r22
    12fe:	e1 57       	subi	r30, 0x71	; 113
    1300:	fb 4f       	sbci	r31, 0xFB	; 251
    1302:	10 82       	st	Z, r1
    1304:	21 11       	cpse	r18, r1
    1306:	24 c0       	rjmp	.+72     	; 0x1350 <getMaxSensorDataIndex+0xa8>
    1308:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <runNoMagnetDetection>
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <noMagDetectionDone>
    1312:	4e 31       	cpi	r20, 0x1E	; 30
    1314:	51 05       	cpc	r21, r1
    1316:	08 f0       	brcs	.+2      	; 0x131a <getMaxSensorDataIndex+0x72>
    1318:	85 c0       	rjmp	.+266    	; 0x1424 <getMaxSensorDataIndex+0x17c>
    131a:	fb 01       	movw	r30, r22
    131c:	e7 53       	subi	r30, 0x37	; 55
    131e:	f8 4f       	sbci	r31, 0xF8	; 248
    1320:	80 81       	ld	r24, Z
    1322:	8f 5f       	subi	r24, 0xFF	; 255
    1324:	80 83       	st	Z, r24
    1326:	8d 30       	cpi	r24, 0x0D	; 13
    1328:	08 f4       	brcc	.+2      	; 0x132c <getMaxSensorDataIndex+0x84>
    132a:	76 c0       	rjmp	.+236    	; 0x1418 <getMaxSensorDataIndex+0x170>
    132c:	8c e0       	ldi	r24, 0x0C	; 12
    132e:	80 83       	st	Z, r24
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret
    1336:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <noMagDetectionDone>
    133a:	99 23       	and	r25, r25
    133c:	c9 f1       	breq	.+114    	; 0x13b0 <getMaxSensorDataIndex+0x108>
    133e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <noMagPersistenceRow.2492>
    1342:	c9 17       	cp	r28, r25
    1344:	09 f4       	brne	.+2      	; 0x1348 <getMaxSensorDataIndex+0xa0>
    1346:	74 c0       	rjmp	.+232    	; 0x1430 <getMaxSensorDataIndex+0x188>
    1348:	6c 2f       	mov	r22, r28
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <noMagnetRowMask>
    1350:	4e 31       	cpi	r20, 0x1E	; 30
    1352:	51 05       	cpc	r21, r1
    1354:	08 f0       	brcs	.+2      	; 0x1358 <getMaxSensorDataIndex+0xb0>
    1356:	4e c0       	rjmp	.+156    	; 0x13f4 <getMaxSensorDataIndex+0x14c>
    1358:	82 2f       	mov	r24, r18
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	06 2e       	mov	r0, r22
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <getMaxSensorDataIndex+0xbc>
    1360:	95 95       	asr	r25
    1362:	87 95       	ror	r24
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <getMaxSensorDataIndex+0xb8>
    1368:	80 ff       	sbrs	r24, 0
    136a:	d7 cf       	rjmp	.-82     	; 0x131a <getMaxSensorDataIndex+0x72>
    136c:	fb 01       	movw	r30, r22
    136e:	e7 53       	subi	r30, 0x37	; 55
    1370:	f8 4f       	sbci	r31, 0xF8	; 248
    1372:	10 82       	st	Z, r1
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret
    137a:	48 33       	cpi	r20, 0x38	; 56
    137c:	51 05       	cpc	r21, r1
    137e:	08 f4       	brcc	.+2      	; 0x1382 <getMaxSensorDataIndex+0xda>
    1380:	bd cf       	rjmp	.-134    	; 0x12fc <getMaxSensorDataIndex+0x54>
    1382:	82 30       	cpi	r24, 0x02	; 2
    1384:	08 f4       	brcc	.+2      	; 0x1388 <getMaxSensorDataIndex+0xe0>
    1386:	ba cf       	rjmp	.-140    	; 0x12fc <getMaxSensorDataIndex+0x54>
    1388:	fb 01       	movw	r30, r22
    138a:	e1 57       	subi	r30, 0x71	; 113
    138c:	fb 4f       	sbci	r31, 0xFB	; 251
    138e:	90 81       	ld	r25, Z
    1390:	9f 5f       	subi	r25, 0xFF	; 255
    1392:	90 83       	st	Z, r25
    1394:	93 30       	cpi	r25, 0x03	; 3
    1396:	08 f4       	brcc	.+2      	; 0x139a <getMaxSensorDataIndex+0xf2>
    1398:	b5 cf       	rjmp	.-150    	; 0x1304 <getMaxSensorDataIndex+0x5c>
    139a:	e1 e0       	ldi	r30, 0x01	; 1
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <getMaxSensorDataIndex+0xfa>
    13a0:	ee 0f       	add	r30, r30
    13a2:	ca 95       	dec	r28
    13a4:	ea f7       	brpl	.-6      	; 0x13a0 <getMaxSensorDataIndex+0xf8>
    13a6:	e0 95       	com	r30
    13a8:	2e 23       	and	r18, r30
    13aa:	20 93 97 04 	sts	0x0497, r18	; 0x800497 <noMagnetRowMask>
    13ae:	aa cf       	rjmp	.-172    	; 0x1304 <getMaxSensorDataIndex+0x5c>
    13b0:	48 33       	cpi	r20, 0x38	; 56
    13b2:	51 05       	cpc	r21, r1
    13b4:	20 f2       	brcs	.-120    	; 0x133e <getMaxSensorDataIndex+0x96>
    13b6:	82 30       	cpi	r24, 0x02	; 2
    13b8:	10 f2       	brcs	.-124    	; 0x133e <getMaxSensorDataIndex+0x96>
    13ba:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <noMagPersistenceRow.2492>
    13be:	9f 3f       	cpi	r25, 0xFF	; 255
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <getMaxSensorDataIndex+0x11c>
    13c2:	3f c0       	rjmp	.+126    	; 0x1442 <getMaxSensorDataIndex+0x19a>
    13c4:	c9 17       	cp	r28, r25
    13c6:	b9 f1       	breq	.+110    	; 0x1436 <getMaxSensorDataIndex+0x18e>
    13c8:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <noMagPeristence.2491>
    13cc:	94 30       	cpi	r25, 0x04	; 4
    13ce:	28 f0       	brcs	.+10     	; 0x13da <getMaxSensorDataIndex+0x132>
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <runNoMagnetDetection>
    13d6:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <flowDetectedFlag>
    13da:	6c 2f       	mov	r22, r28
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <noMagnetRowMask>
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <getMaxSensorDataIndex+0x142>
    13e6:	35 95       	asr	r19
    13e8:	27 95       	ror	r18
    13ea:	ca 95       	dec	r28
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <getMaxSensorDataIndex+0x13e>
    13ee:	21 70       	andi	r18, 0x01	; 1
    13f0:	33 27       	eor	r19, r19
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <getMaxSensorDataIndex+0x15e>
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	06 2e       	mov	r0, r22
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <getMaxSensorDataIndex+0x156>
    13fa:	35 95       	asr	r19
    13fc:	27 95       	ror	r18
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <getMaxSensorDataIndex+0x152>
    1402:	21 70       	andi	r18, 0x01	; 1
    1404:	33 27       	eor	r19, r19
    1406:	fb 01       	movw	r30, r22
    1408:	e7 53       	subi	r30, 0x37	; 55
    140a:	f8 4f       	sbci	r31, 0xF8	; 248
    140c:	10 82       	st	Z, r1
    140e:	23 2b       	or	r18, r19
    1410:	09 f0       	breq	.+2      	; 0x1414 <getMaxSensorDataIndex+0x16c>
    1412:	b0 cf       	rjmp	.-160    	; 0x1374 <getMaxSensorDataIndex+0xcc>
    1414:	cf 91       	pop	r28
    1416:	08 95       	ret
    1418:	fb 01       	movw	r30, r22
    141a:	e8 56       	subi	r30, 0x68	; 104
    141c:	fb 4f       	sbci	r31, 0xFB	; 251
    141e:	80 81       	ld	r24, Z
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret
    1424:	fb 01       	movw	r30, r22
    1426:	e7 53       	subi	r30, 0x37	; 55
    1428:	f8 4f       	sbci	r31, 0xF8	; 248
    142a:	10 82       	st	Z, r1
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret
    1430:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <noMagPeristence.2491>
    1434:	89 cf       	rjmp	.-238    	; 0x1348 <getMaxSensorDataIndex+0xa0>
    1436:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <noMagPeristence.2491>
    143a:	9f 5f       	subi	r25, 0xFF	; 255
    143c:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <noMagPeristence.2491>
    1440:	c5 cf       	rjmp	.-118    	; 0x13cc <getMaxSensorDataIndex+0x124>
    1442:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <noMagPersistenceRow.2492>
    1446:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <noMagPeristence.2491>
    144a:	9f 5f       	subi	r25, 0xFF	; 255
    144c:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <noMagPeristence.2491>
    1450:	bd cf       	rjmp	.-134    	; 0x13cc <getMaxSensorDataIndex+0x124>

00001452 <processBlockageData>:
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	0e 94 54 09 	call	0x12a8	; 0x12a8 <getMaxSensorDataIndex>
    1458:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <rowLevel>
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <getMaxSensorDataIndex>
    1462:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <rowLevel+0x1>
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	0e 94 54 09 	call	0x12a8	; 0x12a8 <getMaxSensorDataIndex>
    146c:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <rowLevel+0x2>
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	0e 94 54 09 	call	0x12a8	; 0x12a8 <getMaxSensorDataIndex>
    1476:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <rowLevel+0x3>
    147a:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <enableDebugSensorData>
    147e:	88 23       	and	r24, r24
    1480:	11 f1       	breq	.+68     	; 0x14c6 <processBlockageData+0x74>
    1482:	0e 94 82 04 	call	0x904	; 0x904 <getAveragedADCDataPtr>
    1486:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <sendCANRawADC>
    148a:	0e 94 82 04 	call	0x904	; 0x904 <getAveragedADCDataPtr>
    148e:	08 96       	adiw	r24, 0x08	; 8
    1490:	0e 94 42 0b 	call	0x1684	; 0x1684 <sendCANRawADC2>
    1494:	0e 94 82 04 	call	0x904	; 0x904 <getAveragedADCDataPtr>
    1498:	40 96       	adiw	r24, 0x10	; 16
    149a:	0e 94 8d 0b 	call	0x171a	; 0x171a <sendCANRawADC3>
    149e:	0e 94 82 04 	call	0x904	; 0x904 <getAveragedADCDataPtr>
    14a2:	48 96       	adiw	r24, 0x18	; 24
    14a4:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <sendCANRawADC4>
    14a8:	0e 94 82 04 	call	0x904	; 0x904 <getAveragedADCDataPtr>
    14ac:	80 96       	adiw	r24, 0x20	; 32
    14ae:	0e 94 23 0c 	call	0x1846	; 0x1846 <sendCANRawADC5>
    14b2:	0e 94 82 04 	call	0x904	; 0x904 <getAveragedADCDataPtr>
    14b6:	88 96       	adiw	r24, 0x28	; 40
    14b8:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <sendCANRawADC6>
    14bc:	0e 94 82 04 	call	0x904	; 0x904 <getAveragedADCDataPtr>
    14c0:	c0 96       	adiw	r24, 0x30	; 48
    14c2:	0e 94 b9 0c 	call	0x1972	; 0x1972 <sendCANRawADC7>
    14c6:	88 e9       	ldi	r24, 0x98	; 152
    14c8:	94 e0       	ldi	r25, 0x04	; 4
    14ca:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <sendASIPSensorDataMsg>

000014ce <getSensorOORFlag>:
    14ce:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <sensorOORFlag>
    14d2:	08 95       	ret

000014d4 <getNoMagnetRowMask>:
    14d4:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <noMagnetRowMask>
    14d8:	08 95       	ret

000014da <getFlowDetectedFlag>:
// Returns the flag indicating whether liquid flow 
//  has been detected since power-up
BYTE getFlowDetectedFlag(void)
{
    return flowDetectedFlag;
}
    14da:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <flowDetectedFlag>
    14de:	08 95       	ret

000014e0 <setSensorDataDisableFlag>:

void setSensorDataDisableFlag(void)
{
    14e0:	08 95       	ret

000014e2 <clearSensorDataDisableFlag>:
    sensorDataDisableFlag = 1;
}

void clearSensorDataDisableFlag(void)
{
    14e2:	08 95       	ret

000014e4 <setEnableDebugFlag>:
    sensorDataDisableFlag = 0;
}

void setEnableDebugFlag(void)
{
    enableDebugSensorData = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <enableDebugSensorData>
    14ea:	08 95       	ret

000014ec <clearEnableDebugFlag>:
}

void clearEnableDebugFlag(void)
{
    enableDebugSensorData = 0;
    14ec:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <enableDebugSensorData>
    14f0:	08 95       	ret

000014f2 <initCAN>:
}

BYTE * getActiveBlockageStartTimes(void)
{
    return activeBlockageStartTimes;
}
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    14f8:	8d e7       	ldi	r24, 0x7D	; 125
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 4a 13 	call	0x2694	; 0x2694 <can_init>
    1500:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
    1504:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f00e5>
    1508:	84 e2       	ldi	r24, 0x24	; 36
    150a:	96 e0       	ldi	r25, 0x06	; 6
    150c:	90 93 3f 06 	sts	0x063F, r25	; 0x80063f <scPeriodicCANTx+0x8>
    1510:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <scPeriodicCANTx+0x7>
    1514:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <scPeriodicCANTx+0x9>
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <scPeriodicCANTx+0x1>
    151e:	96 e0       	ldi	r25, 0x06	; 6
    1520:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <scPeriodicCANTx+0x6>
    1524:	2c e1       	ldi	r18, 0x1C	; 28
    1526:	36 e0       	ldi	r19, 0x06	; 6
    1528:	30 93 34 06 	sts	0x0634, r19	; 0x800634 <scRandomCANTx+0x8>
    152c:	20 93 33 06 	sts	0x0633, r18	; 0x800633 <scRandomCANTx+0x7>
    1530:	10 92 35 06 	sts	0x0635, r1	; 0x800635 <scRandomCANTx+0x9>
    1534:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <scRandomCANTx+0x1>
    1538:	88 e0       	ldi	r24, 0x08	; 8
    153a:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    153e:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <getSerialNumPtr>
    1542:	04 96       	adiw	r24, 0x04	; 4
    1544:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <serialNumPtr+0x1>
    1548:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <serialNumPtr>
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	98 2f       	mov	r25, r24
    1550:	92 95       	swap	r25
    1552:	90 7f       	andi	r25, 0xF0	; 240
    1554:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    1558:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    155c:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1560:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    1564:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1568:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    156c:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    1570:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    1574:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    1578:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    157c:	98 60       	ori	r25, 0x08	; 8
    157e:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1582:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1586:	90 68       	ori	r25, 0x80	; 128
    1588:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	86 30       	cpi	r24, 0x06	; 6
    1590:	f1 f6       	brne	.-68     	; 0x154e <initCAN+0x5c>
    1592:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    1596:	8c 63       	ori	r24, 0x3C	; 60
    1598:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    159c:	80 ea       	ldi	r24, 0xA0	; 160
    159e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
    15a2:	10 92 0a 06 	sts	0x060A, r1	; 0x80060a <activeBlockageFlag>
    15a6:	8f e0       	ldi	r24, 0x0F	; 15
    15a8:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <activeBlockageRows>
    15ac:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <CANDataRequestFlags>
    15b0:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <CANTrafficDetected>
    15b4:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <blockageDataBufferHead>
    15b8:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <blockageDataBufferTail>
    15bc:	0e 94 de 07 	call	0xfbc	; 0xfbc <getFwDataPtr>
    15c0:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <calStatusBufferPtr+0x1>
    15c4:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <calStatusBufferPtr>
    15c8:	08 95       	ret

000015ca <fillBlockageDataBuffer>:
    15ca:	66 23       	and	r22, r22
    15cc:	79 f0       	breq	.+30     	; 0x15ec <fillBlockageDataBuffer+0x22>
    15ce:	20 91 ff 04 	lds	r18, 0x04FF	; 0x8004ff <blockageDataBufferTail>
    15d2:	dc 01       	movw	r26, r24
    15d4:	62 0f       	add	r22, r18
    15d6:	8d 91       	ld	r24, X+
    15d8:	e2 2f       	mov	r30, r18
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	ef 5f       	subi	r30, 0xFF	; 255
    15de:	fa 4f       	sbci	r31, 0xFA	; 250
    15e0:	80 83       	st	Z, r24
    15e2:	2f 5f       	subi	r18, 0xFF	; 255
    15e4:	26 13       	cpse	r18, r22
    15e6:	f7 cf       	rjmp	.-18     	; 0x15d6 <fillBlockageDataBuffer+0xc>
    15e8:	20 93 ff 04 	sts	0x04FF, r18	; 0x8004ff <blockageDataBufferTail>
    15ec:	08 95       	ret

000015ee <sendCANRawADC>:
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	ec 01       	movw	r28, r24
    15f4:	88 ee       	ldi	r24, 0xE8	; 232
    15f6:	93 e0       	ldi	r25, 0x03	; 3
    15f8:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    15fc:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1600:	0b c0       	rjmp	.+22     	; 0x1618 <sendCANRawADC+0x2a>
    1602:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1606:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	c1 f1       	breq	.+112    	; 0x167e <sendCANRawADC+0x90>
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1614:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1618:	87 e3       	ldi	r24, 0x37	; 55
    161a:	96 e0       	ldi	r25, 0x06	; 6
    161c:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	79 f3       	breq	.-34     	; 0x1602 <sendCANRawADC+0x14>
    1624:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1628:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    162c:	89 2b       	or	r24, r25
    162e:	39 f1       	breq	.+78     	; 0x167e <sendCANRawADC+0x90>
    1630:	88 81       	ld	r24, Y
    1632:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    1654:	8e 81       	ldd	r24, Y+6	; 0x06
    1656:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    165a:	8f 81       	ldd	r24, Y+7	; 0x07
    165c:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    1660:	88 e0       	ldi	r24, 0x08	; 8
    1662:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    1666:	8a e5       	ldi	r24, 0x5A	; 90
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    166e:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    1672:	87 e3       	ldi	r24, 0x37	; 55
    1674:	96 e0       	ldi	r25, 0x06	; 6
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <can_cmd>
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <sendCANRawADC2>:
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	ec 01       	movw	r28, r24
    168a:	88 ee       	ldi	r24, 0xE8	; 232
    168c:	93 e0       	ldi	r25, 0x03	; 3
    168e:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1692:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1696:	0b c0       	rjmp	.+22     	; 0x16ae <sendCANRawADC2+0x2a>
    1698:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    169c:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	c1 f1       	breq	.+112    	; 0x1714 <sendCANRawADC2+0x90>
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    16aa:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    16ae:	87 e3       	ldi	r24, 0x37	; 55
    16b0:	96 e0       	ldi	r25, 0x06	; 6
    16b2:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	79 f3       	breq	.-34     	; 0x1698 <sendCANRawADC2+0x14>
    16ba:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    16be:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    16c2:	89 2b       	or	r24, r25
    16c4:	39 f1       	breq	.+78     	; 0x1714 <sendCANRawADC2+0x90>
    16c6:	88 81       	ld	r24, Y
    16c8:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    16ea:	8e 81       	ldd	r24, Y+6	; 0x06
    16ec:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    16f0:	8f 81       	ldd	r24, Y+7	; 0x07
    16f2:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    16f6:	88 e0       	ldi	r24, 0x08	; 8
    16f8:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    16fc:	8b e5       	ldi	r24, 0x5B	; 91
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    1704:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    1708:	87 e3       	ldi	r24, 0x37	; 55
    170a:	96 e0       	ldi	r25, 0x06	; 6
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <can_cmd>
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <sendCANRawADC3>:
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	ec 01       	movw	r28, r24
    1720:	88 ee       	ldi	r24, 0xE8	; 232
    1722:	93 e0       	ldi	r25, 0x03	; 3
    1724:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1728:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    172c:	0b c0       	rjmp	.+22     	; 0x1744 <sendCANRawADC3+0x2a>
    172e:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1732:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	c1 f1       	breq	.+112    	; 0x17aa <sendCANRawADC3+0x90>
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1740:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1744:	87 e3       	ldi	r24, 0x37	; 55
    1746:	96 e0       	ldi	r25, 0x06	; 6
    1748:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	79 f3       	breq	.-34     	; 0x172e <sendCANRawADC3+0x14>
    1750:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1754:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1758:	89 2b       	or	r24, r25
    175a:	39 f1       	breq	.+78     	; 0x17aa <sendCANRawADC3+0x90>
    175c:	88 81       	ld	r24, Y
    175e:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    1780:	8e 81       	ldd	r24, Y+6	; 0x06
    1782:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    1786:	8f 81       	ldd	r24, Y+7	; 0x07
    1788:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    178c:	88 e0       	ldi	r24, 0x08	; 8
    178e:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    1792:	8c e5       	ldi	r24, 0x5C	; 92
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    179a:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    179e:	87 e3       	ldi	r24, 0x37	; 55
    17a0:	96 e0       	ldi	r25, 0x06	; 6
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <can_cmd>
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	08 95       	ret

000017b0 <sendCANRawADC4>:
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	ec 01       	movw	r28, r24
    17b6:	88 ee       	ldi	r24, 0xE8	; 232
    17b8:	93 e0       	ldi	r25, 0x03	; 3
    17ba:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    17be:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    17c2:	0b c0       	rjmp	.+22     	; 0x17da <sendCANRawADC4+0x2a>
    17c4:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    17c8:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	c1 f1       	breq	.+112    	; 0x1840 <sendCANRawADC4+0x90>
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    17d6:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    17da:	87 e3       	ldi	r24, 0x37	; 55
    17dc:	96 e0       	ldi	r25, 0x06	; 6
    17de:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	79 f3       	breq	.-34     	; 0x17c4 <sendCANRawADC4+0x14>
    17e6:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    17ea:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    17ee:	89 2b       	or	r24, r25
    17f0:	39 f1       	breq	.+78     	; 0x1840 <sendCANRawADC4+0x90>
    17f2:	88 81       	ld	r24, Y
    17f4:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    1816:	8e 81       	ldd	r24, Y+6	; 0x06
    1818:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    181c:	8f 81       	ldd	r24, Y+7	; 0x07
    181e:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    1822:	88 e0       	ldi	r24, 0x08	; 8
    1824:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    1828:	8d e5       	ldi	r24, 0x5D	; 93
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    1830:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    1834:	87 e3       	ldi	r24, 0x37	; 55
    1836:	96 e0       	ldi	r25, 0x06	; 6
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <can_cmd>
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <sendCANRawADC5>:
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	ec 01       	movw	r28, r24
    184c:	88 ee       	ldi	r24, 0xE8	; 232
    184e:	93 e0       	ldi	r25, 0x03	; 3
    1850:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1854:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1858:	0b c0       	rjmp	.+22     	; 0x1870 <sendCANRawADC5+0x2a>
    185a:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    185e:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	c1 f1       	breq	.+112    	; 0x18d6 <sendCANRawADC5+0x90>
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    186c:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1870:	87 e3       	ldi	r24, 0x37	; 55
    1872:	96 e0       	ldi	r25, 0x06	; 6
    1874:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	79 f3       	breq	.-34     	; 0x185a <sendCANRawADC5+0x14>
    187c:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1880:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1884:	89 2b       	or	r24, r25
    1886:	39 f1       	breq	.+78     	; 0x18d6 <sendCANRawADC5+0x90>
    1888:	88 81       	ld	r24, Y
    188a:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    18ac:	8e 81       	ldd	r24, Y+6	; 0x06
    18ae:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    18b2:	8f 81       	ldd	r24, Y+7	; 0x07
    18b4:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    18b8:	88 e0       	ldi	r24, 0x08	; 8
    18ba:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    18be:	8e e5       	ldi	r24, 0x5E	; 94
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    18c6:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    18ca:	87 e3       	ldi	r24, 0x37	; 55
    18cc:	96 e0       	ldi	r25, 0x06	; 6
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <can_cmd>
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <sendCANRawADC6>:
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	ec 01       	movw	r28, r24
    18e2:	88 ee       	ldi	r24, 0xE8	; 232
    18e4:	93 e0       	ldi	r25, 0x03	; 3
    18e6:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    18ea:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    18ee:	0b c0       	rjmp	.+22     	; 0x1906 <sendCANRawADC6+0x2a>
    18f0:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    18f4:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	c1 f1       	breq	.+112    	; 0x196c <sendCANRawADC6+0x90>
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1902:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1906:	87 e3       	ldi	r24, 0x37	; 55
    1908:	96 e0       	ldi	r25, 0x06	; 6
    190a:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	79 f3       	breq	.-34     	; 0x18f0 <sendCANRawADC6+0x14>
    1912:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1916:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    191a:	89 2b       	or	r24, r25
    191c:	39 f1       	breq	.+78     	; 0x196c <sendCANRawADC6+0x90>
    191e:	88 81       	ld	r24, Y
    1920:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    1936:	8c 81       	ldd	r24, Y+4	; 0x04
    1938:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    1942:	8e 81       	ldd	r24, Y+6	; 0x06
    1944:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    1948:	8f 81       	ldd	r24, Y+7	; 0x07
    194a:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    194e:	88 e0       	ldi	r24, 0x08	; 8
    1950:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    1954:	8f e5       	ldi	r24, 0x5F	; 95
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    195c:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    1960:	87 e3       	ldi	r24, 0x37	; 55
    1962:	96 e0       	ldi	r25, 0x06	; 6
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <can_cmd>
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <sendCANRawADC7>:
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	ec 01       	movw	r28, r24
    1978:	88 ee       	ldi	r24, 0xE8	; 232
    197a:	93 e0       	ldi	r25, 0x03	; 3
    197c:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1980:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1984:	0b c0       	rjmp	.+22     	; 0x199c <sendCANRawADC7+0x2a>
    1986:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    198a:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	c1 f1       	breq	.+112    	; 0x1a02 <sendCANRawADC7+0x90>
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1998:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    199c:	87 e3       	ldi	r24, 0x37	; 55
    199e:	96 e0       	ldi	r25, 0x06	; 6
    19a0:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	79 f3       	breq	.-34     	; 0x1986 <sendCANRawADC7+0x14>
    19a8:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    19ac:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    19b0:	89 2b       	or	r24, r25
    19b2:	39 f1       	breq	.+78     	; 0x1a02 <sendCANRawADC7+0x90>
    19b4:	88 81       	ld	r24, Y
    19b6:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
    19ce:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    19d8:	8e 81       	ldd	r24, Y+6	; 0x06
    19da:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    19de:	8f 81       	ldd	r24, Y+7	; 0x07
    19e0:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    19e4:	88 e0       	ldi	r24, 0x08	; 8
    19e6:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    19ea:	80 e6       	ldi	r24, 0x60	; 96
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    19f2:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    19f6:	87 e3       	ldi	r24, 0x37	; 55
    19f8:	96 e0       	ldi	r25, 0x06	; 6
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <can_cmd>
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <sendCalStatusMsg>:
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	18 2f       	mov	r17, r24
    1a10:	d6 2f       	mov	r29, r22
    1a12:	c4 2f       	mov	r28, r20
    1a14:	8c e2       	ldi	r24, 0x2C	; 44
    1a16:	96 e0       	ldi	r25, 0x06	; 6
    1a18:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	d1 f3       	breq	.-12     	; 0x1a14 <sendCalStatusMsg+0xc>
    1a20:	10 93 1c 06 	sts	0x061C, r17	; 0x80061c <txCANMsgNonBlockageBuff>
    1a24:	d0 93 1d 06 	sts	0x061D, r29	; 0x80061d <txCANMsgNonBlockageBuff+0x1>
    1a28:	c0 93 1e 06 	sts	0x061E, r28	; 0x80061e <txCANMsgNonBlockageBuff+0x2>
    1a2c:	e0 91 01 06 	lds	r30, 0x0601	; 0x800601 <serialNumPtr>
    1a30:	f0 91 02 06 	lds	r31, 0x0602	; 0x800602 <serialNumPtr+0x1>
    1a34:	80 81       	ld	r24, Z
    1a36:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <txCANMsgNonBlockageBuff+0x3>
    1a3a:	81 81       	ldd	r24, Z+1	; 0x01
    1a3c:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <txCANMsgNonBlockageBuff+0x4>
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <txCANMsgNonBlockageBuff+0x5>
    1a46:	83 81       	ldd	r24, Z+3	; 0x03
    1a48:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <txCANMsgNonBlockageBuff+0x6>
    1a4c:	87 e0       	ldi	r24, 0x07	; 7
    1a4e:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1a52:	8a e2       	ldi	r24, 0x2A	; 42
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1a5a:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1a5e:	8c e2       	ldi	r24, 0x2C	; 44
    1a60:	96 e0       	ldi	r25, 0x06	; 6
    1a62:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1a66:	81 11       	cpse	r24, r1
    1a68:	fa cf       	rjmp	.-12     	; 0x1a5e <sendCalStatusMsg+0x56>
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	08 95       	ret

00001a72 <sendPingAllSensors>:
    1a72:	8c e2       	ldi	r24, 0x2C	; 44
    1a74:	96 e0       	ldi	r25, 0x06	; 6
    1a76:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	d1 f3       	breq	.-12     	; 0x1a72 <sendPingAllSensors>
    1a7e:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <scRandomCANTx+0x6>
    1a82:	8b e2       	ldi	r24, 0x2B	; 43
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1a8a:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1a8e:	8c e2       	ldi	r24, 0x2C	; 44
    1a90:	96 e0       	ldi	r25, 0x06	; 6
    1a92:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1a96:	81 11       	cpse	r24, r1
    1a98:	fa cf       	rjmp	.-12     	; 0x1a8e <sendPingAllSensors+0x1c>
    1a9a:	08 95       	ret

00001a9c <sendStartCalCommand>:
    1a9c:	8c e2       	ldi	r24, 0x2C	; 44
    1a9e:	96 e0       	ldi	r25, 0x06	; 6
    1aa0:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	d1 f3       	breq	.-12     	; 0x1a9c <sendStartCalCommand>
    1aa8:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <scRandomCANTx+0x6>
    1aac:	89 e2       	ldi	r24, 0x29	; 41
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1ab4:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1ab8:	8c e2       	ldi	r24, 0x2C	; 44
    1aba:	96 e0       	ldi	r25, 0x06	; 6
    1abc:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1ac0:	81 11       	cpse	r24, r1
    1ac2:	fa cf       	rjmp	.-12     	; 0x1ab8 <sendStartCalCommand+0x1c>
    1ac4:	08 95       	ret

00001ac6 <sendCANStartFwUpdateMsg>:
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	ec 01       	movw	r28, r24
    1acc:	8c e2       	ldi	r24, 0x2C	; 44
    1ace:	96 e0       	ldi	r25, 0x06	; 6
    1ad0:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	d1 f3       	breq	.-12     	; 0x1acc <sendCANStartFwUpdateMsg+0x6>
    1ad8:	88 81       	ld	r24, Y
    1ada:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <txCANMsgNonBlockageBuff>
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <txCANMsgNonBlockageBuff+0x1>
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <txCANMsgNonBlockageBuff+0x2>
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <txCANMsgNonBlockageBuff+0x3>
    1af0:	84 e0       	ldi	r24, 0x04	; 4
    1af2:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1af6:	8e e1       	ldi	r24, 0x1E	; 30
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1afe:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1b02:	8c e2       	ldi	r24, 0x2C	; 44
    1b04:	96 e0       	ldi	r25, 0x06	; 6
    1b06:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	fa cf       	rjmp	.-12     	; 0x1b02 <sendCANStartFwUpdateMsg+0x3c>
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	08 95       	ret

00001b14 <sendCANGetDeviceInfoBySerial>:
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	ec 01       	movw	r28, r24
    1b1a:	8c e2       	ldi	r24, 0x2C	; 44
    1b1c:	96 e0       	ldi	r25, 0x06	; 6
    1b1e:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	d1 f3       	breq	.-12     	; 0x1b1a <sendCANGetDeviceInfoBySerial+0x6>
    1b26:	88 81       	ld	r24, Y
    1b28:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <txCANMsgNonBlockageBuff>
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <txCANMsgNonBlockageBuff+0x1>
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <txCANMsgNonBlockageBuff+0x2>
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <txCANMsgNonBlockageBuff+0x3>
    1b3e:	84 e0       	ldi	r24, 0x04	; 4
    1b40:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1b44:	8d e2       	ldi	r24, 0x2D	; 45
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1b4c:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1b50:	8c e2       	ldi	r24, 0x2C	; 44
    1b52:	96 e0       	ldi	r25, 0x06	; 6
    1b54:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1b58:	81 11       	cpse	r24, r1
    1b5a:	fa cf       	rjmp	.-12     	; 0x1b50 <sendCANGetDeviceInfoBySerial+0x3c>
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	08 95       	ret

00001b62 <sendCANBitResultsMsg>:
    1b62:	cf 93       	push	r28
    1b64:	c8 2f       	mov	r28, r24
    1b66:	88 ee       	ldi	r24, 0xE8	; 232
    1b68:	93 e0       	ldi	r25, 0x03	; 3
    1b6a:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1b6e:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1b72:	0b c0       	rjmp	.+22     	; 0x1b8a <sendCANBitResultsMsg+0x28>
    1b74:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1b78:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	81 f1       	breq	.+96     	; 0x1be0 <sendCANBitResultsMsg+0x7e>
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1b86:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1b8a:	87 e3       	ldi	r24, 0x37	; 55
    1b8c:	96 e0       	ldi	r25, 0x06	; 6
    1b8e:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	79 f3       	breq	.-34     	; 0x1b74 <sendCANBitResultsMsg+0x12>
    1b96:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1b9a:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1b9e:	89 2b       	or	r24, r25
    1ba0:	f9 f0       	breq	.+62     	; 0x1be0 <sendCANBitResultsMsg+0x7e>
    1ba2:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <canRetryFailCount>
    1ba6:	c0 93 1c 06 	sts	0x061C, r28	; 0x80061c <txCANMsgNonBlockageBuff>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1bb0:	87 e1       	ldi	r24, 0x17	; 23
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1bb8:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1bbc:	87 e3       	ldi	r24, 0x37	; 55
    1bbe:	96 e0       	ldi	r25, 0x06	; 6
    1bc0:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1bc4:	88 23       	and	r24, r24
    1bc6:	99 f0       	breq	.+38     	; 0x1bee <sendCANBitResultsMsg+0x8c>
    1bc8:	8c e0       	ldi	r24, 0x0C	; 12
    1bca:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <scPeriodicCANTx+0x1>
    1bce:	87 e3       	ldi	r24, 0x37	; 55
    1bd0:	96 e0       	ldi	r25, 0x06	; 6
    1bd2:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1bd6:	82 e0       	ldi	r24, 0x02	; 2
    1bd8:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <scPeriodicCANTx+0x1>
    1bdc:	cf 91       	pop	r28
    1bde:	08 95       	ret
    1be0:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <canRetryFailCount>
    1be4:	8f 5f       	subi	r24, 0xFF	; 255
    1be6:	83 33       	cpi	r24, 0x33	; 51
    1be8:	20 f4       	brcc	.+8      	; 0x1bf2 <sendCANBitResultsMsg+0x90>
    1bea:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <canRetryFailCount>
    1bee:	cf 91       	pop	r28
    1bf0:	08 95       	ret
    1bf2:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <canRetryFailCount>
    1bf6:	cf 91       	pop	r28
    1bf8:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <initCAN>

00001bfc <sendDeviceInfoData>:
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	ec 01       	movw	r28, r24
    1c02:	8c e2       	ldi	r24, 0x2C	; 44
    1c04:	96 e0       	ldi	r25, 0x06	; 6
    1c06:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	d1 f3       	breq	.-12     	; 0x1c02 <sendDeviceInfoData+0x6>
    1c0e:	88 81       	ld	r24, Y
    1c10:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <txCANMsgNonBlockageBuff>
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <txCANMsgNonBlockageBuff+0x1>
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <txCANMsgNonBlockageBuff+0x2>
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <txCANMsgNonBlockageBuff+0x3>
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <txCANMsgNonBlockageBuff+0x4>
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <txCANMsgNonBlockageBuff+0x5>
    1c32:	8e 81       	ldd	r24, Y+6	; 0x06
    1c34:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <txCANMsgNonBlockageBuff+0x6>
    1c38:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3a:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <txCANMsgNonBlockageBuff+0x7>
    1c3e:	88 e0       	ldi	r24, 0x08	; 8
    1c40:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1c44:	81 e2       	ldi	r24, 0x21	; 33
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1c4c:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1c50:	8c e2       	ldi	r24, 0x2C	; 44
    1c52:	96 e0       	ldi	r25, 0x06	; 6
    1c54:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1c58:	81 11       	cpse	r24, r1
    1c5a:	fa cf       	rjmp	.-12     	; 0x1c50 <sendDeviceInfoData+0x54>
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	08 95       	ret

00001c62 <sendCANFwUpdateDataPacket>:
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	ec 01       	movw	r28, r24
    1c68:	8c e2       	ldi	r24, 0x2C	; 44
    1c6a:	96 e0       	ldi	r25, 0x06	; 6
    1c6c:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	d1 f3       	breq	.-12     	; 0x1c68 <sendCANFwUpdateDataPacket+0x6>
    1c74:	88 81       	ld	r24, Y
    1c76:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <txCANMsgNonBlockageBuff>
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <txCANMsgNonBlockageBuff+0x1>
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <txCANMsgNonBlockageBuff+0x2>
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <txCANMsgNonBlockageBuff+0x3>
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <txCANMsgNonBlockageBuff+0x4>
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <txCANMsgNonBlockageBuff+0x5>
    1c98:	8e 81       	ldd	r24, Y+6	; 0x06
    1c9a:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <txCANMsgNonBlockageBuff+0x6>
    1c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca0:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <txCANMsgNonBlockageBuff+0x7>
    1ca4:	88 e0       	ldi	r24, 0x08	; 8
    1ca6:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1caa:	8c e0       	ldi	r24, 0x0C	; 12
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1cb2:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1cb6:	8c e2       	ldi	r24, 0x2C	; 44
    1cb8:	96 e0       	ldi	r25, 0x06	; 6
    1cba:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	fa cf       	rjmp	.-12     	; 0x1cb6 <sendCANFwUpdateDataPacket+0x54>
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	08 95       	ret

00001cc8 <sendCANFwUpdateShortDataPacket>:
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	18 2f       	mov	r17, r24
    1cd0:	d9 2f       	mov	r29, r25
    1cd2:	c6 2f       	mov	r28, r22
    1cd4:	8c e2       	ldi	r24, 0x2C	; 44
    1cd6:	96 e0       	ldi	r25, 0x06	; 6
    1cd8:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	d1 f3       	breq	.-12     	; 0x1cd4 <sendCANFwUpdateShortDataPacket+0xc>
    1ce0:	cc 23       	and	r28, r28
    1ce2:	81 f0       	breq	.+32     	; 0x1d04 <sendCANFwUpdateShortDataPacket+0x3c>
    1ce4:	e1 2f       	mov	r30, r17
    1ce6:	fd 2f       	mov	r31, r29
    1ce8:	ac e1       	ldi	r26, 0x1C	; 28
    1cea:	b6 e0       	ldi	r27, 0x06	; 6
    1cec:	2f ef       	ldi	r18, 0xFF	; 255
    1cee:	2c 0f       	add	r18, r28
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	2f 5f       	subi	r18, 0xFF	; 255
    1cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf6:	2e 0f       	add	r18, r30
    1cf8:	3f 1f       	adc	r19, r31
    1cfa:	81 91       	ld	r24, Z+
    1cfc:	8d 93       	st	X+, r24
    1cfe:	e2 17       	cp	r30, r18
    1d00:	f3 07       	cpc	r31, r19
    1d02:	d9 f7       	brne	.-10     	; 0x1cfa <sendCANFwUpdateShortDataPacket+0x32>
    1d04:	c0 93 32 06 	sts	0x0632, r28	; 0x800632 <scRandomCANTx+0x6>
    1d08:	8c e0       	ldi	r24, 0x0C	; 12
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1d10:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1d14:	8c e2       	ldi	r24, 0x2C	; 44
    1d16:	96 e0       	ldi	r25, 0x06	; 6
    1d18:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1d1c:	81 11       	cpse	r24, r1
    1d1e:	fa cf       	rjmp	.-12     	; 0x1d14 <sendCANFwUpdateShortDataPacket+0x4c>
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	08 95       	ret

00001d28 <sendCANSensorDataDisableMsg>:
    1d28:	8c e2       	ldi	r24, 0x2C	; 44
    1d2a:	96 e0       	ldi	r25, 0x06	; 6
    1d2c:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	d1 f3       	breq	.-12     	; 0x1d28 <sendCANSensorDataDisableMsg>
    1d34:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <scRandomCANTx+0x6>
    1d38:	86 e2       	ldi	r24, 0x26	; 38
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1d40:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1d44:	8c e2       	ldi	r24, 0x2C	; 44
    1d46:	96 e0       	ldi	r25, 0x06	; 6
    1d48:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	fa cf       	rjmp	.-12     	; 0x1d44 <sendCANSensorDataDisableMsg+0x1c>
    1d50:	08 95       	ret

00001d52 <sendCANSensorDataEnableMsg>:
    1d52:	8c e2       	ldi	r24, 0x2C	; 44
    1d54:	96 e0       	ldi	r25, 0x06	; 6
    1d56:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	d1 f3       	breq	.-12     	; 0x1d52 <sendCANSensorDataEnableMsg>
    1d5e:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <scRandomCANTx+0x6>
    1d62:	87 e2       	ldi	r24, 0x27	; 39
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1d6a:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1d6e:	8c e2       	ldi	r24, 0x2C	; 44
    1d70:	96 e0       	ldi	r25, 0x06	; 6
    1d72:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1d76:	81 11       	cpse	r24, r1
    1d78:	fa cf       	rjmp	.-12     	; 0x1d6e <sendCANSensorDataEnableMsg+0x1c>
    1d7a:	08 95       	ret

00001d7c <sendCANFwUpdateComplete>:
    1d7c:	8c e2       	ldi	r24, 0x2C	; 44
    1d7e:	96 e0       	ldi	r25, 0x06	; 6
    1d80:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	d1 f3       	breq	.-12     	; 0x1d7c <sendCANFwUpdateComplete>
    1d88:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <scRandomCANTx+0x6>
    1d8c:	88 e2       	ldi	r24, 0x28	; 40
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1d94:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1d98:	8c e2       	ldi	r24, 0x2C	; 44
    1d9a:	96 e0       	ldi	r25, 0x06	; 6
    1d9c:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1da0:	81 11       	cpse	r24, r1
    1da2:	fa cf       	rjmp	.-12     	; 0x1d98 <sendCANFwUpdateComplete+0x1c>
    1da4:	08 95       	ret

00001da6 <getActiveBlockageFlag>:
    1da6:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <activeBlockageFlag>
    1daa:	08 95       	ret

00001dac <clearActiveBlockageFlag>:
    1dac:	10 92 0a 06 	sts	0x060A, r1	; 0x80060a <activeBlockageFlag>
    1db0:	08 95       	ret

00001db2 <getActiveBlockageRows>:
    1db2:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <activeBlockageRows>
    1db6:	08 95       	ret

00001db8 <getCANDataRequestFlags>:

BYTE getCANDataRequestFlags(void)
{
    return CANDataRequestFlags;
}
    1db8:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <CANDataRequestFlags>
    1dbc:	08 95       	ret

00001dbe <setCANDataRequestFlags>:

void setCANDataRequestFlags(BYTE val)
{
    CANDataRequestFlags = val;
    1dbe:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <CANDataRequestFlags>
    1dc2:	08 95       	ret

00001dc4 <compareSerialNums>:
}


BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	db 01       	movw	r26, r22
    1dc8:	9c 01       	movw	r18, r24
    1dca:	2c 5f       	subi	r18, 0xFC	; 252
    1dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    1dce:	91 91       	ld	r25, Z+
    1dd0:	8d 91       	ld	r24, X+
    1dd2:	98 13       	cpse	r25, r24
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <compareSerialNums+0x1c>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    1dd6:	e2 17       	cp	r30, r18
    1dd8:	f3 07       	cpc	r31, r19
    1dda:	c9 f7       	brne	.-14     	; 0x1dce <compareSerialNums+0xa>
    {
        if((*(num1 + i)) == (*(num2 + i)))
        {
            result = 1;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	08 95       	ret
        }
        else
        {
            result = 0;
    1de0:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }   
    return result;
}
    1de2:	08 95       	ret

00001de4 <storeActiveBlockageData>:
void storeActiveBlockageData(BYTE blockageMask)
{
    BYTE timerVal = 0;
    static BYTE blockageStateChangeMask = 0;

    if(blockageMask)
    1de4:	88 23       	and	r24, r24
    1de6:	19 f0       	breq	.+6      	; 0x1dee <storeActiveBlockageData+0xa>
    {
        activeBlockageFlag = 1;
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <activeBlockageFlag>
    }
    blockageStateChangeMask ^= blockageMask;
    1dee:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <blockageStateChangeMask.2758>
    1df2:	98 27       	eor	r25, r24
    1df4:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <blockageStateChangeMask.2758>
    activeBlockageRows = blockageMask; // Assume index 4 is the row bitmask
    1df8:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <activeBlockageRows>

    timerVal = get4HzTimer();
    1dfc:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <get4HzTimer>

    if((activeBlockageRows & 0x01) && (blockageStateChangeMask & 0x01))
    1e00:	90 91 09 06 	lds	r25, 0x0609	; 0x800609 <activeBlockageRows>
    1e04:	90 ff       	sbrs	r25, 0
    1e06:	04 c0       	rjmp	.+8      	; 0x1e10 <storeActiveBlockageData+0x2c>
    1e08:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <blockageStateChangeMask.2758>
    1e0c:	20 fd       	sbrc	r18, 0
    1e0e:	1a c0       	rjmp	.+52     	; 0x1e44 <storeActiveBlockageData+0x60>
    {
        activeBlockageStartTimes[0] = timerVal;
    }

    if((activeBlockageRows & 0x02) && (blockageStateChangeMask & 0x02))
    1e10:	91 ff       	sbrs	r25, 1
    1e12:	04 c0       	rjmp	.+8      	; 0x1e1c <storeActiveBlockageData+0x38>
    1e14:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <blockageStateChangeMask.2758>
    1e18:	21 fd       	sbrc	r18, 1
    1e1a:	11 c0       	rjmp	.+34     	; 0x1e3e <storeActiveBlockageData+0x5a>
    {
        activeBlockageStartTimes[1] = timerVal;
    }

    if((activeBlockageRows & 0x04) && (blockageStateChangeMask & 0x04))
    1e1c:	92 ff       	sbrs	r25, 2
    1e1e:	04 c0       	rjmp	.+8      	; 0x1e28 <storeActiveBlockageData+0x44>
    1e20:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <blockageStateChangeMask.2758>
    1e24:	22 fd       	sbrc	r18, 2
    1e26:	08 c0       	rjmp	.+16     	; 0x1e38 <storeActiveBlockageData+0x54>
    {
        activeBlockageStartTimes[2] = timerVal;
    }

    if((activeBlockageRows & 0x08) && (blockageStateChangeMask & 0x08))
    1e28:	93 ff       	sbrs	r25, 3
    1e2a:	05 c0       	rjmp	.+10     	; 0x1e36 <storeActiveBlockageData+0x52>
    1e2c:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <blockageStateChangeMask.2758>
    1e30:	93 fd       	sbrc	r25, 3
    {
        activeBlockageStartTimes[3] = timerVal;
    1e32:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <activeBlockageStartTimes+0x3>
    1e36:	08 95       	ret
        activeBlockageStartTimes[1] = timerVal;
    }

    if((activeBlockageRows & 0x04) && (blockageStateChangeMask & 0x04))
    {
        activeBlockageStartTimes[2] = timerVal;
    1e38:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <activeBlockageStartTimes+0x2>
    1e3c:	f5 cf       	rjmp	.-22     	; 0x1e28 <storeActiveBlockageData+0x44>
        activeBlockageStartTimes[0] = timerVal;
    }

    if((activeBlockageRows & 0x02) && (blockageStateChangeMask & 0x02))
    {
        activeBlockageStartTimes[1] = timerVal;
    1e3e:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <activeBlockageStartTimes+0x1>
    1e42:	ec cf       	rjmp	.-40     	; 0x1e1c <storeActiveBlockageData+0x38>

    timerVal = get4HzTimer();

    if((activeBlockageRows & 0x01) && (blockageStateChangeMask & 0x01))
    {
        activeBlockageStartTimes[0] = timerVal;
    1e44:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <activeBlockageStartTimes>
    1e48:	e3 cf       	rjmp	.-58     	; 0x1e10 <storeActiveBlockageData+0x2c>

00001e4a <retransmitBlockageData>:
}

void retransmitBlockageData(void)
{
    //cli();
    if(blockageDataBufferTail != blockageDataBufferHead)
    1e4a:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <blockageDataBufferHead>
    1e4e:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <blockageDataBufferTail>
    1e52:	8e 17       	cp	r24, r30
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <retransmitBlockageData+0xe>
    1e56:	3e c0       	rjmp	.+124    	; 0x1ed4 <retransmitBlockageData+0x8a>
    {
        if(compareSerialNums(&blockageDataBuffer[blockageDataBufferHead], serialNumPtr)) // SN matches this module
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	ef 5f       	subi	r30, 0xFF	; 255
    1e5c:	fa 4f       	sbci	r31, 0xFA	; 250
    1e5e:	a0 91 01 06 	lds	r26, 0x0601	; 0x800601 <serialNumPtr>
    1e62:	b0 91 02 06 	lds	r27, 0x0602	; 0x800602 <serialNumPtr+0x1>
    1e66:	9f 01       	movw	r18, r30
    1e68:	2c 5f       	subi	r18, 0xFC	; 252
    1e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    1e6c:	91 91       	ld	r25, Z+
    1e6e:	8d 91       	ld	r24, X+
    1e70:	98 13       	cpse	r25, r24
    1e72:	31 c0       	rjmp	.+98     	; 0x1ed6 <retransmitBlockageData+0x8c>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    1e74:	e2 17       	cp	r30, r18
    1e76:	f3 07       	cpc	r31, r19
    1e78:	c9 f7       	brne	.-14     	; 0x1e6c <retransmitBlockageData+0x22>
    //cli();
    if(blockageDataBufferTail != blockageDataBufferHead)
    {
        if(compareSerialNums(&blockageDataBuffer[blockageDataBufferHead], serialNumPtr)) // SN matches this module
        {
			cli(); // Prevent head/tail from being disrupted during pop operation
    1e7a:	f8 94       	cli

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1e7c:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <blockageDataBufferTail>
    1e80:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <blockageDataBufferHead>
    1e84:	98 17       	cp	r25, r24
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <retransmitBlockageData+0x40>
    1e88:	c2 c0       	rjmp	.+388    	; 0x200e <retransmitBlockageData+0x1c4>
    1e8a:	21 e0       	ldi	r18, 0x01	; 1
    1e8c:	28 0f       	add	r18, r24
    1e8e:	92 17       	cp	r25, r18
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <retransmitBlockageData+0x4a>
    1e92:	bb c0       	rjmp	.+374    	; 0x200a <retransmitBlockageData+0x1c0>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1e94:	22 e0       	ldi	r18, 0x02	; 2
    1e96:	28 0f       	add	r18, r24
    1e98:	20 93 00 05 	sts	0x0500, r18	; 0x800500 <blockageDataBufferHead>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1e9c:	92 17       	cp	r25, r18
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <retransmitBlockageData+0x58>
    1ea0:	b6 c0       	rjmp	.+364    	; 0x200e <retransmitBlockageData+0x1c4>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1ea2:	23 e0       	ldi	r18, 0x03	; 3
    1ea4:	28 0f       	add	r18, r24
    1ea6:	20 93 00 05 	sts	0x0500, r18	; 0x800500 <blockageDataBufferHead>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1eaa:	92 17       	cp	r25, r18
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <retransmitBlockageData+0x66>
    1eae:	af c0       	rjmp	.+350    	; 0x200e <retransmitBlockageData+0x1c4>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1eb0:	e4 e0       	ldi	r30, 0x04	; 4
    1eb2:	e8 0f       	add	r30, r24
    1eb4:	e0 93 00 05 	sts	0x0500, r30	; 0x800500 <blockageDataBufferHead>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1eb8:	9e 17       	cp	r25, r30
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <retransmitBlockageData+0x74>
    1ebc:	a8 c0       	rjmp	.+336    	; 0x200e <retransmitBlockageData+0x1c4>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1ebe:	8b 5f       	subi	r24, 0xFB	; 251
    1ec0:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <blockageDataBufferHead>
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	ef 5f       	subi	r30, 0xFF	; 255
    1ec8:	fa 4f       	sbci	r31, 0xFA	; 250
    1eca:	80 81       	ld	r24, Z
			cli(); // Prevent head/tail from being disrupted during pop operation
            (void) popBlockageDataBuffer();
			(void) popBlockageDataBuffer();
			(void) popBlockageDataBuffer();
			(void) popBlockageDataBuffer();
			storeActiveBlockageData(popBlockageDataBuffer());
    1ecc:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <storeActiveBlockageData>
            sei();
    1ed0:	78 94       	sei
    1ed2:	08 95       	ret
    1ed4:	08 95       	ret
        }
        else
        {
 	        can_retry = CAN_RETRY_LIMIT;
    1ed6:	88 ee       	ldi	r24, 0xE8	; 232
    1ed8:	93 e0       	ldi	r25, 0x03	; 3
    1eda:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1ede:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
 	        while (can_get_status(&scPeriodicCANTx) == CAN_STATUS_NOT_COMPLETED && can_retry > 0)
    1ee2:	0c c0       	rjmp	.+24     	; 0x1efc <retransmitBlockageData+0xb2>
    1ee4:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1ee8:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <retransmitBlockageData+0xa8>
    1ef0:	76 c0       	rjmp	.+236    	; 0x1fde <retransmitBlockageData+0x194>
 	        {
     	        can_retry--;
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1ef8:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
            sei();
        }
        else
        {
 	        can_retry = CAN_RETRY_LIMIT;
 	        while (can_get_status(&scPeriodicCANTx) == CAN_STATUS_NOT_COMPLETED && can_retry > 0)
    1efc:	87 e3       	ldi	r24, 0x37	; 55
    1efe:	96 e0       	ldi	r25, 0x06	; 6
    1f00:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	71 f3       	breq	.-36     	; 0x1ee4 <retransmitBlockageData+0x9a>
 	        {
     	        can_retry--;
 	        }
 	        if(can_retry == 0)
    1f08:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1f0c:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1f10:	89 2b       	or	r24, r25
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <retransmitBlockageData+0xcc>
    1f14:	64 c0       	rjmp	.+200    	; 0x1fde <retransmitBlockageData+0x194>
         	        canRetryFailCount = 0;
         	        initCAN();
     	        }
     	        return;
 	        }
 	        canRetryFailCount = 0;
    1f16:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <canRetryFailCount>
            // Fill the data bytes
            cli();
    1f1a:	f8 94       	cli

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1f1c:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <blockageDataBufferTail>
    1f20:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <blockageDataBufferHead>
    1f24:	98 17       	cp	r25, r24
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <retransmitBlockageData+0xe0>
    1f28:	66 c0       	rjmp	.+204    	; 0x1ff6 <retransmitBlockageData+0x1ac>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1f2a:	a1 e0       	ldi	r26, 0x01	; 1
    1f2c:	a8 0f       	add	r26, r24
    1f2e:	a0 93 00 05 	sts	0x0500, r26	; 0x800500 <blockageDataBufferHead>
    1f32:	e8 2f       	mov	r30, r24
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	ef 5f       	subi	r30, 0xFF	; 255
    1f38:	fa 4f       	sbci	r31, 0xFA	; 250
     	        return;
 	        }
 	        canRetryFailCount = 0;
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
    1f3a:	20 81       	ld	r18, Z
    1f3c:	20 93 24 06 	sts	0x0624, r18	; 0x800624 <txCANMsgSensorData>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1f40:	9a 17       	cp	r25, r26
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <retransmitBlockageData+0xfc>
    1f44:	66 c0       	rjmp	.+204    	; 0x2012 <retransmitBlockageData+0x1c8>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1f46:	e2 e0       	ldi	r30, 0x02	; 2
    1f48:	e8 0f       	add	r30, r24
    1f4a:	e0 93 00 05 	sts	0x0500, r30	; 0x800500 <blockageDataBufferHead>
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	af 5f       	subi	r26, 0xFF	; 255
    1f52:	ba 4f       	sbci	r27, 0xFA	; 250
 	        }
 	        canRetryFailCount = 0;
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
    1f54:	2c 91       	ld	r18, X
    1f56:	20 93 25 06 	sts	0x0625, r18	; 0x800625 <txCANMsgSensorData+0x1>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1f5a:	9e 17       	cp	r25, r30
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <retransmitBlockageData+0x116>
    1f5e:	4f c0       	rjmp	.+158    	; 0x1ffe <retransmitBlockageData+0x1b4>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1f60:	a3 e0       	ldi	r26, 0x03	; 3
    1f62:	a8 0f       	add	r26, r24
    1f64:	a0 93 00 05 	sts	0x0500, r26	; 0x800500 <blockageDataBufferHead>
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	ef 5f       	subi	r30, 0xFF	; 255
    1f6c:	fa 4f       	sbci	r31, 0xFA	; 250
 	        canRetryFailCount = 0;
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
            txCANMsgSensorData[2] = popBlockageDataBuffer(); // Serial Num 
    1f6e:	20 81       	ld	r18, Z
    1f70:	20 93 26 06 	sts	0x0626, r18	; 0x800626 <txCANMsgSensorData+0x2>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1f74:	9a 17       	cp	r25, r26
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <retransmitBlockageData+0x130>
    1f78:	50 c0       	rjmp	.+160    	; 0x201a <retransmitBlockageData+0x1d0>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1f7a:	e4 e0       	ldi	r30, 0x04	; 4
    1f7c:	e8 0f       	add	r30, r24
    1f7e:	e0 93 00 05 	sts	0x0500, r30	; 0x800500 <blockageDataBufferHead>
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	af 5f       	subi	r26, 0xFF	; 255
    1f86:	ba 4f       	sbci	r27, 0xFA	; 250
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
            txCANMsgSensorData[2] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[3] = popBlockageDataBuffer(); // Serial Num 
    1f88:	2c 91       	ld	r18, X
    1f8a:	20 93 27 06 	sts	0x0627, r18	; 0x800627 <txCANMsgSensorData+0x3>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1f8e:	9e 17       	cp	r25, r30
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <retransmitBlockageData+0x14a>
    1f92:	47 c0       	rjmp	.+142    	; 0x2022 <retransmitBlockageData+0x1d8>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1f94:	8b 5f       	subi	r24, 0xFB	; 251
    1f96:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <blockageDataBufferHead>
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	ef 5f       	subi	r30, 0xFF	; 255
    1f9e:	fa 4f       	sbci	r31, 0xFA	; 250
    1fa0:	80 81       	ld	r24, Z
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
            txCANMsgSensorData[2] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[3] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[4] = popBlockageDataBuffer();// Blockage data
    1fa2:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
            sei();
    1fa6:	78 94       	sei
            scPeriodicCANTx.dlc = 5;
    1fa8:	85 e0       	ldi	r24, 0x05	; 5
    1faa:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
            scPeriodicCANTx.id.std = CANID_ACTIVE_BLOCKAGE;
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    1fb6:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>

            if(can_cmd(&scPeriodicCANTx) != CAN_CMD_ACCEPTED)
    1fba:	87 e3       	ldi	r24, 0x37	; 55
    1fbc:	96 e0       	ldi	r25, 0x06	; 6
    1fbe:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    1fc2:	88 23       	and	r24, r24
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <retransmitBlockageData+0x17e>
    1fc6:	86 cf       	rjmp	.-244    	; 0x1ed4 <retransmitBlockageData+0x8a>
            {
                // Abort the TX request
                scPeriodicCANTx.cmd = CMD_ABORT;
    1fc8:	8c e0       	ldi	r24, 0x0C	; 12
    1fca:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <scPeriodicCANTx+0x1>
                can_cmd(&scPeriodicCANTx);
    1fce:	87 e3       	ldi	r24, 0x37	; 55
    1fd0:	96 e0       	ldi	r25, 0x06	; 6
    1fd2:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
                scPeriodicCANTx.cmd = CMD_TX_DATA;
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <scPeriodicCANTx+0x1>
    1fdc:	08 95       	ret
 	        {
     	        can_retry--;
 	        }
 	        if(can_retry == 0)
 	        {
     	        canRetryFailCount++;
    1fde:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <canRetryFailCount>
    1fe2:	8f 5f       	subi	r24, 0xFF	; 255
     	        if(canRetryFailCount > 50)
    1fe4:	83 33       	cpi	r24, 0x33	; 51
    1fe6:	18 f4       	brcc	.+6      	; 0x1fee <retransmitBlockageData+0x1a4>
 	        {
     	        can_retry--;
 	        }
 	        if(can_retry == 0)
 	        {
     	        canRetryFailCount++;
    1fe8:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <canRetryFailCount>
    1fec:	08 95       	ret
     	        if(canRetryFailCount > 50)
     	        {
         	        canRetryFailCount = 0;
    1fee:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <canRetryFailCount>
         	        initCAN();
    1ff2:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <initCAN>
     	        return;
 	        }
 	        canRetryFailCount = 0;
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
    1ff6:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <txCANMsgSensorData>
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
    1ffa:	10 92 25 06 	sts	0x0625, r1	; 0x800625 <txCANMsgSensorData+0x1>
            txCANMsgSensorData[2] = popBlockageDataBuffer(); // Serial Num 
    1ffe:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <txCANMsgSensorData+0x2>
            txCANMsgSensorData[3] = popBlockageDataBuffer(); // Serial Num 
    2002:	10 92 27 06 	sts	0x0627, r1	; 0x800627 <txCANMsgSensorData+0x3>
    //sei();
}

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	cc cf       	rjmp	.-104    	; 0x1fa2 <retransmitBlockageData+0x158>
	
	if(blockageDataBufferTail != blockageDataBufferHead)
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    200a:	90 93 00 05 	sts	0x0500, r25	; 0x800500 <blockageDataBufferHead>
    //sei();
}

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	5d cf       	rjmp	.-326    	; 0x1ecc <retransmitBlockageData+0x82>
 	        }
 	        canRetryFailCount = 0;
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
    2012:	10 92 25 06 	sts	0x0625, r1	; 0x800625 <txCANMsgSensorData+0x1>
            txCANMsgSensorData[2] = popBlockageDataBuffer(); // Serial Num 
    2016:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <txCANMsgSensorData+0x2>
            txCANMsgSensorData[3] = popBlockageDataBuffer(); // Serial Num 
    201a:	10 92 27 06 	sts	0x0627, r1	; 0x800627 <txCANMsgSensorData+0x3>
    //sei();
}

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	c0 cf       	rjmp	.-128    	; 0x1fa2 <retransmitBlockageData+0x158>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	be cf       	rjmp	.-132    	; 0x1fa2 <retransmitBlockageData+0x158>

00002026 <__vector_18>:
	return ret;
}

// Interrupt handler for CAN module
ISR(CAN_INT_vect)
{
    2026:	1f 92       	push	r1
    2028:	0f 92       	push	r0
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	0f 92       	push	r0
    202e:	11 24       	eor	r1, r1
    2030:	2f 92       	push	r2
    2032:	3f 92       	push	r3
    2034:	4f 92       	push	r4
    2036:	5f 92       	push	r5
    2038:	6f 92       	push	r6
    203a:	7f 92       	push	r7
    203c:	8f 92       	push	r8
    203e:	af 92       	push	r10
    2040:	bf 92       	push	r11
    2042:	cf 92       	push	r12
    2044:	df 92       	push	r13
    2046:	ef 92       	push	r14
    2048:	ff 92       	push	r15
    204a:	1f 93       	push	r17
    204c:	2f 93       	push	r18
    204e:	3f 93       	push	r19
    2050:	4f 93       	push	r20
    2052:	5f 93       	push	r21
    2054:	6f 93       	push	r22
    2056:	7f 93       	push	r23
    2058:	8f 93       	push	r24
    205a:	9f 93       	push	r25
    205c:	af 93       	push	r26
    205e:	bf 93       	push	r27
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	ef 93       	push	r30
    2066:	ff 93       	push	r31
   unsigned int id;       /* can_data index */
   BYTE byI;
   BYTE byCtr;
   BYTE flags;

   BYTE pageSave = CANPAGE;
    2068:	70 90 ed 00 	lds	r7, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

   for (byI = 2; byI <= 5; byI++)
    206c:	12 e0       	ldi	r17, 0x02	; 2
   {
	   CANPAGE = (byI << 4);    /*  select channel 2/3/4/5 to see if it is Rx interrupt */
	   if((CANSTMOB & MOB_RX_COMPLETED) == MOB_RX_COMPLETED)
	   {
	      CANTrafficDetected = 1;
    206e:	88 24       	eor	r8, r8
    2070:	83 94       	inc	r8
    2072:	c8 e1       	ldi	r28, 0x18	; 24
    2074:	d6 e0       	ldi	r29, 0x06	; 6
                    break;
                 
                 case CANID_PROG_DATA_ACK:
                    // Re-transmit to the display
                    CANDataRequestFlags |= 0x02;
                    TOGGLE_ROW3_LED;
    2076:	80 e1       	ldi	r24, 0x10	; 16
    2078:	58 2e       	mov	r5, r24
    207a:	91 e1       	ldi	r25, 0x11	; 17
    207c:	e9 2e       	mov	r14, r25
    207e:	96 e0       	ldi	r25, 0x06	; 6
    2080:	f9 2e       	mov	r15, r25
                case CANID_WRITE_HW_PART_NUM_2:
                    for (byCtr = 0; byCtr < 5; byCtr++)
                    {
                        scabyCANEeBuff[byCtr] = CANMSG;
                    }
                    sceCANEeWriteState = EE_WRITE_HW_PART_NUM_2;
    2082:	24 e0       	ldi	r18, 0x04	; 4
    2084:	62 2e       	mov	r6, r18
    2086:	34 e1       	ldi	r19, 0x14	; 20
    2088:	23 2e       	mov	r2, r19
    208a:	36 e0       	ldi	r19, 0x06	; 6
    208c:	33 2e       	mov	r3, r19
    208e:	4b e1       	ldi	r20, 0x1B	; 27
    2090:	a4 2e       	mov	r10, r20
    2092:	46 e0       	ldi	r20, 0x06	; 6
    2094:	b4 2e       	mov	r11, r20
    2096:	5c e1       	ldi	r21, 0x1C	; 28
    2098:	c5 2e       	mov	r12, r21
    209a:	56 e0       	ldi	r21, 0x06	; 6
    209c:	d5 2e       	mov	r13, r21

   BYTE pageSave = CANPAGE;

   for (byI = 2; byI <= 5; byI++)
   {
	   CANPAGE = (byI << 4);    /*  select channel 2/3/4/5 to see if it is Rx interrupt */
    209e:	81 2f       	mov	r24, r17
    20a0:	82 95       	swap	r24
    20a2:	80 7f       	andi	r24, 0xF0	; 240
    20a4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	   if((CANSTMOB & MOB_RX_COMPLETED) == MOB_RX_COMPLETED)
    20a8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    20ac:	85 ff       	sbrs	r24, 5
    20ae:	17 c0       	rjmp	.+46     	; 0x20de <__vector_18+0xb8>
	   {
	      CANTrafficDetected = 1;
    20b0:	80 92 07 06 	sts	0x0607, r8	; 0x800607 <CANTrafficDetected>
          
          id = (((int)(CANIDT2)) >> 5) + (((int)(CANIDT1)) << 3);       // V2.0 part A
    20b4:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    20b8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>

            //Now take appropriate action based on id and data received
			switch (id)
    20bc:	e2 95       	swap	r30
    20be:	e6 95       	lsr	r30
    20c0:	e7 70       	andi	r30, 0x07	; 7
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	98 e0       	ldi	r25, 0x08	; 8
    20c6:	89 9f       	mul	r24, r25
    20c8:	e0 0d       	add	r30, r0
    20ca:	f1 1d       	adc	r31, r1
    20cc:	11 24       	eor	r1, r1
    20ce:	32 97       	sbiw	r30, 0x02	; 2
    20d0:	ef 37       	cpi	r30, 0x7F	; 127
    20d2:	f1 05       	cpc	r31, r1
    20d4:	48 f4       	brcc	.+18     	; 0x20e8 <__vector_18+0xc2>
    20d6:	ea 5b       	subi	r30, 0xBA	; 186
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	0c 94 e2 1f 	jmp	0x3fc4	; 0x3fc4 <__tablejump2__>
#endif				 
               default:	 				  
				   break;
		    }
	   }
	   else if (CANSTMOB & MOB_NOT_REACHED) //error in MOB 1
    20de:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    20e2:	8f 71       	andi	r24, 0x1F	; 31
    20e4:	09 f0       	breq	.+2      	; 0x20e8 <__vector_18+0xc2>
	   {
		  _NOP();
    20e6:	00 00       	nop
	   }
	   CANSTMOB = 0x00;                             /* reset channel 0 status */
    20e8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	   CANCDMOB = DLC_MAX;                         /* receive 8 bytes */
    20ec:	88 e0       	ldi	r24, 0x08	; 8
    20ee:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	   CANCDMOB |= CH_RxENA;                       /* reception enable */
    20f2:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    20f6:	80 68       	ori	r24, 0x80	; 128
    20f8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	   CANGIT = CANGIT;                            /* reset all flags */
    20fc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    2100:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
   BYTE byCtr;
   BYTE flags;

   BYTE pageSave = CANPAGE;

   for (byI = 2; byI <= 5; byI++)
    2104:	1f 5f       	subi	r17, 0xFF	; 255
    2106:	16 30       	cpi	r17, 0x06	; 6
    2108:	51 f6       	brne	.-108    	; 0x209e <__vector_18+0x78>
	   CANSTMOB = 0x00;                             /* reset channel 0 status */
	   CANCDMOB = DLC_MAX;                         /* receive 8 bytes */
	   CANCDMOB |= CH_RxENA;                       /* reception enable */
	   CANGIT = CANGIT;                            /* reset all flags */
   } 
   CANPAGE = pageSave;	   
    210a:	70 92 ed 00 	sts	0x00ED, r7	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
}
    210e:	ff 91       	pop	r31
    2110:	ef 91       	pop	r30
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	bf 91       	pop	r27
    2118:	af 91       	pop	r26
    211a:	9f 91       	pop	r25
    211c:	8f 91       	pop	r24
    211e:	7f 91       	pop	r23
    2120:	6f 91       	pop	r22
    2122:	5f 91       	pop	r21
    2124:	4f 91       	pop	r20
    2126:	3f 91       	pop	r19
    2128:	2f 91       	pop	r18
    212a:	1f 91       	pop	r17
    212c:	ff 90       	pop	r15
    212e:	ef 90       	pop	r14
    2130:	df 90       	pop	r13
    2132:	cf 90       	pop	r12
    2134:	bf 90       	pop	r11
    2136:	af 90       	pop	r10
    2138:	8f 90       	pop	r8
    213a:	7f 90       	pop	r7
    213c:	6f 90       	pop	r6
    213e:	5f 90       	pop	r5
    2140:	4f 90       	pop	r4
    2142:	3f 90       	pop	r3
    2144:	2f 90       	pop	r2
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	0f 90       	pop	r0
    214c:	1f 90       	pop	r1
    214e:	18 95       	reti
    2150:	e4 e1       	ldi	r30, 0x14	; 20
    2152:	f6 e0       	ldi	r31, 0x06	; 6
			{
			   case CANID_SENSOR_DATA:
                    // Collect sensor data and buffer for WiFi Tx
		            for (byCtr = 0; byCtr < 6; byCtr++)
		            {
    		            scabyCANRxBuff[byCtr] = CANMSG;
    2154:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2158:	81 93       	st	Z+, r24
            //Now take appropriate action based on id and data received
			switch (id)
			{
			   case CANID_SENSOR_DATA:
                    // Collect sensor data and buffer for WiFi Tx
		            for (byCtr = 0; byCtr < 6; byCtr++)
    215a:	86 e0       	ldi	r24, 0x06	; 6
    215c:	ea 31       	cpi	r30, 0x1A	; 26
    215e:	f8 07       	cpc	r31, r24
    2160:	c9 f7       	brne	.-14     	; 0x2154 <__vector_18+0x12e>
		            {
    		            scabyCANRxBuff[byCtr] = CANMSG;
		            }                       
					addFlowRateMessage(scabyCANRxBuff);
    2162:	84 e1       	ldi	r24, 0x14	; 20
    2164:	96 e0       	ldi	r25, 0x06	; 6
    2166:	0e 94 0b 06 	call	0xc16	; 0xc16 <addFlowRateMessage>
                    break;
    216a:	be cf       	rjmp	.-132    	; 0x20e8 <__vector_18+0xc2>
    216c:	a4 e1       	ldi	r26, 0x14	; 20
    216e:	b6 e0       	ldi	r27, 0x06	; 6
	      CANTrafficDetected = 1;
          
          id = (((int)(CANIDT2)) >> 5) + (((int)(CANIDT1)) << 3);       // V2.0 part A

            //Now take appropriate action based on id and data received
			switch (id)
    2170:	fd 01       	movw	r30, r26
                
               case CANID_ACTIVE_BLOCKAGE:
                // Check module ID and handle active blockage here...
		            for (byCtr = 0; byCtr < 5; byCtr++)
		            {
    		            scabyCANRxBuff[byCtr] = CANMSG;
    2172:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2176:	81 93       	st	Z+, r24
					addFlowRateMessage(scabyCANRxBuff);
                    break;
                
               case CANID_ACTIVE_BLOCKAGE:
                // Check module ID and handle active blockage here...
		            for (byCtr = 0; byCtr < 5; byCtr++)
    2178:	96 e0       	ldi	r25, 0x06	; 6
    217a:	e9 31       	cpi	r30, 0x19	; 25
    217c:	f9 07       	cpc	r31, r25
    217e:	c9 f7       	brne	.-14     	; 0x2172 <__vector_18+0x14c>
    2180:	e0 91 01 06 	lds	r30, 0x0601	; 0x800601 <serialNumPtr>
    2184:	f0 91 02 06 	lds	r31, 0x0602	; 0x800602 <serialNumPtr+0x1>
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    2188:	8d 91       	ld	r24, X+
    218a:	91 91       	ld	r25, Z+
    218c:	98 13       	cpse	r25, r24
    218e:	ac cf       	rjmp	.-168    	; 0x20e8 <__vector_18+0xc2>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    2190:	ca 17       	cp	r28, r26
    2192:	db 07       	cpc	r29, r27
    2194:	c9 f7       	brne	.-14     	; 0x2188 <__vector_18+0x162>
    		            scabyCANRxBuff[byCtr] = CANMSG;
		            }
                    // Check if the blockage is on this module
                    if(compareSerialNums(scabyCANRxBuff, serialNumPtr))
                    {
                        storeActiveBlockageData(scabyCANRxBuff[4]);
    2196:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <scabyCANRxBuff+0x4>
    219a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <storeActiveBlockageData>
    219e:	a4 cf       	rjmp	.-184    	; 0x20e8 <__vector_18+0xc2>
                    SET_WIFI_RESET_LOW;
                    break;

                case CANID_ENABLE_WIFI:
                    // Turn on wifi module      
                    SET_WIFI_RESET_HIGH;                 
    21a0:	59 98       	cbi	0x0b, 1	; 11
                    break;
    21a2:	a2 cf       	rjmp	.-188    	; 0x20e8 <__vector_18+0xc2>
                    }                   
                    break;
                    
               case CANID_DISABLE_WIFI:
                    // Shut off wifi module
                    SET_WIFI_RESET_LOW;
    21a4:	59 9a       	sbi	0x0b, 1	; 11
                    break;
    21a6:	a0 cf       	rjmp	.-192    	; 0x20e8 <__vector_18+0xc2>
                    sceCANEeWriteState = EE_WRITE_HW_PART_NUM_2;
                    break;
                 
                 case CANID_PROG_DATA_ACK:
                    // Re-transmit to the display
                    CANDataRequestFlags |= 0x02;
    21a8:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <CANDataRequestFlags>
    21ac:	82 60       	ori	r24, 0x02	; 2
    21ae:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <CANDataRequestFlags>
                    TOGGLE_ROW3_LED;
    21b2:	85 b1       	in	r24, 0x05	; 5
    21b4:	85 25       	eor	r24, r5
    21b6:	85 b9       	out	0x05, r24	; 5
                    break;
    21b8:	97 cf       	rjmp	.-210    	; 0x20e8 <__vector_18+0xc2>
    return CANDataRequestFlags;
}

void setCANDataRequestFlags(BYTE val)
{
    CANDataRequestFlags = val;
    21ba:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <CANDataRequestFlags>
    21be:	80 64       	ori	r24, 0x40	; 64
    21c0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <CANDataRequestFlags>
                    break;

                 case CANID_SENSOR_INVALID_PROG:
                    flags = getCANDataRequestFlags();				 
                    setCANDataRequestFlags(flags | BIT_DATA_RX_BITMASK);
                    setLastActiveBIT(2); // BIT id '2'
    21c4:	82 e0       	ldi	r24, 0x02	; 2
    21c6:	0e 94 a6 08 	call	0x114c	; 0x114c <setLastActiveBIT>
                    break;
    21ca:	8e cf       	rjmp	.-228    	; 0x20e8 <__vector_18+0xc2>
    21cc:	e4 e1       	ldi	r30, 0x14	; 20
    21ce:	f6 e0       	ldi	r31, 0x06	; 6
                    break;
                    
               case CANID_EE_DATA:
		           for (byCtr = 0; byCtr < 8; byCtr++)
		           {
				     scabyCANRxBuff[byCtr] = CANMSG;
    21d0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    21d4:	81 93       	st	Z+, r24
                    // Turn on wifi module      
                    SET_WIFI_RESET_HIGH;                 
                    break;
                    
               case CANID_EE_DATA:
		           for (byCtr = 0; byCtr < 8; byCtr++)
    21d6:	ce 16       	cp	r12, r30
    21d8:	df 06       	cpc	r13, r31
    21da:	d1 f7       	brne	.-12     	; 0x21d0 <__vector_18+0x1aa>
    21dc:	85 cf       	rjmp	.-246    	; 0x20e8 <__vector_18+0xc2>
                    }                    
                    storeConnectedSensor(&scabyCANRxBuff[0]);
                    break;

                 case CANID_SENSOR_BIT_RESULT:
                    scabyCANRxBuff[0] = CANMSG;
    21de:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    21e2:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <scabyCANRxBuff>
    return CANDataRequestFlags;
}

void setCANDataRequestFlags(BYTE val)
{
    CANDataRequestFlags = val;
    21e6:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <CANDataRequestFlags>
    21ea:	90 64       	ori	r25, 0x40	; 64
    21ec:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <CANDataRequestFlags>

                 case CANID_SENSOR_BIT_RESULT:
                    scabyCANRxBuff[0] = CANMSG;
                    flags = getCANDataRequestFlags();					
                    setCANDataRequestFlags(flags | BIT_DATA_RX_BITMASK);
                    setLastActiveBIT(scabyCANRxBuff[0]);
    21f0:	0e 94 a6 08 	call	0x114c	; 0x114c <setLastActiveBIT>
                    break;
    21f4:	79 cf       	rjmp	.-270    	; 0x20e8 <__vector_18+0xc2>
                        jumpToBootloader();
                    }         
                    break;

                case CANID_REQ_SENSOR_VERSIONS:
                    CANDataRequestFlags |= 0x01;
    21f6:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <CANDataRequestFlags>
    21fa:	81 60       	ori	r24, 0x01	; 1
    21fc:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <CANDataRequestFlags>
                    break;
    2200:	73 cf       	rjmp	.-282    	; 0x20e8 <__vector_18+0xc2>

               case CANID_START_SENSOR_FW_UPDATE:
                    // Check module Serial Num and prep for update here...
                    for (byCtr = 0; byCtr < 4; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    2202:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2206:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <scabyCANRxBuff>
    220a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    220e:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <scabyCANRxBuff+0x1>
    2212:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2216:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <scabyCANRxBuff+0x2>
    221a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    221e:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <scabyCANRxBuff+0x3>
    2222:	e4 e1       	ldi	r30, 0x14	; 20
    2224:	f6 e0       	ldi	r31, 0x06	; 6
    2226:	a0 91 01 06 	lds	r26, 0x0601	; 0x800601 <serialNumPtr>
    222a:	b0 91 02 06 	lds	r27, 0x0602	; 0x800602 <serialNumPtr+0x1>
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    222e:	91 91       	ld	r25, Z+
    2230:	8d 91       	ld	r24, X+
    2232:	98 13       	cpse	r25, r24
    2234:	59 cf       	rjmp	.-334    	; 0x20e8 <__vector_18+0xc2>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    2236:	ce 17       	cp	r28, r30
    2238:	df 07       	cpc	r29, r31
    223a:	c9 f7       	brne	.-14     	; 0x222e <__vector_18+0x208>
                        scabyCANRxBuff[byCtr] = CANMSG;
                    }

                    if(compareSerialNums(scabyCANRxBuff, serialNumPtr))
                    {          
                        _CLI();
    223c:	f8 94       	cli
                        // jump to bootloader...
						eeprom_busy_wait();
    223e:	f9 99       	sbic	0x1f, 1	; 31
    2240:	fe cf       	rjmp	.-4      	; 0x223e <__vector_18+0x218>
						while(eeprom_read_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC) != 0x01)
    2242:	8a e6       	ldi	r24, 0x6A	; 106
    2244:	97 e0       	ldi	r25, 0x07	; 7
    2246:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_read_byte>
    224a:	81 30       	cpi	r24, 0x01	; 1
    224c:	09 f4       	brne	.+2      	; 0x2250 <__vector_18+0x22a>
    224e:	0b c1       	rjmp	.+534    	; 0x2466 <__vector_18+0x440>
						{
							eeprom_busy_wait();
    2250:	f9 99       	sbic	0x1f, 1	; 31
    2252:	fe cf       	rjmp	.-4      	; 0x2250 <__vector_18+0x22a>
							eeprom_write_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC, 0x01);
    2254:	61 e0       	ldi	r22, 0x01	; 1
    2256:	8a e6       	ldi	r24, 0x6A	; 106
    2258:	97 e0       	ldi	r25, 0x07	; 7
    225a:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
							eeprom_busy_wait();
    225e:	f9 99       	sbic	0x1f, 1	; 31
    2260:	fe cf       	rjmp	.-4      	; 0x225e <__vector_18+0x238>
    2262:	ef cf       	rjmp	.-34     	; 0x2242 <__vector_18+0x21c>
    return CANDataRequestFlags;
}

void setCANDataRequestFlags(BYTE val)
{
    CANDataRequestFlags = val;
    2264:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <CANDataRequestFlags>
    2268:	84 60       	ori	r24, 0x04	; 4
    226a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <CANDataRequestFlags>
    226e:	3c cf       	rjmp	.-392    	; 0x20e8 <__vector_18+0xc2>
    2270:	e4 e1       	ldi	r30, 0x14	; 20
    2272:	f6 e0       	ldi	r31, 0x06	; 6
                    break;

                case CANID_DEVICE_INFO:
                    for (byCtr = 0; byCtr < 8; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    2274:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2278:	81 93       	st	Z+, r24
                    }
                    sceCANEeWriteState = EE_WRITE_SERIAL;
                    break;

                case CANID_DEVICE_INFO:
                    for (byCtr = 0; byCtr < 8; byCtr++)
    227a:	96 e0       	ldi	r25, 0x06	; 6
    227c:	ec 31       	cpi	r30, 0x1C	; 28
    227e:	f9 07       	cpc	r31, r25
    2280:	c9 f7       	brne	.-14     	; 0x2274 <__vector_18+0x24e>
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
                    }                    
                    storeDeviceInfoData(&scabyCANRxBuff[0]);
    2282:	84 e1       	ldi	r24, 0x14	; 20
    2284:	96 e0       	ldi	r25, 0x06	; 6
    2286:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <storeDeviceInfoData>
                    break;
    228a:	2e cf       	rjmp	.-420    	; 0x20e8 <__vector_18+0xc2>
    228c:	ec e0       	ldi	r30, 0x0C	; 12
    228e:	f6 e0       	ldi	r31, 0x06	; 6
                    break;

                case CANID_WRITE_SERIAL_NUM:
                    for (byCtr = 0; byCtr < 8; byCtr++)
                    {
	                    scabyCANEeBuff[byCtr] = CANMSG;
    2290:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2294:	81 93       	st	Z+, r24
                    copyCalStatusDataToTxBuffer(scabyCANRxBuff);
                    calStatusResponseCount++;
                    break;

                case CANID_WRITE_SERIAL_NUM:
                    for (byCtr = 0; byCtr < 8; byCtr++)
    2296:	2e 16       	cp	r2, r30
    2298:	3f 06       	cpc	r3, r31
    229a:	d1 f7       	brne	.-12     	; 0x2290 <__vector_18+0x26a>
                    {
	                    scabyCANEeBuff[byCtr] = CANMSG;
                    }
                    sceCANEeWriteState = EE_WRITE_SERIAL;
    229c:	80 92 0b 06 	sts	0x060B, r8	; 0x80060b <sceCANEeWriteState>
                    break;
    22a0:	23 cf       	rjmp	.-442    	; 0x20e8 <__vector_18+0xc2>
    22a2:	ec e0       	ldi	r30, 0x0C	; 12
    22a4:	f6 e0       	ldi	r31, 0x06	; 6
                    break;

                case CANID_WRITE_HW_VERSION:
                    for (byCtr = 0; byCtr < 5; byCtr++)
                    {
	                    scabyCANEeBuff[byCtr] = CANMSG;
    22a6:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    22aa:	81 93       	st	Z+, r24
                    }                    
                    storeDeviceInfoData(&scabyCANRxBuff[0]);
                    break;

                case CANID_WRITE_HW_VERSION:
                    for (byCtr = 0; byCtr < 5; byCtr++)
    22ac:	ee 16       	cp	r14, r30
    22ae:	ff 06       	cpc	r15, r31
    22b0:	d1 f7       	brne	.-12     	; 0x22a6 <__vector_18+0x280>
                    {
	                    scabyCANEeBuff[byCtr] = CANMSG;
                    }
                    sceCANEeWriteState = EE_WRITE_HW_VER;              
    22b2:	82 e0       	ldi	r24, 0x02	; 2
    22b4:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <sceCANEeWriteState>
                    break;
    22b8:	17 cf       	rjmp	.-466    	; 0x20e8 <__vector_18+0xc2>
                    CANDataRequestFlags |= 0x02;
                    TOGGLE_ROW3_LED;
                    break;

                 case CANID_DISABLE_SENSOR_DATA:
                    setSensorDataDisableFlag();
    22ba:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <setSensorDataDisableFlag>
                    break;
    22be:	14 cf       	rjmp	.-472    	; 0x20e8 <__vector_18+0xc2>

                 case CANID_ENABLE_SENSOR_DATA:
                    clearSensorDataDisableFlag();
    22c0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <clearSensorDataDisableFlag>
                    break;   
    22c4:	11 cf       	rjmp	.-478    	; 0x20e8 <__vector_18+0xc2>
                case CANID_REQ_SENSOR_VERSIONS:
                    CANDataRequestFlags |= 0x01;
                    break;

                case CANID_START_CAL:
                    startSensorCalibration();
    22c6:	0e 94 85 04 	call	0x90a	; 0x90a <startSensorCalibration>
                    break;
    22ca:	0e cf       	rjmp	.-484    	; 0x20e8 <__vector_18+0xc2>
    22cc:	e4 e1       	ldi	r30, 0x14	; 20
    22ce:	f6 e0       	ldi	r31, 0x06	; 6
	      CANTrafficDetected = 1;
          
          id = (((int)(CANIDT2)) >> 5) + (((int)(CANIDT1)) << 3);       // V2.0 part A

            //Now take appropriate action based on id and data received
			switch (id)
    22d0:	df 01       	movw	r26, r30

                case CANID_CAL_STATUS:
                    // Store all status data to retransmit to display 
                    for (byCtr = 0; byCtr < 7; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    22d2:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    22d6:	8d 93       	st	X+, r24
                    startSensorCalibration();
                    break;

                case CANID_CAL_STATUS:
                    // Store all status data to retransmit to display 
                    for (byCtr = 0; byCtr < 7; byCtr++)
    22d8:	86 e0       	ldi	r24, 0x06	; 6
    22da:	ab 31       	cpi	r26, 0x1B	; 27
    22dc:	b8 07       	cpc	r27, r24
    22de:	c9 f7       	brne	.-14     	; 0x22d2 <__vector_18+0x2ac>
void copyCalStatusDataToTxBuffer(BYTE* newDataPtr)
{
    BYTE i;
    BYTE* txBufferPtr;

    txBufferPtr = (calStatusBufferPtr + calStatusBufferIndex);
    22e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <calStatusBufferIndex>
    22e4:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <calStatusBufferPtr>
    22e8:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <calStatusBufferPtr+0x1>
    22ec:	a9 0f       	add	r26, r25
    22ee:	b1 1d       	adc	r27, r1

    for(i = 0; i < 7; i++)
    {
        *(txBufferPtr + i) = *(newDataPtr + i);
    22f0:	81 91       	ld	r24, Z+
    22f2:	8d 93       	st	X+, r24
    BYTE i;
    BYTE* txBufferPtr;

    txBufferPtr = (calStatusBufferPtr + calStatusBufferIndex);

    for(i = 0; i < 7; i++)
    22f4:	ae 16       	cp	r10, r30
    22f6:	bf 06       	cpc	r11, r31
    22f8:	d9 f7       	brne	.-10     	; 0x22f0 <__vector_18+0x2ca>
    {
        *(txBufferPtr + i) = *(newDataPtr + i);
    }

    calStatusBufferIndex += 7;
    22fa:	99 5f       	subi	r25, 0xF9	; 249
    22fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <calStatusBufferIndex>
                    for (byCtr = 0; byCtr < 7; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
                    }
                    copyCalStatusDataToTxBuffer(scabyCANRxBuff);
                    calStatusResponseCount++;
    2300:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <calStatusResponseCount>
    2304:	8f 5f       	subi	r24, 0xFF	; 255
    2306:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <calStatusResponseCount>
                    break;
    230a:	ee ce       	rjmp	.-548    	; 0x20e8 <__vector_18+0xc2>
                    break;

                 case CANID_PING_RESPONSE:
                    for (byCtr = 0; byCtr < 4; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    230c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2310:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <scabyCANRxBuff>
    2314:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2318:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <scabyCANRxBuff+0x1>
    231c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2320:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <scabyCANRxBuff+0x2>
    2324:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2328:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <scabyCANRxBuff+0x3>
{
    BYTE i;
    BYTE matchFound = 0;
    BYTE nextIndex;

    for(i = 0; i < connectedSensorCount; i++)
    232c:	40 90 a1 04 	lds	r4, 0x04A1	; 0x8004a1 <connectedSensorCount>
    2330:	44 20       	and	r4, r4
    2332:	09 f4       	brne	.+2      	; 0x2336 <__vector_18+0x310>
    2334:	9b c0       	rjmp	.+310    	; 0x246c <__vector_18+0x446>
    2336:	22 ea       	ldi	r18, 0xA2	; 162
    2338:	34 e0       	ldi	r19, 0x04	; 4
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	e4 e1       	ldi	r30, 0x14	; 20
    233e:	f6 e0       	ldi	r31, 0x06	; 6
    2340:	d9 01       	movw	r26, r18
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    2342:	91 91       	ld	r25, Z+
    2344:	8d 91       	ld	r24, X+
    2346:	98 13       	cpse	r25, r24
    2348:	08 c0       	rjmp	.+16     	; 0x235a <__vector_18+0x334>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    234a:	ce 17       	cp	r28, r30
    234c:	df 07       	cpc	r29, r31
    234e:	09 f4       	brne	.+2      	; 0x2352 <__vector_18+0x32c>
    2350:	cb ce       	rjmp	.-618    	; 0x20e8 <__vector_18+0xc2>
    {
        if((*(num1 + i)) == (*(num2 + i)))
    2352:	91 91       	ld	r25, Z+
    2354:	8d 91       	ld	r24, X+
    2356:	98 17       	cp	r25, r24
    2358:	c1 f3       	breq	.-16     	; 0x234a <__vector_18+0x324>
{
    BYTE i;
    BYTE matchFound = 0;
    BYTE nextIndex;

    for(i = 0; i < connectedSensorCount; i++)
    235a:	4f 5f       	subi	r20, 0xFF	; 255
    235c:	2c 5f       	subi	r18, 0xFC	; 252
    235e:	3f 4f       	sbci	r19, 0xFF	; 255
    2360:	44 12       	cpse	r4, r20
    2362:	ec cf       	rjmp	.-40     	; 0x233c <__vector_18+0x316>
    2364:	84 2d       	mov	r24, r4
    2366:	88 0f       	add	r24, r24
    2368:	88 0f       	add	r24, r24
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	bc 01       	movw	r22, r24
    236e:	6f 5f       	subi	r22, 0xFF	; 255
    2370:	7f 4f       	sbci	r23, 0xFF	; 255
    2372:	ac 01       	movw	r20, r24
    2374:	4e 5f       	subi	r20, 0xFE	; 254
    2376:	5f 4f       	sbci	r21, 0xFF	; 255
    2378:	9c 01       	movw	r18, r24
    237a:	2d 5f       	subi	r18, 0xFD	; 253
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	f1 e0       	ldi	r31, 0x01	; 1
    2380:	f4 0d       	add	r31, r4
        }
    }
    if(!matchFound)
    {
        nextIndex = connectedSensorCount * 4;
        connectedSensorSerialNums[nextIndex] = *serialNumPtr;
    2382:	dc 01       	movw	r26, r24
    2384:	ae 55       	subi	r26, 0x5E	; 94
    2386:	bb 4f       	sbci	r27, 0xFB	; 251
    2388:	e0 91 14 06 	lds	r30, 0x0614	; 0x800614 <scabyCANRxBuff>
    238c:	ec 93       	st	X, r30
        connectedSensorSerialNums[nextIndex + 1] = *(serialNumPtr + 1);
    238e:	db 01       	movw	r26, r22
    2390:	ae 55       	subi	r26, 0x5E	; 94
    2392:	bb 4f       	sbci	r27, 0xFB	; 251
    2394:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <scabyCANRxBuff+0x1>
    2398:	8c 93       	st	X, r24
        connectedSensorSerialNums[nextIndex + 2] = *(serialNumPtr + 2);
    239a:	da 01       	movw	r26, r20
    239c:	ae 55       	subi	r26, 0x5E	; 94
    239e:	bb 4f       	sbci	r27, 0xFB	; 251
    23a0:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <scabyCANRxBuff+0x2>
    23a4:	8c 93       	st	X, r24
        connectedSensorSerialNums[nextIndex + 3] = *(serialNumPtr + 3);
    23a6:	d9 01       	movw	r26, r18
    23a8:	ae 55       	subi	r26, 0x5E	; 94
    23aa:	bb 4f       	sbci	r27, 0xFB	; 251
    23ac:	80 91 17 06 	lds	r24, 0x0617	; 0x800617 <scabyCANRxBuff+0x3>
    23b0:	8c 93       	st	X, r24

        connectedSensorCount++;
    23b2:	f0 93 a1 04 	sts	0x04A1, r31	; 0x8004a1 <connectedSensorCount>
    23b6:	98 ce       	rjmp	.-720    	; 0x20e8 <__vector_18+0xc2>
    23b8:	ec e0       	ldi	r30, 0x0C	; 12
    23ba:	f6 e0       	ldi	r31, 0x06	; 6
                    break;

                case CANID_WRITE_HW_PART_NUM_1:
                    for (byCtr = 0; byCtr < 8; byCtr++)
                    {
                        scabyCANEeBuff[byCtr] = CANMSG;
    23bc:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    23c0:	81 93       	st	Z+, r24
                    }
                    sceCANEeWriteState = EE_WRITE_HW_VER;              
                    break;

                case CANID_WRITE_HW_PART_NUM_1:
                    for (byCtr = 0; byCtr < 8; byCtr++)
    23c2:	2e 16       	cp	r2, r30
    23c4:	3f 06       	cpc	r3, r31
    23c6:	d1 f7       	brne	.-12     	; 0x23bc <__vector_18+0x396>
                    {
                        scabyCANEeBuff[byCtr] = CANMSG;
                    }
                    sceCANEeWriteState = EE_WRITE_HW_PART_NUM_1;
    23c8:	83 e0       	ldi	r24, 0x03	; 3
    23ca:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <sceCANEeWriteState>
                    break;
    23ce:	8c ce       	rjmp	.-744    	; 0x20e8 <__vector_18+0xc2>
                    break;

                 case CANID_ENABLE_DEBUG_DATA:
                    for (byCtr = 0; byCtr < 4; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    23d0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    23d4:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <scabyCANRxBuff>
    23d8:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    23dc:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <scabyCANRxBuff+0x1>
    23e0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    23e4:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <scabyCANRxBuff+0x2>
    23e8:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    23ec:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <scabyCANRxBuff+0x3>
    23f0:	e4 e1       	ldi	r30, 0x14	; 20
    23f2:	f6 e0       	ldi	r31, 0x06	; 6
    23f4:	a0 91 01 06 	lds	r26, 0x0601	; 0x800601 <serialNumPtr>
    23f8:	b0 91 02 06 	lds	r27, 0x0602	; 0x800602 <serialNumPtr+0x1>
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    23fc:	91 91       	ld	r25, Z+
    23fe:	8d 91       	ld	r24, X+
    2400:	98 13       	cpse	r25, r24
    2402:	72 ce       	rjmp	.-796    	; 0x20e8 <__vector_18+0xc2>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    2404:	ce 17       	cp	r28, r30
    2406:	df 07       	cpc	r29, r31
    2408:	c9 f7       	brne	.-14     	; 0x23fc <__vector_18+0x3d6>
                        scabyCANRxBuff[byCtr] = CANMSG;
                    }

                    if(compareSerialNums(scabyCANRxBuff, serialNumPtr))
                    {
                        setEnableDebugFlag();
    240a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <setEnableDebugFlag>
    240e:	6c ce       	rjmp	.-808    	; 0x20e8 <__vector_18+0xc2>
                    break;

                case CANID_DISABLE_DEBUG_DATA:
                    for (byCtr = 0; byCtr < 4; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    2410:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2414:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <scabyCANRxBuff>
    2418:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    241c:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <scabyCANRxBuff+0x1>
    2420:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2424:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <scabyCANRxBuff+0x2>
    2428:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    242c:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <scabyCANRxBuff+0x3>
    2430:	e4 e1       	ldi	r30, 0x14	; 20
    2432:	f6 e0       	ldi	r31, 0x06	; 6
    2434:	a0 91 01 06 	lds	r26, 0x0601	; 0x800601 <serialNumPtr>
    2438:	b0 91 02 06 	lds	r27, 0x0602	; 0x800602 <serialNumPtr+0x1>
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    243c:	91 91       	ld	r25, Z+
    243e:	8d 91       	ld	r24, X+
    2440:	98 13       	cpse	r25, r24
    2442:	52 ce       	rjmp	.-860    	; 0x20e8 <__vector_18+0xc2>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    2444:	ce 17       	cp	r28, r30
    2446:	df 07       	cpc	r29, r31
    2448:	c9 f7       	brne	.-14     	; 0x243c <__vector_18+0x416>
                        scabyCANRxBuff[byCtr] = CANMSG;
                    }

                    if(compareSerialNums(scabyCANRxBuff, serialNumPtr))
                    {
                        clearEnableDebugFlag();
    244a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <clearEnableDebugFlag>
    244e:	4c ce       	rjmp	.-872    	; 0x20e8 <__vector_18+0xc2>
    2450:	ec e0       	ldi	r30, 0x0C	; 12
    2452:	f6 e0       	ldi	r31, 0x06	; 6
                    break;
                
                case CANID_WRITE_HW_PART_NUM_2:
                    for (byCtr = 0; byCtr < 5; byCtr++)
                    {
                        scabyCANEeBuff[byCtr] = CANMSG;
    2454:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2458:	81 93       	st	Z+, r24
                    }
                    sceCANEeWriteState = EE_WRITE_HW_PART_NUM_1;
                    break;
                
                case CANID_WRITE_HW_PART_NUM_2:
                    for (byCtr = 0; byCtr < 5; byCtr++)
    245a:	ee 16       	cp	r14, r30
    245c:	ff 06       	cpc	r15, r31
    245e:	d1 f7       	brne	.-12     	; 0x2454 <__vector_18+0x42e>
                    {
                        scabyCANEeBuff[byCtr] = CANMSG;
                    }
                    sceCANEeWriteState = EE_WRITE_HW_PART_NUM_2;
    2460:	60 92 0b 06 	sts	0x060B, r6	; 0x80060b <sceCANEeWriteState>
                    break;
    2464:	41 ce       	rjmp	.-894    	; 0x20e8 <__vector_18+0xc2>
						{
							eeprom_busy_wait();
							eeprom_write_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC, 0x01);
							eeprom_busy_wait();
						}
                        jumpToBootloader();
    2466:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <jumpToBootloader>
    246a:	3e ce       	rjmp	.-900    	; 0x20e8 <__vector_18+0xc2>
{
    BYTE i;
    BYTE matchFound = 0;
    BYTE nextIndex;

    for(i = 0; i < connectedSensorCount; i++)
    246c:	f1 e0       	ldi	r31, 0x01	; 1
    246e:	23 e0       	ldi	r18, 0x03	; 3
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	42 e0       	ldi	r20, 0x02	; 2
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	61 e0       	ldi	r22, 0x01	; 1
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	81 cf       	rjmp	.-254    	; 0x2382 <__vector_18+0x35c>

00002480 <getCANTrafficDetected>:
// Returns flag that indicates whether any CAN
//  packets have been received since power-up.
BYTE getCANTrafficDetected(void)
{
    return CANTrafficDetected;
}
    2480:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <CANTrafficDetected>
    2484:	08 95       	ret

00002486 <resetConnectedSensors>:

// Clears counters associated with tracking
//  CAN bus-connected sensors.
void resetConnectedSensors(void)
{
    connectedSensorCount = 0;
    2486:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <connectedSensorCount>
    connectedSensorIndex = 0;
    248a:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <connectedSensorIndex>
    248e:	08 95       	ret

00002490 <sendNextTargetedDeviceInfoReq>:
// Sends a device info request to the next detected wired sensor
BYTE sendNextTargetedDeviceInfoReq(void)
{
    BYTE txCount = 0;
	
	if(connectedSensorIndex < connectedSensorCount)
    2490:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <connectedSensorIndex>
    2494:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <connectedSensorCount>
    2498:	92 17       	cp	r25, r18
    249a:	e8 f4       	brcc	.+58     	; 0x24d6 <sendNextTargetedDeviceInfoReq+0x46>
        // Note that wireless sensor's info is sent separately and is not included 
		//   in the connectedSensorIndex or connectedSensorCount

        for(txCount = 0; txCount < 2; txCount++)
		{
			sendCANGetDeviceInfoBySerial(&connectedSensorSerialNums[connectedSensorIndex * 4]);
    249c:	89 2f       	mov	r24, r25
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	8e 55       	subi	r24, 0x5E	; 94
    24aa:	9b 4f       	sbci	r25, 0xFB	; 251
    24ac:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sendCANGetDeviceInfoBySerial>
    24b0:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <connectedSensorIndex>
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	8e 55       	subi	r24, 0x5E	; 94
    24c0:	9b 4f       	sbci	r25, 0xFB	; 251
    24c2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sendCANGetDeviceInfoBySerial>
		}        
		connectedSensorIndex++;
    24c6:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <connectedSensorIndex>
    24ca:	91 e0       	ldi	r25, 0x01	; 1
    24cc:	98 0f       	add	r25, r24
    24ce:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <connectedSensorIndex>
    24d2:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <connectedSensorCount>
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	92 17       	cp	r25, r18
    24da:	08 f4       	brcc	.+2      	; 0x24de <sendNextTargetedDeviceInfoReq+0x4e>
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    24de:	08 95       	ret

000024e0 <resendLastTargetedDeviceInfoReq>:

void resendLastTargetedDeviceInfoReq(void)
{
	BYTE txCount = 0;
	
	if(connectedSensorIndex > 0)
    24e0:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <connectedSensorIndex>
    24e4:	88 23       	and	r24, r24
    24e6:	a1 f0       	breq	.+40     	; 0x2510 <resendLastTargetedDeviceInfoReq+0x30>
	{
        for(txCount = 0; txCount < 2; txCount++)
        {
	        sendCANGetDeviceInfoBySerial(&connectedSensorSerialNums[(connectedSensorIndex - 1) * 4]);
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	82 56       	subi	r24, 0x62	; 98
    24f4:	9b 4f       	sbci	r25, 0xFB	; 251
    24f6:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sendCANGetDeviceInfoBySerial>
    24fa:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <connectedSensorIndex>
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	82 56       	subi	r24, 0x62	; 98
    250a:	9b 4f       	sbci	r25, 0xFB	; 251
    250c:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <sendCANGetDeviceInfoBySerial>
    2510:	08 95       	ret

00002512 <getConnectedSensorCount>:
//  sensor modules as determined by a previous
//  ping request.
BYTE getConnectedSensorCount(void)
{
    return connectedSensorCount;
}
    2512:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <connectedSensorCount>
    2516:	08 95       	ret

00002518 <getCalStatusResponseCount>:
// Returns the number of calibration results
//  data packets received from the CAN bus. 
BYTE getCalStatusResponseCount(void)
{
    return calStatusResponseCount;
}
    2518:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <calStatusResponseCount>
    251c:	08 95       	ret

0000251e <clearCalStatusResponseCount>:

// Resets the calibration results counter and
//  corresponding results buffer index.
void clearCalStatusResponseCount(void)
{
    calStatusResponseCount = 0;
    251e:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <calStatusResponseCount>
    calStatusBufferIndex = 1; // Reserve the 1st byte for sensor count
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <calStatusBufferIndex>
    2528:	08 95       	ret

0000252a <copyCalStatusDataToTxBuffer>:
void copyCalStatusDataToTxBuffer(BYTE* newDataPtr)
{
    BYTE i;
    BYTE* txBufferPtr;

    txBufferPtr = (calStatusBufferPtr + calStatusBufferIndex);
    252a:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <calStatusBufferIndex>
    252e:	fc 01       	movw	r30, r24
    2530:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <calStatusBufferPtr>
    2534:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <calStatusBufferPtr+0x1>
    2538:	a4 0f       	add	r26, r20
    253a:	b1 1d       	adc	r27, r1
    253c:	9c 01       	movw	r18, r24
    253e:	29 5f       	subi	r18, 0xF9	; 249
    2540:	3f 4f       	sbci	r19, 0xFF	; 255

    for(i = 0; i < 7; i++)
    {
        *(txBufferPtr + i) = *(newDataPtr + i);
    2542:	81 91       	ld	r24, Z+
    2544:	8d 93       	st	X+, r24
    BYTE i;
    BYTE* txBufferPtr;

    txBufferPtr = (calStatusBufferPtr + calStatusBufferIndex);

    for(i = 0; i < 7; i++)
    2546:	e2 17       	cp	r30, r18
    2548:	f3 07       	cpc	r31, r19
    254a:	d9 f7       	brne	.-10     	; 0x2542 <copyCalStatusDataToTxBuffer+0x18>
    {
        *(txBufferPtr + i) = *(newDataPtr + i);
    }

    calStatusBufferIndex += 7;
    254c:	49 5f       	subi	r20, 0xF9	; 249
    254e:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <calStatusBufferIndex>
    2552:	08 95       	ret

00002554 <sendSensorCount>:
}

void sendSensorCount(BYTE count)
{
    2554:	cf 93       	push	r28
    2556:	c8 2f       	mov	r28, r24
	while (can_get_status(&scRandomCANTx) == CAN_STATUS_NOT_COMPLETED);
    2558:	8c e2       	ldi	r24, 0x2C	; 44
    255a:	96 e0       	ldi	r25, 0x06	; 6
    255c:	0e 94 4b 18 	call	0x3096	; 0x3096 <can_get_status>
    2560:	81 30       	cpi	r24, 0x01	; 1
    2562:	d1 f3       	breq	.-12     	; 0x2558 <sendSensorCount+0x4>

	// Fill the data bytes
	txCANMsgNonBlockageBuff[0] = count;
    2564:	c0 93 1c 06 	sts	0x061C, r28	; 0x80061c <txCANMsgNonBlockageBuff>

	scRandomCANTx.dlc = 1;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
	scRandomCANTx.id.std = 0x50;
    256e:	80 e5       	ldi	r24, 0x50	; 80
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    2576:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
	while (can_cmd(&scRandomCANTx) != CAN_CMD_ACCEPTED);
    257a:	8c e2       	ldi	r24, 0x2C	; 44
    257c:	96 e0       	ldi	r25, 0x06	; 6
    257e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <can_cmd>
    2582:	81 11       	cpse	r24, r1
    2584:	fa cf       	rjmp	.-12     	; 0x257a <sendSensorCount+0x26>
}
    2586:	cf 91       	pop	r28
    2588:	08 95       	ret

0000258a <stepEEUpdateTask>:
// Checks if a CAN request has been received
//  to write EEPROM data and executes the
//  write based on the state/data type.
void stepEEUpdateTask(void)
{	
	switch(sceCANEeWriteState)
    258a:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <sceCANEeWriteState>
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	f1 f0       	breq	.+60     	; 0x25ce <stepEEUpdateTask+0x44>
    2592:	a0 f0       	brcs	.+40     	; 0x25bc <stepEEUpdateTask+0x32>
    2594:	83 30       	cpi	r24, 0x03	; 3
    2596:	51 f0       	breq	.+20     	; 0x25ac <stepEEUpdateTask+0x22>
    2598:	84 30       	cpi	r24, 0x04	; 4
    259a:	01 f5       	brne	.+64     	; 0x25dc <stepEEUpdateTask+0x52>
            writeHwPartNumToEeprom(&scabyCANEeBuff[0], 0);
            sceCANEeWriteState = EE_NO_WRITE; 	// Reset flag
            break;

        case EE_WRITE_HW_PART_NUM_2:
            writeHwPartNumToEeprom(&scabyCANEeBuff[0], 1);
    259c:	61 e0       	ldi	r22, 0x01	; 1
    259e:	8c e0       	ldi	r24, 0x0C	; 12
    25a0:	96 e0       	ldi	r25, 0x06	; 6
    25a2:	0e 94 bc 1a 	call	0x3578	; 0x3578 <writeHwPartNumToEeprom>
            sceCANEeWriteState = EE_NO_WRITE; 	// Reset flag
    25a6:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <sceCANEeWriteState>
    25aa:	08 95       	ret
		    writeHwVersionToEeprom(&scabyCANEeBuff[0]);
		    sceCANEeWriteState = EE_NO_WRITE; 	// Reset flag
		    break;

        case EE_WRITE_HW_PART_NUM_1:
            writeHwPartNumToEeprom(&scabyCANEeBuff[0], 0);
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	8c e0       	ldi	r24, 0x0C	; 12
    25b0:	96 e0       	ldi	r25, 0x06	; 6
    25b2:	0e 94 bc 1a 	call	0x3578	; 0x3578 <writeHwPartNumToEeprom>
            sceCANEeWriteState = EE_NO_WRITE; 	// Reset flag
    25b6:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <sceCANEeWriteState>
            break;
    25ba:	08 95       	ret
// Checks if a CAN request has been received
//  to write EEPROM data and executes the
//  write based on the state/data type.
void stepEEUpdateTask(void)
{	
	switch(sceCANEeWriteState)
    25bc:	81 30       	cpi	r24, 0x01	; 1
    25be:	79 f4       	brne	.+30     	; 0x25de <stepEEUpdateTask+0x54>
	{
		case EE_NO_WRITE:
		    break;
		
		case EE_WRITE_SERIAL:
		    writeSerialNumToEeprom(&scabyCANEeBuff[0]);
    25c0:	8c e0       	ldi	r24, 0x0C	; 12
    25c2:	96 e0       	ldi	r25, 0x06	; 6
    25c4:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <writeSerialNumToEeprom>
		    sceCANEeWriteState = EE_NO_WRITE;	// Reset flag
    25c8:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <sceCANEeWriteState>
		    break;
    25cc:	08 95       	ret
		
		case EE_WRITE_HW_VER:
		    writeHwVersionToEeprom(&scabyCANEeBuff[0]);
    25ce:	8c e0       	ldi	r24, 0x0C	; 12
    25d0:	96 e0       	ldi	r25, 0x06	; 6
    25d2:	0e 94 9a 1a 	call	0x3534	; 0x3534 <writeHwVersionToEeprom>
		    sceCANEeWriteState = EE_NO_WRITE; 	// Reset flag
    25d6:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <sceCANEeWriteState>
		    break;
    25da:	08 95       	ret
    25dc:	08 95       	ret
    25de:	08 95       	ret

000025e0 <can_clear_all_mob>:
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
    25e2:	98 2f       	mov	r25, r24
    25e4:	92 95       	swap	r25
    25e6:	90 7f       	andi	r25, 0xF0	; 240
    25e8:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
        Can_clear_mob();                //! All MOb Registers=0
    25ec:	ee ee       	ldi	r30, 0xEE	; 238
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	11 92       	st	Z+, r1
    25f2:	e8 3f       	cpi	r30, 0xF8	; 248
    25f4:	f1 05       	cpc	r31, r1
    25f6:	e1 f7       	brne	.-8      	; 0x25f0 <can_clear_all_mob+0x10>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	86 30       	cpi	r24, 0x06	; 6
    25fc:	91 f7       	brne	.-28     	; 0x25e2 <can_clear_all_mob+0x2>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    25fe:	08 95       	ret

00002600 <can_get_mob_free>:
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    2600:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    2604:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(mob_number);
    2606:	98 2f       	mov	r25, r24
    2608:	92 95       	swap	r25
    260a:	90 7f       	andi	r25, 0xF0	; 240
    260c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    2610:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2614:	90 7c       	andi	r25, 0xC0	; 192
    2616:	39 f0       	breq	.+14     	; 0x2626 <can_get_mob_free+0x26>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    2618:	8f 5f       	subi	r24, 0xFF	; 255
    261a:	86 30       	cpi	r24, 0x06	; 6
    261c:	a1 f7       	brne	.-24     	; 0x2606 <can_get_mob_free+0x6>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    261e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    return (NO_MOB);
    2622:	8f ef       	ldi	r24, 0xFF	; 255
}
    2624:	08 95       	ret
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
        {
            CANPAGE = page_saved;
    2626:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
            return (mob_number);
    262a:	08 95       	ret

0000262c <can_get_mob_status>:
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    262c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2630:	80 7c       	andi	r24, 0xC0	; 192
    2632:	11 f4       	brne	.+4      	; 0x2638 <can_get_mob_status+0xc>
    2634:	8f ef       	ldi	r24, 0xFF	; 255
    mob_status = canstmob_copy & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR));
    if (mob_status != 0) {return(mob_status);}

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    2636:	08 95       	ret
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}

    canstmob_copy = CANSTMOB; // Copy for test integrity
    2638:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    263c:	98 2f       	mov	r25, r24
    263e:	90 7e       	andi	r25, 0xE0	; 224
    if (mob_status != 0) {return(mob_status);}
    2640:	d1 f3       	breq	.-12     	; 0x2636 <can_get_mob_status+0xa>
    2642:	89 2f       	mov	r24, r25
    2644:	08 95       	ret

00002646 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    2646:	bc 01       	movw	r22, r24
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    2648:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    264c:	8f 70       	andi	r24, 0x0F	; 15
    264e:	99 f0       	breq	.+38     	; 0x2676 <can_get_data+0x30>
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	50 e0       	ldi	r21, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
    2656:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    265a:	fb 01       	movw	r30, r22
    265c:	e4 0f       	add	r30, r20
    265e:	f5 1f       	adc	r31, r21
    2660:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    2662:	9f 5f       	subi	r25, 0xFF	; 255
    2664:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2668:	49 2f       	mov	r20, r25
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	2f 70       	andi	r18, 0x0F	; 15
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	42 17       	cp	r20, r18
    2672:	53 07       	cpc	r21, r19
    2674:	84 f3       	brlt	.-32     	; 0x2656 <can_get_data+0x10>
    2676:	08 95       	ret

00002678 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U16 mode)
{
    Can_reset();
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    Can_conf_bt();
    267e:	8e e0       	ldi	r24, 0x0E	; 14
    2680:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
    2684:	8c e0       	ldi	r24, 0x0C	; 12
    2686:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
    268a:	87 e3       	ldi	r24, 0x37	; 55
    268c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
    return 1;
}
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	08 95       	ret

00002694 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U16 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    2694:	0e 94 3c 13 	call	0x2678	; 0x2678 <can_fixed_baudrate>
    2698:	81 11       	cpse	r24, r1
    269a:	01 c0       	rjmp	.+2      	; 0x269e <can_init+0xa>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
    269c:	08 95       	ret
//!
//------------------------------------------------------------------------------
U8 can_init(U16 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    269e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
    26a2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    26a6:	82 60       	ori	r24, 0x02	; 2
    26a8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    return (1);
    26ac:	81 e0       	ldi	r24, 0x01	; 1
}
    26ae:	08 95       	ret

000026b0 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <can_cmd+0xa>
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <can_cmd+0xc>
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	fc 01       	movw	r30, r24
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
    26c2:	81 81       	ldd	r24, Z+1	; 0x01
    26c4:	8c 30       	cpi	r24, 0x0C	; 12
    26c6:	89 f1       	breq	.+98     	; 0x272a <can_cmd+0x7a>
    26c8:	8f 01       	movw	r16, r30
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
    26ca:	0e 94 00 13 	call	0x2600	; 0x2600 <can_get_mob_free>
    if (mob_handle!= NO_MOB)
    26ce:	8f 3f       	cpi	r24, 0xFF	; 255
    26d0:	f1 f0       	breq	.+60     	; 0x270e <can_cmd+0x5e>
    {
      cmd->status = MOB_PENDING; 
    26d2:	90 e6       	ldi	r25, 0x60	; 96
    26d4:	d8 01       	movw	r26, r16
    26d6:	19 96       	adiw	r26, 0x09	; 9
    26d8:	9c 93       	st	X, r25
    26da:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
    26dc:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
    26de:	82 95       	swap	r24
    26e0:	80 7f       	andi	r24, 0xF0	; 240
    26e2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
      Can_clear_mob();
    26e6:	ee ee       	ldi	r30, 0xEE	; 238
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	11 92       	st	Z+, r1
    26ec:	e8 3f       	cpi	r30, 0xF8	; 248
    26ee:	f1 05       	cpc	r31, r1
    26f0:	e1 f7       	brne	.-8      	; 0x26ea <can_cmd+0x3a>
          
      switch (cmd->cmd)
    26f2:	d8 01       	movw	r26, r16
    26f4:	11 96       	adiw	r26, 0x01	; 1
    26f6:	ec 91       	ld	r30, X
    26f8:	8e 2f       	mov	r24, r30
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	fc 01       	movw	r30, r24
    26fe:	31 97       	sbiw	r30, 0x01	; 1
    2700:	eb 30       	cpi	r30, 0x0B	; 11
    2702:	f1 05       	cpc	r31, r1
    2704:	28 f1       	brcs	.+74     	; 0x2750 <can_cmd+0xa0>
          Can_config_rx();       
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    2706:	f8 01       	movw	r30, r16
    2708:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    270a:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    270c:	05 c0       	rjmp	.+10     	; 0x2718 <can_cmd+0x68>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    270e:	8f e1       	ldi	r24, 0x1F	; 31
    2710:	d8 01       	movw	r26, r16
    2712:	19 96       	adiw	r26, 0x09	; 9
    2714:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    2716:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	08 95       	ret
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
  {
    if (cmd->status == MOB_PENDING)
    272a:	81 85       	ldd	r24, Z+9	; 0x09
    272c:	80 36       	cpi	r24, 0x60	; 96
    272e:	61 f7       	brne	.-40     	; 0x2708 <can_cmd+0x58>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
    2730:	80 81       	ld	r24, Z
    2732:	82 95       	swap	r24
    2734:	80 7f       	andi	r24, 0xF0	; 240
    2736:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
      Can_mob_abort();
    273a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    273e:	8f 73       	andi	r24, 0x3F	; 63
    2740:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
      Can_clear_status_mob();       // To be sure !
    2744:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
      cmd->handle = 0;
    2748:	10 82       	st	Z, r1
          Can_config_rx();       
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    274a:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	e4 cf       	rjmp	.-56     	; 0x2718 <can_cmd+0x68>
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
    2750:	eb 53       	subi	r30, 0x3B	; 59
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	0c 94 e2 1f 	jmp	0x3fc4	; 0x3fc4 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2758:	f8 01       	movw	r30, r16
    275a:	86 81       	ldd	r24, Z+6	; 0x06
    275c:	88 23       	and	r24, r24
    275e:	81 f0       	breq	.+32     	; 0x2780 <can_cmd+0xd0>
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	d8 01       	movw	r26, r16
    2764:	17 96       	adiw	r26, 0x07	; 7
    2766:	ed 91       	ld	r30, X+
    2768:	fc 91       	ld	r31, X
    276a:	18 97       	sbiw	r26, 0x08	; 8
    276c:	e8 0f       	add	r30, r24
    276e:	f1 1d       	adc	r31, r1
    2770:	90 81       	ld	r25, Z
    2772:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2776:	8f 5f       	subi	r24, 0xFF	; 255
    2778:	16 96       	adiw	r26, 0x06	; 6
    277a:	9c 91       	ld	r25, X
    277c:	89 17       	cp	r24, r25
    277e:	88 f3       	brcs	.-30     	; 0x2762 <can_cmd+0xb2>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    2780:	19 82       	std	Y+1, r1	; 0x01
    2782:	1a 82       	std	Y+2, r1	; 0x02
    2784:	1b 82       	std	Y+3, r1	; 0x03
    2786:	1c 82       	std	Y+4, r1	; 0x04
    2788:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	98 2f       	mov	r25, r24
    2790:	99 0f       	add	r25, r25
    2792:	99 0f       	add	r25, r25
    2794:	99 0f       	add	r25, r25
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	82 95       	swap	r24
    279a:	86 95       	lsr	r24
    279c:	87 70       	andi	r24, 0x07	; 7
    279e:	89 0f       	add	r24, r25
    27a0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	98 2f       	mov	r25, r24
    27a8:	99 0f       	add	r25, r25
    27aa:	99 0f       	add	r25, r25
    27ac:	99 0f       	add	r25, r25
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	82 95       	swap	r24
    27b2:	86 95       	lsr	r24
    27b4:	87 70       	andi	r24, 0x07	; 7
    27b6:	89 0f       	add	r24, r25
    27b8:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	88 0f       	add	r24, r24
    27c0:	88 0f       	add	r24, r24
    27c2:	88 0f       	add	r24, r24
    27c4:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    27c8:	d8 01       	movw	r26, r16
    27ca:	1a 96       	adiw	r26, 0x0a	; 10
    27cc:	8c 91       	ld	r24, X
    27ce:	1a 97       	sbiw	r26, 0x0a	; 10
    27d0:	81 60       	ori	r24, 0x01	; 1
    27d2:	1a 96       	adiw	r26, 0x0a	; 10
    27d4:	8c 93       	st	X, r24
    27d6:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    27da:	84 60       	ori	r24, 0x04	; 4
    27dc:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    27e0:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    27e4:	84 60       	ori	r24, 0x04	; 4
    27e6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_set_rplv();
    27ea:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    27ee:	80 62       	ori	r24, 0x20	; 32
    27f0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
    27f4:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    27f8:	8e 7f       	andi	r24, 0xFE	; 254
    27fa:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          Can_config_rx();       
    27fe:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2802:	8f 73       	andi	r24, 0x3F	; 63
    2804:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2808:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    280c:	80 68       	ori	r24, 0x80	; 128
    280e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    2812:	80 e0       	ldi	r24, 0x00	; 0
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    2814:	81 cf       	rjmp	.-254    	; 0x2718 <can_cmd+0x68>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2816:	d8 01       	movw	r26, r16
    2818:	1a 96       	adiw	r26, 0x0a	; 10
    281a:	8c 91       	ld	r24, X
    281c:	1a 97       	sbiw	r26, 0x0a	; 10
    281e:	81 ff       	sbrs	r24, 1
    2820:	b8 c3       	rjmp	.+1904   	; 0x2f92 <can_cmd+0x8e2>
    2822:	15 96       	adiw	r26, 0x05	; 5
    2824:	8c 91       	ld	r24, X
    2826:	15 97       	sbiw	r26, 0x05	; 5
    2828:	98 2f       	mov	r25, r24
    282a:	99 0f       	add	r25, r25
    282c:	99 0f       	add	r25, r25
    282e:	99 0f       	add	r25, r25
    2830:	14 96       	adiw	r26, 0x04	; 4
    2832:	8c 91       	ld	r24, X
    2834:	14 97       	sbiw	r26, 0x04	; 4
    2836:	82 95       	swap	r24
    2838:	86 95       	lsr	r24
    283a:	87 70       	andi	r24, 0x07	; 7
    283c:	89 0f       	add	r24, r25
    283e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2842:	14 96       	adiw	r26, 0x04	; 4
    2844:	8c 91       	ld	r24, X
    2846:	14 97       	sbiw	r26, 0x04	; 4
    2848:	98 2f       	mov	r25, r24
    284a:	99 0f       	add	r25, r25
    284c:	99 0f       	add	r25, r25
    284e:	99 0f       	add	r25, r25
    2850:	13 96       	adiw	r26, 0x03	; 3
    2852:	8c 91       	ld	r24, X
    2854:	13 97       	sbiw	r26, 0x03	; 3
    2856:	82 95       	swap	r24
    2858:	86 95       	lsr	r24
    285a:	87 70       	andi	r24, 0x07	; 7
    285c:	89 0f       	add	r24, r25
    285e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2862:	13 96       	adiw	r26, 0x03	; 3
    2864:	8c 91       	ld	r24, X
    2866:	13 97       	sbiw	r26, 0x03	; 3
    2868:	98 2f       	mov	r25, r24
    286a:	99 0f       	add	r25, r25
    286c:	99 0f       	add	r25, r25
    286e:	99 0f       	add	r25, r25
    2870:	12 96       	adiw	r26, 0x02	; 2
    2872:	8c 91       	ld	r24, X
    2874:	12 97       	sbiw	r26, 0x02	; 2
    2876:	82 95       	swap	r24
    2878:	86 95       	lsr	r24
    287a:	87 70       	andi	r24, 0x07	; 7
    287c:	89 0f       	add	r24, r25
    287e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2882:	12 96       	adiw	r26, 0x02	; 2
    2884:	8c 91       	ld	r24, X
    2886:	88 0f       	add	r24, r24
    2888:	88 0f       	add	r24, r24
    288a:	88 0f       	add	r24, r24
    288c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2890:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2894:	80 61       	ori	r24, 0x10	; 16
    2896:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	9f ef       	ldi	r25, 0xFF	; 255
    289e:	dc 01       	movw	r26, r24
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	ab 83       	std	Y+3, r26	; 0x03
    28a6:	bc 83       	std	Y+4, r27	; 0x04
    28a8:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	98 2f       	mov	r25, r24
    28b0:	99 0f       	add	r25, r25
    28b2:	99 0f       	add	r25, r25
    28b4:	99 0f       	add	r25, r25
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	82 95       	swap	r24
    28ba:	86 95       	lsr	r24
    28bc:	87 70       	andi	r24, 0x07	; 7
    28be:	89 0f       	add	r24, r25
    28c0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    28c4:	8a 81       	ldd	r24, Y+2	; 0x02
    28c6:	98 2f       	mov	r25, r24
    28c8:	99 0f       	add	r25, r25
    28ca:	99 0f       	add	r25, r25
    28cc:	99 0f       	add	r25, r25
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	82 95       	swap	r24
    28d2:	86 95       	lsr	r24
    28d4:	87 70       	andi	r24, 0x07	; 7
    28d6:	89 0f       	add	r24, r25
    28d8:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	88 0f       	add	r24, r24
    28e0:	88 0f       	add	r24, r24
    28e2:	88 0f       	add	r24, r24
    28e4:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    28e8:	f8 01       	movw	r30, r16
    28ea:	82 85       	ldd	r24, Z+10	; 0x0a
    28ec:	81 60       	ori	r24, 0x01	; 1
    28ee:	82 87       	std	Z+10, r24	; 0x0a
    28f0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    28f4:	84 60       	ori	r24, 0x04	; 4
    28f6:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    28fa:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    28fe:	84 60       	ori	r24, 0x04	; 4
    2900:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_clear_rplv();
    2904:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2908:	8f 7d       	andi	r24, 0xDF	; 223
    290a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          Can_set_idemsk();
    290e:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2912:	81 60       	ori	r24, 0x01	; 1
    2914:	72 cf       	rjmp	.-284    	; 0x27fa <can_cmd+0x14a>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2916:	d8 01       	movw	r26, r16
    2918:	1a 96       	adiw	r26, 0x0a	; 10
    291a:	8c 91       	ld	r24, X
    291c:	1a 97       	sbiw	r26, 0x0a	; 10
    291e:	81 ff       	sbrs	r24, 1
    2920:	58 c3       	rjmp	.+1712   	; 0x2fd2 <can_cmd+0x922>
    2922:	15 96       	adiw	r26, 0x05	; 5
    2924:	8c 91       	ld	r24, X
    2926:	15 97       	sbiw	r26, 0x05	; 5
    2928:	98 2f       	mov	r25, r24
    292a:	99 0f       	add	r25, r25
    292c:	99 0f       	add	r25, r25
    292e:	99 0f       	add	r25, r25
    2930:	14 96       	adiw	r26, 0x04	; 4
    2932:	8c 91       	ld	r24, X
    2934:	14 97       	sbiw	r26, 0x04	; 4
    2936:	82 95       	swap	r24
    2938:	86 95       	lsr	r24
    293a:	87 70       	andi	r24, 0x07	; 7
    293c:	89 0f       	add	r24, r25
    293e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2942:	14 96       	adiw	r26, 0x04	; 4
    2944:	8c 91       	ld	r24, X
    2946:	14 97       	sbiw	r26, 0x04	; 4
    2948:	98 2f       	mov	r25, r24
    294a:	99 0f       	add	r25, r25
    294c:	99 0f       	add	r25, r25
    294e:	99 0f       	add	r25, r25
    2950:	13 96       	adiw	r26, 0x03	; 3
    2952:	8c 91       	ld	r24, X
    2954:	13 97       	sbiw	r26, 0x03	; 3
    2956:	82 95       	swap	r24
    2958:	86 95       	lsr	r24
    295a:	87 70       	andi	r24, 0x07	; 7
    295c:	89 0f       	add	r24, r25
    295e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2962:	13 96       	adiw	r26, 0x03	; 3
    2964:	8c 91       	ld	r24, X
    2966:	13 97       	sbiw	r26, 0x03	; 3
    2968:	98 2f       	mov	r25, r24
    296a:	99 0f       	add	r25, r25
    296c:	99 0f       	add	r25, r25
    296e:	99 0f       	add	r25, r25
    2970:	12 96       	adiw	r26, 0x02	; 2
    2972:	8c 91       	ld	r24, X
    2974:	12 97       	sbiw	r26, 0x02	; 2
    2976:	82 95       	swap	r24
    2978:	86 95       	lsr	r24
    297a:	87 70       	andi	r24, 0x07	; 7
    297c:	89 0f       	add	r24, r25
    297e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2982:	12 96       	adiw	r26, 0x02	; 2
    2984:	8c 91       	ld	r24, X
    2986:	88 0f       	add	r24, r24
    2988:	88 0f       	add	r24, r24
    298a:	88 0f       	add	r24, r24
    298c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2990:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2994:	80 61       	ori	r24, 0x10	; 16
    2996:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    299a:	8f ef       	ldi	r24, 0xFF	; 255
    299c:	9f ef       	ldi	r25, 0xFF	; 255
    299e:	dc 01       	movw	r26, r24
    29a0:	89 83       	std	Y+1, r24	; 0x01
    29a2:	9a 83       	std	Y+2, r25	; 0x02
    29a4:	ab 83       	std	Y+3, r26	; 0x03
    29a6:	bc 83       	std	Y+4, r27	; 0x04
    29a8:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	98 2f       	mov	r25, r24
    29b0:	99 0f       	add	r25, r25
    29b2:	99 0f       	add	r25, r25
    29b4:	99 0f       	add	r25, r25
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	82 95       	swap	r24
    29ba:	86 95       	lsr	r24
    29bc:	87 70       	andi	r24, 0x07	; 7
    29be:	89 0f       	add	r24, r25
    29c0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	98 2f       	mov	r25, r24
    29c8:	99 0f       	add	r25, r25
    29ca:	99 0f       	add	r25, r25
    29cc:	99 0f       	add	r25, r25
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	82 95       	swap	r24
    29d2:	86 95       	lsr	r24
    29d4:	87 70       	andi	r24, 0x07	; 7
    29d6:	89 0f       	add	r24, r25
    29d8:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	88 0f       	add	r24, r24
    29e0:	88 0f       	add	r24, r24
    29e2:	88 0f       	add	r24, r24
    29e4:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    29e8:	f8 01       	movw	r30, r16
    29ea:	82 85       	ldd	r24, Z+10	; 0x0a
    29ec:	8e 7f       	andi	r24, 0xFE	; 254
    29ee:	82 87       	std	Z+10, r24	; 0x0a
    29f0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    29f4:	84 60       	ori	r24, 0x04	; 4
    29f6:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    29fa:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    29fe:	8b 7f       	andi	r24, 0xFB	; 251
    2a00:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_set_idemsk();
    2a04:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2a08:	81 60       	ori	r24, 0x01	; 1
    2a0a:	f7 ce       	rjmp	.-530    	; 0x27fa <can_cmd+0x14a>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	82 85       	ldd	r24, Z+10	; 0x0a
    2a10:	81 ff       	sbrs	r24, 1
    2a12:	a7 c2       	rjmp	.+1358   	; 0x2f62 <can_cmd+0x8b2>
    2a14:	85 81       	ldd	r24, Z+5	; 0x05
    2a16:	98 2f       	mov	r25, r24
    2a18:	99 0f       	add	r25, r25
    2a1a:	99 0f       	add	r25, r25
    2a1c:	99 0f       	add	r25, r25
    2a1e:	84 81       	ldd	r24, Z+4	; 0x04
    2a20:	82 95       	swap	r24
    2a22:	86 95       	lsr	r24
    2a24:	87 70       	andi	r24, 0x07	; 7
    2a26:	89 0f       	add	r24, r25
    2a28:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2a2c:	84 81       	ldd	r24, Z+4	; 0x04
    2a2e:	98 2f       	mov	r25, r24
    2a30:	99 0f       	add	r25, r25
    2a32:	99 0f       	add	r25, r25
    2a34:	99 0f       	add	r25, r25
    2a36:	83 81       	ldd	r24, Z+3	; 0x03
    2a38:	82 95       	swap	r24
    2a3a:	86 95       	lsr	r24
    2a3c:	87 70       	andi	r24, 0x07	; 7
    2a3e:	89 0f       	add	r24, r25
    2a40:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2a44:	83 81       	ldd	r24, Z+3	; 0x03
    2a46:	98 2f       	mov	r25, r24
    2a48:	99 0f       	add	r25, r25
    2a4a:	99 0f       	add	r25, r25
    2a4c:	99 0f       	add	r25, r25
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	82 95       	swap	r24
    2a52:	86 95       	lsr	r24
    2a54:	87 70       	andi	r24, 0x07	; 7
    2a56:	89 0f       	add	r24, r25
    2a58:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	88 0f       	add	r24, r24
    2a60:	88 0f       	add	r24, r24
    2a62:	88 0f       	add	r24, r24
    2a64:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2a68:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2a6c:	80 61       	ori	r24, 0x10	; 16
    2a6e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    2a72:	8f ef       	ldi	r24, 0xFF	; 255
    2a74:	9f ef       	ldi	r25, 0xFF	; 255
    2a76:	dc 01       	movw	r26, r24
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	ab 83       	std	Y+3, r26	; 0x03
    2a7e:	bc 83       	std	Y+4, r27	; 0x04
    2a80:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	98 2f       	mov	r25, r24
    2a88:	99 0f       	add	r25, r25
    2a8a:	99 0f       	add	r25, r25
    2a8c:	99 0f       	add	r25, r25
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	82 95       	swap	r24
    2a92:	86 95       	lsr	r24
    2a94:	87 70       	andi	r24, 0x07	; 7
    2a96:	89 0f       	add	r24, r25
    2a98:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    2a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	99 0f       	add	r25, r25
    2aa2:	99 0f       	add	r25, r25
    2aa4:	99 0f       	add	r25, r25
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	82 95       	swap	r24
    2aaa:	86 95       	lsr	r24
    2aac:	87 70       	andi	r24, 0x07	; 7
    2aae:	89 0f       	add	r24, r25
    2ab0:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	88 0f       	add	r24, r24
    2ab8:	88 0f       	add	r24, r24
    2aba:	88 0f       	add	r24, r24
    2abc:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          Can_clear_rtrmsk();
    2ac0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2ac4:	8b 7f       	andi	r24, 0xFB	; 251
    2ac6:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          Can_set_idemsk();
    2aca:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2ace:	81 60       	ori	r24, 0x01	; 1
    2ad0:	94 ce       	rjmp	.-728    	; 0x27fa <can_cmd+0x14a>
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2ad2:	f8 01       	movw	r30, r16
    2ad4:	82 85       	ldd	r24, Z+10	; 0x0a
    2ad6:	81 ff       	sbrs	r24, 1
    2ad8:	96 c2       	rjmp	.+1324   	; 0x3006 <can_cmd+0x956>
    2ada:	85 81       	ldd	r24, Z+5	; 0x05
    2adc:	98 2f       	mov	r25, r24
    2ade:	99 0f       	add	r25, r25
    2ae0:	99 0f       	add	r25, r25
    2ae2:	99 0f       	add	r25, r25
    2ae4:	84 81       	ldd	r24, Z+4	; 0x04
    2ae6:	82 95       	swap	r24
    2ae8:	86 95       	lsr	r24
    2aea:	87 70       	andi	r24, 0x07	; 7
    2aec:	89 0f       	add	r24, r25
    2aee:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2af2:	84 81       	ldd	r24, Z+4	; 0x04
    2af4:	98 2f       	mov	r25, r24
    2af6:	99 0f       	add	r25, r25
    2af8:	99 0f       	add	r25, r25
    2afa:	99 0f       	add	r25, r25
    2afc:	83 81       	ldd	r24, Z+3	; 0x03
    2afe:	82 95       	swap	r24
    2b00:	86 95       	lsr	r24
    2b02:	87 70       	andi	r24, 0x07	; 7
    2b04:	89 0f       	add	r24, r25
    2b06:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2b0a:	83 81       	ldd	r24, Z+3	; 0x03
    2b0c:	98 2f       	mov	r25, r24
    2b0e:	99 0f       	add	r25, r25
    2b10:	99 0f       	add	r25, r25
    2b12:	99 0f       	add	r25, r25
    2b14:	82 81       	ldd	r24, Z+2	; 0x02
    2b16:	82 95       	swap	r24
    2b18:	86 95       	lsr	r24
    2b1a:	87 70       	andi	r24, 0x07	; 7
    2b1c:	89 0f       	add	r24, r25
    2b1e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	88 0f       	add	r24, r24
    2b26:	88 0f       	add	r24, r24
    2b28:	88 0f       	add	r24, r24
    2b2a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2b2e:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2b32:	80 61       	ori	r24, 0x10	; 16
    2b34:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
    2b38:	d8 01       	movw	r26, r16
    2b3a:	1a 96       	adiw	r26, 0x0a	; 10
    2b3c:	8c 91       	ld	r24, X
    2b3e:	1a 97       	sbiw	r26, 0x0a	; 10
    2b40:	81 60       	ori	r24, 0x01	; 1
    2b42:	1a 96       	adiw	r26, 0x0a	; 10
    2b44:	8c 93       	st	X, r24
    2b46:	1a 97       	sbiw	r26, 0x0a	; 10
    2b48:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2b4c:	84 60       	ori	r24, 0x04	; 4
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          if(cmd->dlc > 8) cmd->dlc = 8;
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
    2b4e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_set_dlc(cmd->dlc);
    2b52:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2b56:	16 96       	adiw	r26, 0x06	; 6
    2b58:	8c 91       	ld	r24, X
    2b5a:	89 2b       	or	r24, r25
    2b5c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          Can_config_tx();
    2b60:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2b64:	8f 73       	andi	r24, 0x3F	; 63
    2b66:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2b6a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2b6e:	80 64       	ori	r24, 0x40	; 64
    2b70:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    2b74:	80 e0       	ldi	r24, 0x00	; 0
          if(cmd->dlc > 8) cmd->dlc = 8;
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
    2b76:	d0 cd       	rjmp	.-1120   	; 0x2718 <can_cmd+0x68>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    2b78:	19 82       	std	Y+1, r1	; 0x01
    2b7a:	1a 82       	std	Y+2, r1	; 0x02
    2b7c:	1b 82       	std	Y+3, r1	; 0x03
    2b7e:	1c 82       	std	Y+4, r1	; 0x04
    2b80:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	98 2f       	mov	r25, r24
    2b88:	99 0f       	add	r25, r25
    2b8a:	99 0f       	add	r25, r25
    2b8c:	99 0f       	add	r25, r25
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	82 95       	swap	r24
    2b92:	86 95       	lsr	r24
    2b94:	87 70       	andi	r24, 0x07	; 7
    2b96:	89 0f       	add	r24, r25
    2b98:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    2b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9e:	98 2f       	mov	r25, r24
    2ba0:	99 0f       	add	r25, r25
    2ba2:	99 0f       	add	r25, r25
    2ba4:	99 0f       	add	r25, r25
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	82 95       	swap	r24
    2baa:	86 95       	lsr	r24
    2bac:	87 70       	andi	r24, 0x07	; 7
    2bae:	89 0f       	add	r24, r25
    2bb0:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	88 0f       	add	r24, r24
    2bb8:	88 0f       	add	r24, r24
    2bba:	88 0f       	add	r24, r24
    2bbc:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    2bc0:	f8 01       	movw	r30, r16
    2bc2:	82 85       	ldd	r24, Z+10	; 0x0a
    2bc4:	8e 7f       	andi	r24, 0xFE	; 254
    2bc6:	82 87       	std	Z+10, r24	; 0x0a
    2bc8:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2bcc:	84 60       	ori	r24, 0x04	; 4
    2bce:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2bd2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2bd6:	8b 7f       	andi	r24, 0xFB	; 251
    2bd8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2bdc:	0b ce       	rjmp	.-1002   	; 0x27f4 <can_cmd+0x144>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2bde:	f8 01       	movw	r30, r16
    2be0:	82 85       	ldd	r24, Z+10	; 0x0a
    2be2:	81 ff       	sbrs	r24, 1
    2be4:	40 c2       	rjmp	.+1152   	; 0x3066 <can_cmd+0x9b6>
    2be6:	85 81       	ldd	r24, Z+5	; 0x05
    2be8:	98 2f       	mov	r25, r24
    2bea:	99 0f       	add	r25, r25
    2bec:	99 0f       	add	r25, r25
    2bee:	99 0f       	add	r25, r25
    2bf0:	84 81       	ldd	r24, Z+4	; 0x04
    2bf2:	82 95       	swap	r24
    2bf4:	86 95       	lsr	r24
    2bf6:	87 70       	andi	r24, 0x07	; 7
    2bf8:	89 0f       	add	r24, r25
    2bfa:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2bfe:	84 81       	ldd	r24, Z+4	; 0x04
    2c00:	98 2f       	mov	r25, r24
    2c02:	99 0f       	add	r25, r25
    2c04:	99 0f       	add	r25, r25
    2c06:	99 0f       	add	r25, r25
    2c08:	83 81       	ldd	r24, Z+3	; 0x03
    2c0a:	82 95       	swap	r24
    2c0c:	86 95       	lsr	r24
    2c0e:	87 70       	andi	r24, 0x07	; 7
    2c10:	89 0f       	add	r24, r25
    2c12:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2c16:	83 81       	ldd	r24, Z+3	; 0x03
    2c18:	98 2f       	mov	r25, r24
    2c1a:	99 0f       	add	r25, r25
    2c1c:	99 0f       	add	r25, r25
    2c1e:	99 0f       	add	r25, r25
    2c20:	82 81       	ldd	r24, Z+2	; 0x02
    2c22:	82 95       	swap	r24
    2c24:	86 95       	lsr	r24
    2c26:	87 70       	andi	r24, 0x07	; 7
    2c28:	89 0f       	add	r24, r25
    2c2a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2c2e:	82 81       	ldd	r24, Z+2	; 0x02
    2c30:	88 0f       	add	r24, r24
    2c32:	88 0f       	add	r24, r24
    2c34:	88 0f       	add	r24, r24
    2c36:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2c3a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2c3e:	80 61       	ori	r24, 0x10	; 16
    2c40:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2c44:	d8 01       	movw	r26, r16
    2c46:	16 96       	adiw	r26, 0x06	; 6
    2c48:	8c 91       	ld	r24, X
    2c4a:	88 23       	and	r24, r24
    2c4c:	81 f0       	breq	.+32     	; 0x2c6e <can_cmd+0x5be>
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	d8 01       	movw	r26, r16
    2c52:	17 96       	adiw	r26, 0x07	; 7
    2c54:	ed 91       	ld	r30, X+
    2c56:	fc 91       	ld	r31, X
    2c58:	18 97       	sbiw	r26, 0x08	; 8
    2c5a:	e8 0f       	add	r30, r24
    2c5c:	f1 1d       	adc	r31, r1
    2c5e:	90 81       	ld	r25, Z
    2c60:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2c64:	8f 5f       	subi	r24, 0xFF	; 255
    2c66:	16 96       	adiw	r26, 0x06	; 6
    2c68:	9c 91       	ld	r25, X
    2c6a:	89 17       	cp	r24, r25
    2c6c:	88 f3       	brcs	.-30     	; 0x2c50 <can_cmd+0x5a0>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
    2c6e:	f8 01       	movw	r30, r16
    2c70:	82 85       	ldd	r24, Z+10	; 0x0a
    2c72:	80 ff       	sbrs	r24, 0
    2c74:	a8 c1       	rjmp	.+848    	; 0x2fc6 <can_cmd+0x916>
    2c76:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2c7a:	84 60       	ori	r24, 0x04	; 4
    2c7c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
    2c80:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2c84:	f8 01       	movw	r30, r16
    2c86:	86 81       	ldd	r24, Z+6	; 0x06
    2c88:	68 cf       	rjmp	.-304    	; 0x2b5a <can_cmd+0x4aa>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	82 85       	ldd	r24, Z+10	; 0x0a
    2c8e:	81 ff       	sbrs	r24, 1
    2c90:	d2 c1       	rjmp	.+932    	; 0x3036 <can_cmd+0x986>
    2c92:	85 81       	ldd	r24, Z+5	; 0x05
    2c94:	98 2f       	mov	r25, r24
    2c96:	99 0f       	add	r25, r25
    2c98:	99 0f       	add	r25, r25
    2c9a:	99 0f       	add	r25, r25
    2c9c:	84 81       	ldd	r24, Z+4	; 0x04
    2c9e:	82 95       	swap	r24
    2ca0:	86 95       	lsr	r24
    2ca2:	87 70       	andi	r24, 0x07	; 7
    2ca4:	89 0f       	add	r24, r25
    2ca6:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2caa:	84 81       	ldd	r24, Z+4	; 0x04
    2cac:	98 2f       	mov	r25, r24
    2cae:	99 0f       	add	r25, r25
    2cb0:	99 0f       	add	r25, r25
    2cb2:	99 0f       	add	r25, r25
    2cb4:	83 81       	ldd	r24, Z+3	; 0x03
    2cb6:	82 95       	swap	r24
    2cb8:	86 95       	lsr	r24
    2cba:	87 70       	andi	r24, 0x07	; 7
    2cbc:	89 0f       	add	r24, r25
    2cbe:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2cc2:	83 81       	ldd	r24, Z+3	; 0x03
    2cc4:	98 2f       	mov	r25, r24
    2cc6:	99 0f       	add	r25, r25
    2cc8:	99 0f       	add	r25, r25
    2cca:	99 0f       	add	r25, r25
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	82 95       	swap	r24
    2cd0:	86 95       	lsr	r24
    2cd2:	87 70       	andi	r24, 0x07	; 7
    2cd4:	89 0f       	add	r24, r25
    2cd6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	88 0f       	add	r24, r24
    2cde:	88 0f       	add	r24, r24
    2ce0:	88 0f       	add	r24, r24
    2ce2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2ce6:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2cea:	80 61       	ori	r24, 0x10	; 16
    2cec:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2cf0:	d8 01       	movw	r26, r16
    2cf2:	16 96       	adiw	r26, 0x06	; 6
    2cf4:	8c 91       	ld	r24, X
    2cf6:	88 23       	and	r24, r24
    2cf8:	81 f0       	breq	.+32     	; 0x2d1a <can_cmd+0x66a>
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	d8 01       	movw	r26, r16
    2cfe:	17 96       	adiw	r26, 0x07	; 7
    2d00:	ed 91       	ld	r30, X+
    2d02:	fc 91       	ld	r31, X
    2d04:	18 97       	sbiw	r26, 0x08	; 8
    2d06:	e8 0f       	add	r30, r24
    2d08:	f1 1d       	adc	r31, r1
    2d0a:	90 81       	ld	r25, Z
    2d0c:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2d10:	8f 5f       	subi	r24, 0xFF	; 255
    2d12:	16 96       	adiw	r26, 0x06	; 6
    2d14:	9c 91       	ld	r25, X
    2d16:	89 17       	cp	r24, r25
    2d18:	88 f3       	brcs	.-30     	; 0x2cfc <can_cmd+0x64c>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    2d1a:	8f ef       	ldi	r24, 0xFF	; 255
    2d1c:	9f ef       	ldi	r25, 0xFF	; 255
    2d1e:	dc 01       	movw	r26, r24
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	9a 83       	std	Y+2, r25	; 0x02
    2d24:	ab 83       	std	Y+3, r26	; 0x03
    2d26:	bc 83       	std	Y+4, r27	; 0x04
    2d28:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	98 2f       	mov	r25, r24
    2d30:	99 0f       	add	r25, r25
    2d32:	99 0f       	add	r25, r25
    2d34:	99 0f       	add	r25, r25
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	82 95       	swap	r24
    2d3a:	86 95       	lsr	r24
    2d3c:	87 70       	andi	r24, 0x07	; 7
    2d3e:	89 0f       	add	r24, r25
    2d40:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	98 2f       	mov	r25, r24
    2d48:	99 0f       	add	r25, r25
    2d4a:	99 0f       	add	r25, r25
    2d4c:	99 0f       	add	r25, r25
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	82 95       	swap	r24
    2d52:	86 95       	lsr	r24
    2d54:	87 70       	andi	r24, 0x07	; 7
    2d56:	89 0f       	add	r24, r25
    2d58:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	88 0f       	add	r24, r24
    2d60:	88 0f       	add	r24, r24
    2d62:	88 0f       	add	r24, r24
    2d64:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    2d68:	f8 01       	movw	r30, r16
    2d6a:	82 85       	ldd	r24, Z+10	; 0x0a
    2d6c:	81 60       	ori	r24, 0x01	; 1
    2d6e:	82 87       	std	Z+10, r24	; 0x0a
    2d70:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2d74:	84 60       	ori	r24, 0x04	; 4
    2d76:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2d7a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2d7e:	84 60       	ori	r24, 0x04	; 4
    2d80:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_set_rplv();
    2d84:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2d88:	80 62       	ori	r24, 0x20	; 32
    2d8a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          Can_set_idemsk();
    2d8e:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2d92:	81 60       	ori	r24, 0x01	; 1
    2d94:	32 cd       	rjmp	.-1436   	; 0x27fa <can_cmd+0x14a>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    2d96:	19 82       	std	Y+1, r1	; 0x01
    2d98:	1a 82       	std	Y+2, r1	; 0x02
    2d9a:	1b 82       	std	Y+3, r1	; 0x03
    2d9c:	1c 82       	std	Y+4, r1	; 0x04
    2d9e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    2da2:	8b 81       	ldd	r24, Y+3	; 0x03
    2da4:	98 2f       	mov	r25, r24
    2da6:	99 0f       	add	r25, r25
    2da8:	99 0f       	add	r25, r25
    2daa:	99 0f       	add	r25, r25
    2dac:	8a 81       	ldd	r24, Y+2	; 0x02
    2dae:	82 95       	swap	r24
    2db0:	86 95       	lsr	r24
    2db2:	87 70       	andi	r24, 0x07	; 7
    2db4:	89 0f       	add	r24, r25
    2db6:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	98 2f       	mov	r25, r24
    2dbe:	99 0f       	add	r25, r25
    2dc0:	99 0f       	add	r25, r25
    2dc2:	99 0f       	add	r25, r25
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	82 95       	swap	r24
    2dc8:	86 95       	lsr	r24
    2dca:	87 70       	andi	r24, 0x07	; 7
    2dcc:	89 0f       	add	r24, r25
    2dce:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	88 0f       	add	r24, r24
    2dd6:	88 0f       	add	r24, r24
    2dd8:	88 0f       	add	r24, r24
    2dda:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    2dde:	d8 01       	movw	r26, r16
    2de0:	1a 96       	adiw	r26, 0x0a	; 10
    2de2:	8c 91       	ld	r24, X
    2de4:	1a 97       	sbiw	r26, 0x0a	; 10
    2de6:	81 60       	ori	r24, 0x01	; 1
    2de8:	1a 96       	adiw	r26, 0x0a	; 10
    2dea:	8c 93       	st	X, r24
    2dec:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2df0:	84 60       	ori	r24, 0x04	; 4
    2df2:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2df6:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2dfa:	84 60       	ori	r24, 0x04	; 4
    2dfc:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_clear_rplv();
    2e00:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2e04:	8f 7d       	andi	r24, 0xDF	; 223
    2e06:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2e0a:	f4 cc       	rjmp	.-1560   	; 0x27f4 <can_cmd+0x144>
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    2e0c:	19 82       	std	Y+1, r1	; 0x01
    2e0e:	1a 82       	std	Y+2, r1	; 0x02
    2e10:	1b 82       	std	Y+3, r1	; 0x03
    2e12:	1c 82       	std	Y+4, r1	; 0x04
    2e14:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	98 2f       	mov	r25, r24
    2e1c:	99 0f       	add	r25, r25
    2e1e:	99 0f       	add	r25, r25
    2e20:	99 0f       	add	r25, r25
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	82 95       	swap	r24
    2e26:	86 95       	lsr	r24
    2e28:	87 70       	andi	r24, 0x07	; 7
    2e2a:	89 0f       	add	r24, r25
    2e2c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	98 2f       	mov	r25, r24
    2e34:	99 0f       	add	r25, r25
    2e36:	99 0f       	add	r25, r25
    2e38:	99 0f       	add	r25, r25
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	82 95       	swap	r24
    2e3e:	86 95       	lsr	r24
    2e40:	87 70       	andi	r24, 0x07	; 7
    2e42:	89 0f       	add	r24, r25
    2e44:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	88 0f       	add	r24, r24
    2e4c:	88 0f       	add	r24, r24
    2e4e:	88 0f       	add	r24, r24
    2e50:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          Can_clear_rtrmsk();
    2e54:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2e58:	8b 7f       	andi	r24, 0xFB	; 251
    2e5a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2e5e:	ca cc       	rjmp	.-1644   	; 0x27f4 <can_cmd+0x144>
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2e60:	d8 01       	movw	r26, r16
    2e62:	1a 96       	adiw	r26, 0x0a	; 10
    2e64:	8c 91       	ld	r24, X
    2e66:	1a 97       	sbiw	r26, 0x0a	; 10
    2e68:	81 ff       	sbrs	r24, 1
    2e6a:	61 c0       	rjmp	.+194    	; 0x2f2e <can_cmd+0x87e>
    2e6c:	15 96       	adiw	r26, 0x05	; 5
    2e6e:	8c 91       	ld	r24, X
    2e70:	15 97       	sbiw	r26, 0x05	; 5
    2e72:	98 2f       	mov	r25, r24
    2e74:	99 0f       	add	r25, r25
    2e76:	99 0f       	add	r25, r25
    2e78:	99 0f       	add	r25, r25
    2e7a:	14 96       	adiw	r26, 0x04	; 4
    2e7c:	8c 91       	ld	r24, X
    2e7e:	14 97       	sbiw	r26, 0x04	; 4
    2e80:	82 95       	swap	r24
    2e82:	86 95       	lsr	r24
    2e84:	87 70       	andi	r24, 0x07	; 7
    2e86:	89 0f       	add	r24, r25
    2e88:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2e8c:	14 96       	adiw	r26, 0x04	; 4
    2e8e:	8c 91       	ld	r24, X
    2e90:	14 97       	sbiw	r26, 0x04	; 4
    2e92:	98 2f       	mov	r25, r24
    2e94:	99 0f       	add	r25, r25
    2e96:	99 0f       	add	r25, r25
    2e98:	99 0f       	add	r25, r25
    2e9a:	13 96       	adiw	r26, 0x03	; 3
    2e9c:	8c 91       	ld	r24, X
    2e9e:	13 97       	sbiw	r26, 0x03	; 3
    2ea0:	82 95       	swap	r24
    2ea2:	86 95       	lsr	r24
    2ea4:	87 70       	andi	r24, 0x07	; 7
    2ea6:	89 0f       	add	r24, r25
    2ea8:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2eac:	13 96       	adiw	r26, 0x03	; 3
    2eae:	8c 91       	ld	r24, X
    2eb0:	13 97       	sbiw	r26, 0x03	; 3
    2eb2:	98 2f       	mov	r25, r24
    2eb4:	99 0f       	add	r25, r25
    2eb6:	99 0f       	add	r25, r25
    2eb8:	99 0f       	add	r25, r25
    2eba:	12 96       	adiw	r26, 0x02	; 2
    2ebc:	8c 91       	ld	r24, X
    2ebe:	12 97       	sbiw	r26, 0x02	; 2
    2ec0:	82 95       	swap	r24
    2ec2:	86 95       	lsr	r24
    2ec4:	87 70       	andi	r24, 0x07	; 7
    2ec6:	89 0f       	add	r24, r25
    2ec8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2ecc:	12 96       	adiw	r26, 0x02	; 2
    2ece:	8c 91       	ld	r24, X
    2ed0:	88 0f       	add	r24, r24
    2ed2:	88 0f       	add	r24, r24
    2ed4:	88 0f       	add	r24, r24
    2ed6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2eda:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2ede:	80 61       	ori	r24, 0x10	; 16
    2ee0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          if(cmd->dlc > 8) cmd->dlc = 8;
    2ee4:	f8 01       	movw	r30, r16
    2ee6:	86 81       	ldd	r24, Z+6	; 0x06
    2ee8:	89 30       	cpi	r24, 0x09	; 9
    2eea:	f0 f0       	brcs	.+60     	; 0x2f28 <can_cmd+0x878>
    2eec:	88 e0       	ldi	r24, 0x08	; 8
    2eee:	86 83       	std	Z+6, r24	; 0x06
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          if(cmd->dlc > 8) cmd->dlc = 8;
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2ef2:	d8 01       	movw	r26, r16
    2ef4:	17 96       	adiw	r26, 0x07	; 7
    2ef6:	ed 91       	ld	r30, X+
    2ef8:	fc 91       	ld	r31, X
    2efa:	18 97       	sbiw	r26, 0x08	; 8
    2efc:	e8 0f       	add	r30, r24
    2efe:	f1 1d       	adc	r31, r1
    2f00:	90 81       	ld	r25, Z
    2f02:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2f06:	8f 5f       	subi	r24, 0xFF	; 255
    2f08:	16 96       	adiw	r26, 0x06	; 6
    2f0a:	9c 91       	ld	r25, X
    2f0c:	89 17       	cp	r24, r25
    2f0e:	88 f3       	brcs	.-30     	; 0x2ef2 <can_cmd+0x842>
          cmd->ctrl.rtr=0; Can_clear_rtr();
    2f10:	d8 01       	movw	r26, r16
    2f12:	1a 96       	adiw	r26, 0x0a	; 10
    2f14:	8c 91       	ld	r24, X
    2f16:	1a 97       	sbiw	r26, 0x0a	; 10
    2f18:	8e 7f       	andi	r24, 0xFE	; 254
    2f1a:	1a 96       	adiw	r26, 0x0a	; 10
    2f1c:	8c 93       	st	X, r24
    2f1e:	1a 97       	sbiw	r26, 0x0a	; 10
    2f20:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2f24:	8b 7f       	andi	r24, 0xFB	; 251
    2f26:	13 ce       	rjmp	.-986    	; 0x2b4e <can_cmd+0x49e>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          if(cmd->dlc > 8) cmd->dlc = 8;
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2f28:	81 11       	cpse	r24, r1
    2f2a:	e2 cf       	rjmp	.-60     	; 0x2ef0 <can_cmd+0x840>
    2f2c:	f1 cf       	rjmp	.-30     	; 0x2f10 <can_cmd+0x860>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    2f2e:	f8 01       	movw	r30, r16
    2f30:	93 81       	ldd	r25, Z+3	; 0x03
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	86 95       	lsr	r24
    2f36:	86 95       	lsr	r24
    2f38:	86 95       	lsr	r24
    2f3a:	f0 e2       	ldi	r31, 0x20	; 32
    2f3c:	9f 9f       	mul	r25, r31
    2f3e:	80 0d       	add	r24, r0
    2f40:	11 24       	eor	r1, r1
    2f42:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2f46:	d8 01       	movw	r26, r16
    2f48:	12 96       	adiw	r26, 0x02	; 2
    2f4a:	8c 91       	ld	r24, X
    2f4c:	82 95       	swap	r24
    2f4e:	88 0f       	add	r24, r24
    2f50:	80 7e       	andi	r24, 0xE0	; 224
    2f52:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2f56:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2f5a:	8f 7e       	andi	r24, 0xEF	; 239
    2f5c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2f60:	c1 cf       	rjmp	.-126    	; 0x2ee4 <can_cmd+0x834>
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    2f62:	93 81       	ldd	r25, Z+3	; 0x03
    2f64:	82 81       	ldd	r24, Z+2	; 0x02
    2f66:	86 95       	lsr	r24
    2f68:	86 95       	lsr	r24
    2f6a:	86 95       	lsr	r24
    2f6c:	b0 e2       	ldi	r27, 0x20	; 32
    2f6e:	9b 9f       	mul	r25, r27
    2f70:	80 0d       	add	r24, r0
    2f72:	11 24       	eor	r1, r1
    2f74:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2f78:	f8 01       	movw	r30, r16
    2f7a:	82 81       	ldd	r24, Z+2	; 0x02
    2f7c:	82 95       	swap	r24
    2f7e:	88 0f       	add	r24, r24
    2f80:	80 7e       	andi	r24, 0xE0	; 224
    2f82:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2f86:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2f8a:	8f 7e       	andi	r24, 0xEF	; 239
    2f8c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2f90:	70 cd       	rjmp	.-1312   	; 0x2a72 <can_cmd+0x3c2>
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    2f92:	f8 01       	movw	r30, r16
    2f94:	93 81       	ldd	r25, Z+3	; 0x03
    2f96:	82 81       	ldd	r24, Z+2	; 0x02
    2f98:	86 95       	lsr	r24
    2f9a:	86 95       	lsr	r24
    2f9c:	86 95       	lsr	r24
    2f9e:	f0 e2       	ldi	r31, 0x20	; 32
    2fa0:	9f 9f       	mul	r25, r31
    2fa2:	80 0d       	add	r24, r0
    2fa4:	11 24       	eor	r1, r1
    2fa6:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2faa:	d8 01       	movw	r26, r16
    2fac:	12 96       	adiw	r26, 0x02	; 2
    2fae:	8c 91       	ld	r24, X
    2fb0:	82 95       	swap	r24
    2fb2:	88 0f       	add	r24, r24
    2fb4:	80 7e       	andi	r24, 0xE0	; 224
    2fb6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2fba:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2fbe:	8f 7e       	andi	r24, 0xEF	; 239
    2fc0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2fc4:	6a cc       	rjmp	.-1836   	; 0x289a <can_cmd+0x1ea>
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
    2fc6:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2fca:	8b 7f       	andi	r24, 0xFB	; 251
    2fcc:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2fd0:	57 ce       	rjmp	.-850    	; 0x2c80 <can_cmd+0x5d0>
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    2fd2:	f8 01       	movw	r30, r16
    2fd4:	93 81       	ldd	r25, Z+3	; 0x03
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	86 95       	lsr	r24
    2fda:	86 95       	lsr	r24
    2fdc:	86 95       	lsr	r24
    2fde:	f0 e2       	ldi	r31, 0x20	; 32
    2fe0:	9f 9f       	mul	r25, r31
    2fe2:	80 0d       	add	r24, r0
    2fe4:	11 24       	eor	r1, r1
    2fe6:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2fea:	d8 01       	movw	r26, r16
    2fec:	12 96       	adiw	r26, 0x02	; 2
    2fee:	8c 91       	ld	r24, X
    2ff0:	82 95       	swap	r24
    2ff2:	88 0f       	add	r24, r24
    2ff4:	80 7e       	andi	r24, 0xE0	; 224
    2ff6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2ffa:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2ffe:	8f 7e       	andi	r24, 0xEF	; 239
    3000:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3004:	ca cc       	rjmp	.-1644   	; 0x299a <can_cmd+0x2ea>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    3006:	93 81       	ldd	r25, Z+3	; 0x03
    3008:	82 81       	ldd	r24, Z+2	; 0x02
    300a:	86 95       	lsr	r24
    300c:	86 95       	lsr	r24
    300e:	86 95       	lsr	r24
    3010:	b0 e2       	ldi	r27, 0x20	; 32
    3012:	9b 9f       	mul	r25, r27
    3014:	80 0d       	add	r24, r0
    3016:	11 24       	eor	r1, r1
    3018:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    301c:	f8 01       	movw	r30, r16
    301e:	82 81       	ldd	r24, Z+2	; 0x02
    3020:	82 95       	swap	r24
    3022:	88 0f       	add	r24, r24
    3024:	80 7e       	andi	r24, 0xE0	; 224
    3026:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    302a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    302e:	8f 7e       	andi	r24, 0xEF	; 239
    3030:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3034:	81 cd       	rjmp	.-1278   	; 0x2b38 <can_cmd+0x488>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	82 81       	ldd	r24, Z+2	; 0x02
    303a:	86 95       	lsr	r24
    303c:	86 95       	lsr	r24
    303e:	86 95       	lsr	r24
    3040:	b0 e2       	ldi	r27, 0x20	; 32
    3042:	9b 9f       	mul	r25, r27
    3044:	80 0d       	add	r24, r0
    3046:	11 24       	eor	r1, r1
    3048:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    304c:	f8 01       	movw	r30, r16
    304e:	82 81       	ldd	r24, Z+2	; 0x02
    3050:	82 95       	swap	r24
    3052:	88 0f       	add	r24, r24
    3054:	80 7e       	andi	r24, 0xE0	; 224
    3056:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    305a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    305e:	8f 7e       	andi	r24, 0xEF	; 239
    3060:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3064:	45 ce       	rjmp	.-886    	; 0x2cf0 <can_cmd+0x640>
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    3066:	93 81       	ldd	r25, Z+3	; 0x03
    3068:	82 81       	ldd	r24, Z+2	; 0x02
    306a:	86 95       	lsr	r24
    306c:	86 95       	lsr	r24
    306e:	86 95       	lsr	r24
    3070:	b0 e2       	ldi	r27, 0x20	; 32
    3072:	9b 9f       	mul	r25, r27
    3074:	80 0d       	add	r24, r0
    3076:	11 24       	eor	r1, r1
    3078:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    307c:	f8 01       	movw	r30, r16
    307e:	82 81       	ldd	r24, Z+2	; 0x02
    3080:	82 95       	swap	r24
    3082:	88 0f       	add	r24, r24
    3084:	80 7e       	andi	r24, 0xE0	; 224
    3086:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    308a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    308e:	8f 7e       	andi	r24, 0xEF	; 239
    3090:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3094:	d7 cd       	rjmp	.-1106   	; 0x2c44 <can_cmd+0x594>

00003096 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    3096:	1f 93       	push	r17
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	fc 01       	movw	r30, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    309e:	91 85       	ldd	r25, Z+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    30a0:	91 11       	cpse	r25, r1
    30a2:	05 c0       	rjmp	.+10     	; 0x30ae <can_get_status+0x18>
    {
        return CAN_STATUS_ERROR;
    30a4:	82 e0       	ldi	r24, 0x02	; 2
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    30a6:	df 91       	pop	r29
    30a8:	cf 91       	pop	r28
    30aa:	1f 91       	pop	r17
    30ac:	08 95       	ret
U8 can_get_status (st_cmd_t* cmd)
{
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    30ae:	9f 31       	cpi	r25, 0x1F	; 31
    30b0:	c9 f3       	breq	.-14     	; 0x30a4 <can_get_status+0xe>
    30b2:	9f 3f       	cpi	r25, 0xFF	; 255
    30b4:	b9 f3       	breq	.-18     	; 0x30a4 <can_get_status+0xe>
    30b6:	ef 01       	movw	r28, r30
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    30b8:	80 81       	ld	r24, Z
    30ba:	82 95       	swap	r24
    30bc:	80 7f       	andi	r24, 0xF0	; 240
    30be:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    a_status = can_get_mob_status();
    30c2:	0e 94 16 13 	call	0x262c	; 0x262c <can_get_mob_status>
    30c6:	18 2f       	mov	r17, r24
    
    switch (a_status)
    30c8:	80 32       	cpi	r24, 0x20	; 32
    30ca:	41 f0       	breq	.+16     	; 0x30dc <can_get_status+0x46>
    30cc:	08 f4       	brcc	.+2      	; 0x30d0 <can_get_status+0x3a>
    30ce:	51 c0       	rjmp	.+162    	; 0x3172 <can_get_status+0xdc>
    30d0:	80 34       	cpi	r24, 0x40	; 64
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <can_get_status+0x40>
    30d4:	44 c0       	rjmp	.+136    	; 0x315e <can_get_status+0xc8>
    30d6:	80 3a       	cpi	r24, 0xA0	; 160
    30d8:	09 f0       	breq	.+2      	; 0x30dc <can_get_status+0x46>
    30da:	4f c0       	rjmp	.+158    	; 0x317a <can_get_status+0xe4>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    30dc:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    30e0:	8f 70       	andi	r24, 0x0F	; 15
    30e2:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
    30e4:	8f 81       	ldd	r24, Y+7	; 0x07
    30e6:	98 85       	ldd	r25, Y+8	; 0x08
    30e8:	0e 94 23 13 	call	0x2646	; 0x2646 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    30ec:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    30f0:	92 fb       	bst	r25, 2
    30f2:	99 27       	eor	r25, r25
    30f4:	90 f9       	bld	r25, 0
    30f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30f8:	90 fb       	bst	r25, 0
    30fa:	80 f9       	bld	r24, 0
    30fc:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    30fe:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3102:	94 ff       	sbrs	r25, 4
    3104:	44 c0       	rjmp	.+136    	; 0x318e <can_get_status+0xf8>
            {
                cmd->ctrl.ide = 1; // extended frame
    3106:	82 60       	ori	r24, 0x02	; 2
    3108:	8a 87       	std	Y+10, r24	; 0x0a
                Can_get_ext_id(cmd->id.ext);
    310a:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    310e:	86 95       	lsr	r24
    3110:	86 95       	lsr	r24
    3112:	86 95       	lsr	r24
    3114:	8d 83       	std	Y+5, r24	; 0x05
    3116:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    311a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    311e:	86 95       	lsr	r24
    3120:	86 95       	lsr	r24
    3122:	86 95       	lsr	r24
    3124:	20 e2       	ldi	r18, 0x20	; 32
    3126:	92 9f       	mul	r25, r18
    3128:	80 0d       	add	r24, r0
    312a:	11 24       	eor	r1, r1
    312c:	8c 83       	std	Y+4, r24	; 0x04
    312e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    3132:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    3136:	86 95       	lsr	r24
    3138:	86 95       	lsr	r24
    313a:	86 95       	lsr	r24
    313c:	20 e2       	ldi	r18, 0x20	; 32
    313e:	92 9f       	mul	r25, r18
    3140:	80 0d       	add	r24, r0
    3142:	11 24       	eor	r1, r1
    3144:	8b 83       	std	Y+3, r24	; 0x03
    3146:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    314a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    314e:	86 95       	lsr	r24
    3150:	86 95       	lsr	r24
    3152:	86 95       	lsr	r24
    3154:	20 e2       	ldi	r18, 0x20	; 32
    3156:	92 9f       	mul	r25, r18
    3158:	80 0d       	add	r24, r0
    315a:	11 24       	eor	r1, r1
    315c:	8a 83       	std	Y+2, r24	; 0x02
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    315e:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    3160:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3164:	8f 73       	andi	r24, 0x3F	; 63
    3166:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
            Can_clear_status_mob(); //   and reset MOb status
    316a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
            rtn_val = CAN_STATUS_COMPLETED;
    316e:	80 e0       	ldi	r24, 0x00	; 0
            break;
    3170:	9a cf       	rjmp	.-204    	; 0x30a6 <can_get_status+0x10>
    }

    Can_set_mob(cmd->handle);
    a_status = can_get_mob_status();
    
    switch (a_status)
    3172:	81 11       	cpse	r24, r1
    3174:	02 c0       	rjmp	.+4      	; 0x317a <can_get_status+0xe4>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	96 cf       	rjmp	.-212    	; 0x30a6 <can_get_status+0x10>
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    317a:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    317c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3180:	8f 73       	andi	r24, 0x3F	; 63
    3182:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
            Can_clear_status_mob(); //   and reset MOb status
    3186:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
            rtn_val = CAN_STATUS_ERROR;
    318a:	82 e0       	ldi	r24, 0x02	; 2
            break;
    318c:	8c cf       	rjmp	.-232    	; 0x30a6 <can_get_status+0x10>
                cmd->ctrl.ide = 1; // extended frame
                Can_get_ext_id(cmd->id.ext);
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    318e:	8d 7f       	andi	r24, 0xFD	; 253
    3190:	8a 87       	std	Y+10, r24	; 0x0a
                    Can_get_std_id(cmd->id.std);
    3192:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    3196:	82 95       	swap	r24
    3198:	86 95       	lsr	r24
    319a:	87 70       	andi	r24, 0x07	; 7
    319c:	8b 83       	std	Y+3, r24	; 0x03
    319e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    31a2:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    31a6:	92 95       	swap	r25
    31a8:	96 95       	lsr	r25
    31aa:	97 70       	andi	r25, 0x07	; 7
    31ac:	88 0f       	add	r24, r24
    31ae:	88 0f       	add	r24, r24
    31b0:	88 0f       	add	r24, r24
    31b2:	89 0f       	add	r24, r25
    31b4:	8a 83       	std	Y+2, r24	; 0x02
    31b6:	d3 cf       	rjmp	.-90     	; 0x315e <can_get_status+0xc8>

000031b8 <initDAC>:
const WORD DAC_OUTPUT_2_5V = 512;


void initDAC(void)
{
    DACON = 0;
    31b8:	a0 e9       	ldi	r26, 0x90	; 144
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	1c 92       	st	X, r1
       ADMUX |= _BV(REFS0);
    31be:	ec e7       	ldi	r30, 0x7C	; 124
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	80 81       	ld	r24, Z
    31c4:	80 64       	ori	r24, 0x40	; 64
    31c6:	80 83       	st	Z, r24
       ADMUX &= ~_BV(REFS1);
    31c8:	80 81       	ld	r24, Z
    31ca:	8f 77       	andi	r24, 0x7F	; 127
    31cc:	80 83       	st	Z, r24
       ADCSRB |= _BV(AREFEN);
    31ce:	eb e7       	ldi	r30, 0x7B	; 123
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	80 62       	ori	r24, 0x20	; 32
    31d6:	80 83       	st	Z, r24

// Configures the output voltage to the specified 10-bit value
// Vout = DAC * Vref/1023
void setDAC(WORD vout)
{
    DACL = (BYTE)(vout & 0xFF);
    31d8:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f0091>
    DACH = (BYTE)((vout & 0x0300) >> 8);
    31dc:	82 e0       	ldi	r24, 0x02	; 2
    31de:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__TEXT_REGION_LENGTH__+0x7f0092>
       ADCSRB |= _BV(AREFEN);
    // Config the output voltage value    
    setDAC(DAC_OUTPUT_2_5V);
    
    // Enable the DAC module and activate the output
    DACON |= (_BV(DAEN) | _BV(DAOE));        
    31e2:	8c 91       	ld	r24, X
    31e4:	83 60       	ori	r24, 0x03	; 3
    31e6:	8c 93       	st	X, r24
    31e8:	08 95       	ret

000031ea <setDAC>:

// Configures the output voltage to the specified 10-bit value
// Vout = DAC * Vref/1023
void setDAC(WORD vout)
{
    DACL = (BYTE)(vout & 0xFF);
    31ea:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f0091>
    DACH = (BYTE)((vout & 0x0300) >> 8);
    31ee:	88 27       	eor	r24, r24
    31f0:	93 70       	andi	r25, 0x03	; 3
    31f2:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <__TEXT_REGION_LENGTH__+0x7f0092>
    31f6:	08 95       	ret

000031f8 <getDAC>:
// Returns the present output voltage of the DAC as a 10-bit value
WORD getDAC(void)
{
    WORD vout = 0;
    
    vout = DACL;
    31f8:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f0091>
    vout |= ((WORD)(DACH & 0x03) << 8); 
    31fc:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <__TEXT_REGION_LENGTH__+0x7f0092>
    
    return vout;
    3200:	23 70       	andi	r18, 0x03	; 3
    3202:	90 e0       	ldi	r25, 0x00	; 0
}
    3204:	92 2b       	or	r25, r18
    3206:	08 95       	ret

00003208 <initLEDStateMachine>:

// Variable initialization for the 
//  LED state machine
void initLEDStateMachine(void)
{
    LEDState = LED_STATE_POST;
    3208:	83 e0       	ldi	r24, 0x03	; 3
    320a:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <LEDState>
    LEDBlinkStartTime = 0;
    320e:	10 92 49 06 	sts	0x0649, r1	; 0x800649 <LEDBlinkStartTime>
    clear4HzTimer();
    3212:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <clear4HzTimer>
}

// Resets the counters for LED toggling
static void clearFlashCounters(void)
{
    flashCounter[0] = 0;
    3216:	e5 e4       	ldi	r30, 0x45	; 69
    3218:	f6 e0       	ldi	r31, 0x06	; 6
    321a:	10 82       	st	Z, r1
    flashCounter[1] = 0;
    321c:	11 82       	std	Z+1, r1	; 0x01
    flashCounter[2] = 0;
    321e:	12 82       	std	Z+2, r1	; 0x02
    flashCounter[3] = 0;
    3220:	13 82       	std	Z+3, r1	; 0x03
    LEDState = LED_STATE_POST;
    LEDBlinkStartTime = 0;
    clear4HzTimer();
    clearFlashCounters();

    timerPostStart = get4HzTimer();
    3222:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <get4HzTimer>
    3226:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <timerPostStart>
    322a:	08 95       	ret

0000322c <turnOnAllLEDs>:

// Turns on all row LEDs except those with no magnets
void turnOnAllLEDs(void)
{
    BYTE rowMask;    
    rowMask = getNoMagnetRowMask();
    322c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <getNoMagnetRowMask>

    rowMask = ~(rowMask); // Find the rows with magnets
    3230:	80 95       	com	r24

    // First turn off all LEDS 
    PORTB &= ~(_BV(PB1) | _BV(PB3) | _BV(PB4));
    3232:	95 b1       	in	r25, 0x05	; 5
    3234:	95 7e       	andi	r25, 0xE5	; 229
    3236:	95 b9       	out	0x05, r25	; 5
    PORTC &= ~(_BV(PC6));
    3238:	46 98       	cbi	0x08, 6	; 8

    if(rowMask & 0x01)
    323a:	80 fd       	sbrc	r24, 0
    {
        PORTB |= (_BV(PB1));
    323c:	29 9a       	sbi	0x05, 1	; 5
    }

    if(rowMask & 0x02)
    323e:	81 fd       	sbrc	r24, 1
    {
        PORTC |= (_BV(PC6));
    3240:	46 9a       	sbi	0x08, 6	; 8
    }

    if(rowMask & 0x04)
    3242:	82 fd       	sbrc	r24, 2
    {
        PORTB |= (_BV(PB4));
    3244:	2c 9a       	sbi	0x05, 4	; 5
    }

    if(rowMask & 0x08)
    3246:	83 fd       	sbrc	r24, 3
    {
        PORTB |= (_BV(PB3));
    3248:	2b 9a       	sbi	0x05, 3	; 5
    324a:	08 95       	ret

0000324c <stepLEDStateMachine>:
}

// Updates the system/LED state machine
// based on latest system status
void stepLEDStateMachine(void)
{
    324c:	1f 93       	push	r17
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    BYTE blockedRows = 0;
    BYTE timerVal;
    BYTE noMagMask = 0;
	

    timerVal = get4HzTimer();
    3252:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <get4HzTimer>
    3256:	d8 2f       	mov	r29, r24
    noMagMask = getNoMagnetRowMask();
    3258:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <getNoMagnetRowMask>
    325c:	18 2f       	mov	r17, r24

    switch(LEDState)
    325e:	c0 91 4a 06 	lds	r28, 0x064A	; 0x80064a <LEDState>
    3262:	c2 30       	cpi	r28, 0x02	; 2
    3264:	09 f4       	brne	.+2      	; 0x3268 <stepLEDStateMachine+0x1c>
    3266:	51 c0       	rjmp	.+162    	; 0x330a <stepLEDStateMachine+0xbe>
    3268:	e0 f4       	brcc	.+56     	; 0x32a2 <stepLEDStateMachine+0x56>
    326a:	cc 23       	and	r28, r28
    326c:	81 f1       	breq	.+96     	; 0x32ce <stepLEDStateMachine+0x82>
    326e:	c1 30       	cpi	r28, 0x01	; 1
    3270:	a1 f4       	brne	.+40     	; 0x329a <stepLEDStateMachine+0x4e>
            }
                       
            break;
        
        case LED_STATE_ERROR:
            if(!getActiveSystemError())
    3272:	0e 94 9f 08 	call	0x113e	; 0x113e <getActiveSystemError>
    3276:	88 23       	and	r24, r24
    3278:	09 f4       	brne	.+2      	; 0x327c <stepLEDStateMachine+0x30>
    327a:	81 c0       	rjmp	.+258    	; 0x337e <stepLEDStateMachine+0x132>
            {
                LEDState = LED_STATE_NORMAL; 
            }
            else
            {
                if(timerVal >= (BYTE)(LEDBlinkStartTime + FAST_BLINK_TICK_COUNT)) // timer count > fast blink count
    327c:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <LEDBlinkStartTime>
    3280:	8f 5f       	subi	r24, 0xFF	; 255
    3282:	d8 17       	cp	r29, r24
    3284:	50 f0       	brcs	.+20     	; 0x329a <stepLEDStateMachine+0x4e>
}

// Toggles all row LEDs
void toggleAllLEDs(void)
{
    PORTB ^= (_BV(PB1) | _BV(PB3) | _BV(PB4));
    3286:	95 b1       	in	r25, 0x05	; 5
    3288:	8a e1       	ldi	r24, 0x1A	; 26
    328a:	89 27       	eor	r24, r25
    328c:	85 b9       	out	0x05, r24	; 5
    PORTC ^= (_BV(PC6));
    328e:	98 b1       	in	r25, 0x08	; 8
    3290:	80 e4       	ldi	r24, 0x40	; 64
    3292:	89 27       	eor	r24, r25
    3294:	88 b9       	out	0x08, r24	; 8
            else
            {
                if(timerVal >= (BYTE)(LEDBlinkStartTime + FAST_BLINK_TICK_COUNT)) // timer count > fast blink count
                {
                    toggleAllLEDs();
                    LEDBlinkStartTime = timerVal;
    3296:	d0 93 49 06 	sts	0x0649, r29	; 0x800649 <LEDBlinkStartTime>
            break;
        
        default:
            break;
    }
}
    329a:	df 91       	pop	r29
    329c:	cf 91       	pop	r28
    329e:	1f 91       	pop	r17
    32a0:	08 95       	ret
	

    timerVal = get4HzTimer();
    noMagMask = getNoMagnetRowMask();

    switch(LEDState)
    32a2:	c3 30       	cpi	r28, 0x03	; 3
    32a4:	29 f1       	breq	.+74     	; 0x32f0 <stepLEDStateMachine+0xa4>
    32a6:	c4 30       	cpi	r28, 0x04	; 4
    32a8:	c1 f7       	brne	.-16     	; 0x329a <stepLEDStateMachine+0x4e>
                LEDState = LED_STATE_INIT_NO_FLOW;
            }       
            break;

        case LED_STATE_INIT_NO_FLOW:
            if(getActiveSystemError())
    32aa:	0e 94 9f 08 	call	0x113e	; 0x113e <getActiveSystemError>
    32ae:	88 23       	and	r24, r24
    32b0:	09 f4       	brne	.+2      	; 0x32b4 <stepLEDStateMachine+0x68>
    32b2:	68 c0       	rjmp	.+208    	; 0x3384 <stepLEDStateMachine+0x138>
            break;
        
        case LED_STATE_BLOCKAGE:
            if(getActiveSystemError())
            {
                LEDState = LED_STATE_ERROR;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <LEDState>
}

// Forces all row LEDs to off
void turnOffAllLEDs(void)
{
    PORTB &= ~(_BV(PB1) | _BV(PB3) | _BV(PB4));
    32ba:	85 b1       	in	r24, 0x05	; 5
    32bc:	85 7e       	andi	r24, 0xE5	; 229
    32be:	85 b9       	out	0x05, r24	; 5
    PORTC &= ~(_BV(PC6));
    32c0:	46 98       	cbi	0x08, 6	; 8
        case LED_STATE_BLOCKAGE:
            if(getActiveSystemError())
            {
                LEDState = LED_STATE_ERROR;
                turnOffAllLEDs();
                LEDBlinkStartTime = timerVal;
    32c2:	d0 93 49 06 	sts	0x0649, r29	; 0x800649 <LEDBlinkStartTime>
            break;
        
        default:
            break;
    }
}
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	1f 91       	pop	r17
    32cc:	08 95       	ret
            }

            break;
            
        case LED_STATE_NORMAL:
            if(getActiveSystemError())
    32ce:	0e 94 9f 08 	call	0x113e	; 0x113e <getActiveSystemError>
    32d2:	81 11       	cpse	r24, r1
    32d4:	ef cf       	rjmp	.-34     	; 0x32b4 <stepLEDStateMachine+0x68>
            {
                LEDState = LED_STATE_ERROR;
                turnOffAllLEDs();
                LEDBlinkStartTime = timerVal;
            }
            else if(getActiveBlockageFlag()) //blockage message received
    32d6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <getActiveBlockageFlag>
    32da:	88 23       	and	r24, r24
    32dc:	09 f4       	brne	.+2      	; 0x32e0 <stepLEDStateMachine+0x94>
    32de:	78 c0       	rjmp	.+240    	; 0x33d0 <stepLEDStateMachine+0x184>
            {
                LEDState = LED_STATE_BLOCKAGE; 
    32e0:	82 e0       	ldi	r24, 0x02	; 2
    32e2:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <LEDState>
                turnOnAllLEDs();
    32e6:	0e 94 16 19 	call	0x322c	; 0x322c <turnOnAllLEDs>
                LEDBlinkStartTime = timerVal;
    32ea:	d0 93 49 06 	sts	0x0649, r29	; 0x800649 <LEDBlinkStartTime>
    32ee:	d5 cf       	rjmp	.-86     	; 0x329a <stepLEDStateMachine+0x4e>

// Turns on all row LEDs 
//  and ignores the unused row mask
static void forceOnAllLEDs(void)
{   
    PORTB |= (_BV(PB4));
    32f0:	2c 9a       	sbi	0x05, 4	; 5
    PORTB |= (_BV(PB3));
    32f2:	2b 9a       	sbi	0x05, 3	; 5
    PORTC |= (_BV(PC6));
    32f4:	46 9a       	sbi	0x08, 6	; 8
    PORTB |= (_BV(PB1));
    32f6:	29 9a       	sbi	0x05, 1	; 5

    switch(LEDState)
    {
        case LED_STATE_POST:
            forceOnAllLEDs();
            if(timerVal > (BYTE)(POST_DURATION_TICK_COUNT + timerPostStart))
    32f8:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <timerPostStart>
    32fc:	88 5f       	subi	r24, 0xF8	; 248
    32fe:	8d 17       	cp	r24, r29
    3300:	60 f6       	brcc	.-104    	; 0x329a <stepLEDStateMachine+0x4e>
            {
                LEDState = LED_STATE_INIT_NO_FLOW;
    3302:	84 e0       	ldi	r24, 0x04	; 4
    3304:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <LEDState>
    3308:	c8 cf       	rjmp	.-112    	; 0x329a <stepLEDStateMachine+0x4e>
            }            
            
            break;
        
        case LED_STATE_BLOCKAGE:
            if(getActiveSystemError())
    330a:	0e 94 9f 08 	call	0x113e	; 0x113e <getActiveSystemError>
    330e:	81 11       	cpse	r24, r1
    3310:	d1 cf       	rjmp	.-94     	; 0x32b4 <stepLEDStateMachine+0x68>
                turnOffAllLEDs();
                LEDBlinkStartTime = timerVal;
            }
            else
            {
                blockedRows = getActiveBlockageRows();
    3312:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <getActiveBlockageRows>

                // Check for blockage timeouts                
                if(blockedRows & 0x01)
    3316:	80 fd       	sbrc	r24, 0
    3318:	4d c0       	rjmp	.+154    	; 0x33b4 <stepLEDStateMachine+0x168>
                    {
                        toggleRow1LED();
                        flashCounter[0] = 0;
                    }
                }
                else if(noMagMask & 0x01)
    331a:	10 ff       	sbrs	r17, 0
    331c:	78 c0       	rjmp	.+240    	; 0x340e <stepLEDStateMachine+0x1c2>
                {
                    PORTB &= ~(_BV(PB1));
    331e:	29 98       	cbi	0x05, 1	; 5
                {
                    turnOnRow1LED();
                    flashCounter[0] = 0;
                }
                
                if(blockedRows & 0x02)
    3320:	81 ff       	sbrs	r24, 1
    3322:	5f c0       	rjmp	.+190    	; 0x33e2 <stepLEDStateMachine+0x196>
                {
                    flashCounter[1]++;
    3324:	90 91 46 06 	lds	r25, 0x0646	; 0x800646 <flashCounter+0x1>
    3328:	9f 5f       	subi	r25, 0xFF	; 255
    332a:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <flashCounter+0x1>

                    if(flashCounter[1] > SLOW_BLINK_TICK_COUNT)
    332e:	95 30       	cpi	r25, 0x05	; 5
    3330:	30 f0       	brcs	.+12     	; 0x333e <stepLEDStateMachine+0xf2>
    PORTB ^= (_BV(PB1));
}

void toggleRow2LED(void)
{
    PORTC ^= (_BV(PC6));
    3332:	28 b1       	in	r18, 0x08	; 8
    3334:	90 e4       	ldi	r25, 0x40	; 64
    3336:	92 27       	eor	r25, r18
    3338:	98 b9       	out	0x08, r25	; 8
                    flashCounter[1]++;

                    if(flashCounter[1] > SLOW_BLINK_TICK_COUNT)
                    {
                        toggleRow2LED();
                        flashCounter[1] = 0;
    333a:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <flashCounter+0x1>
                {
                    turnOnRow2LED();
                    flashCounter[1] = 0;
                }
                
                if(blockedRows & 0x04)
    333e:	82 ff       	sbrs	r24, 2
    3340:	4c c0       	rjmp	.+152    	; 0x33da <stepLEDStateMachine+0x18e>
                {
                    flashCounter[2]++;
    3342:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <flashCounter+0x2>
    3346:	9f 5f       	subi	r25, 0xFF	; 255
    3348:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <flashCounter+0x2>

                    if(flashCounter[2] > SLOW_BLINK_TICK_COUNT)
    334c:	95 30       	cpi	r25, 0x05	; 5
    334e:	30 f0       	brcs	.+12     	; 0x335c <stepLEDStateMachine+0x110>
    PORTC ^= (_BV(PC6));
}

void toggleRow3LED(void)
{
    PORTB ^= (_BV(PB4));
    3350:	25 b1       	in	r18, 0x05	; 5
    3352:	90 e1       	ldi	r25, 0x10	; 16
    3354:	92 27       	eor	r25, r18
    3356:	95 b9       	out	0x05, r25	; 5
                    flashCounter[2]++;

                    if(flashCounter[2] > SLOW_BLINK_TICK_COUNT)
                    {
                        toggleRow3LED();
                        flashCounter[2] = 0;
    3358:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <flashCounter+0x2>
                {
                    turnOnRow3LED();
                    flashCounter[2] = 0;
                }
                
                if(blockedRows & 0x08)
    335c:	83 ff       	sbrs	r24, 3
    335e:	45 c0       	rjmp	.+138    	; 0x33ea <stepLEDStateMachine+0x19e>
                {
                    flashCounter[3]++;
    3360:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <flashCounter+0x3>
    3364:	8f 5f       	subi	r24, 0xFF	; 255
    3366:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <flashCounter+0x3>

                    if(flashCounter[3] > SLOW_BLINK_TICK_COUNT)
    336a:	85 30       	cpi	r24, 0x05	; 5
    336c:	08 f4       	brcc	.+2      	; 0x3370 <stepLEDStateMachine+0x124>
    336e:	95 cf       	rjmp	.-214    	; 0x329a <stepLEDStateMachine+0x4e>
    PORTB ^= (_BV(PB4));
}

void toggleRow4LED(void)
{
    PORTB ^= (_BV(PB3));
    3370:	95 b1       	in	r25, 0x05	; 5
    3372:	88 e0       	ldi	r24, 0x08	; 8
    3374:	89 27       	eor	r24, r25
    3376:	85 b9       	out	0x05, r24	; 5
                    flashCounter[3]++;

                    if(flashCounter[3] > SLOW_BLINK_TICK_COUNT)
                    {
                        toggleRow4LED();
                        flashCounter[3] = 0;
    3378:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <flashCounter+0x3>
    337c:	8e cf       	rjmp	.-228    	; 0x329a <stepLEDStateMachine+0x4e>
            break;
        
        case LED_STATE_ERROR:
            if(!getActiveSystemError())
            {
                LEDState = LED_STATE_NORMAL; 
    337e:	10 92 4a 06 	sts	0x064A, r1	; 0x80064a <LEDState>
    3382:	8b cf       	rjmp	.-234    	; 0x329a <stepLEDStateMachine+0x4e>
            {
                LEDState = LED_STATE_ERROR;
                turnOffAllLEDs();
                LEDBlinkStartTime = timerVal;
            }
            else if(getFlowDetectedFlag() == 1)
    3384:	0e 94 6d 0a 	call	0x14da	; 0x14da <getFlowDetectedFlag>
    3388:	81 30       	cpi	r24, 0x01	; 1
    338a:	09 f4       	brne	.+2      	; 0x338e <stepLEDStateMachine+0x142>
    338c:	4c c0       	rjmp	.+152    	; 0x3426 <stepLEDStateMachine+0x1da>
            }
            else // No flow detected yet
            {
                // Use one of the counters to time the LED toggle.
                // All 4 LEDS should flash together so no need to use all 4 counters.
                flashCounter[0]++;
    338e:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <flashCounter>
    3392:	8f 5f       	subi	r24, 0xFF	; 255
    3394:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <flashCounter>

                if(flashCounter[0] > SLOW_BLINK_TICK_COUNT)
    3398:	85 30       	cpi	r24, 0x05	; 5
    339a:	08 f4       	brcc	.+2      	; 0x339e <stepLEDStateMachine+0x152>
    339c:	7e cf       	rjmp	.-260    	; 0x329a <stepLEDStateMachine+0x4e>
}

// Toggles all row LEDs
void toggleAllLEDs(void)
{
    PORTB ^= (_BV(PB1) | _BV(PB3) | _BV(PB4));
    339e:	95 b1       	in	r25, 0x05	; 5
    33a0:	8a e1       	ldi	r24, 0x1A	; 26
    33a2:	89 27       	eor	r24, r25
    33a4:	85 b9       	out	0x05, r24	; 5
    PORTC ^= (_BV(PC6));
    33a6:	98 b1       	in	r25, 0x08	; 8
    33a8:	80 e4       	ldi	r24, 0x40	; 64
    33aa:	89 27       	eor	r24, r25
    33ac:	88 b9       	out	0x08, r24	; 8
                flashCounter[0]++;

                if(flashCounter[0] > SLOW_BLINK_TICK_COUNT)
                {
                    toggleAllLEDs();
                    flashCounter[0] = 0;
    33ae:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <flashCounter>
    33b2:	73 cf       	rjmp	.-282    	; 0x329a <stepLEDStateMachine+0x4e>
                blockedRows = getActiveBlockageRows();

                // Check for blockage timeouts                
                if(blockedRows & 0x01)
                {
                    flashCounter[0]++;
    33b4:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <flashCounter>
    33b8:	9f 5f       	subi	r25, 0xFF	; 255
    33ba:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <flashCounter>

                    if(flashCounter[0] > SLOW_BLINK_TICK_COUNT)
    33be:	95 30       	cpi	r25, 0x05	; 5
    33c0:	08 f4       	brcc	.+2      	; 0x33c4 <stepLEDStateMachine+0x178>
    33c2:	ae cf       	rjmp	.-164    	; 0x3320 <stepLEDStateMachine+0xd4>
    PORTC ^= (_BV(PC6));
}

void toggleRow1LED(void)
{
    PORTB ^= (_BV(PB1));
    33c4:	95 b1       	in	r25, 0x05	; 5
    33c6:	c9 27       	eor	r28, r25
    33c8:	c5 b9       	out	0x05, r28	; 5
                    flashCounter[0]++;

                    if(flashCounter[0] > SLOW_BLINK_TICK_COUNT)
                    {
                        toggleRow1LED();
                        flashCounter[0] = 0;
    33ca:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <flashCounter>
    33ce:	a8 cf       	rjmp	.-176    	; 0x3320 <stepLEDStateMachine+0xd4>
            break;
        
        default:
            break;
    }
}
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	1f 91       	pop	r17
                turnOnAllLEDs();
                LEDBlinkStartTime = timerVal;
            }
            else
            {
                turnOnAllLEDs();
    33d6:	0c 94 16 19 	jmp	0x322c	; 0x322c <turnOnAllLEDs>
                    {
                        toggleRow3LED();
                        flashCounter[2] = 0;
                    }
                }
                else if(noMagMask & 0x04)
    33da:	12 ff       	sbrs	r17, 2
    33dc:	14 c0       	rjmp	.+40     	; 0x3406 <stepLEDStateMachine+0x1ba>
                {
                    PORTB &= ~(_BV(PB4));
    33de:	2c 98       	cbi	0x05, 4	; 5
    33e0:	bd cf       	rjmp	.-134    	; 0x335c <stepLEDStateMachine+0x110>
                    {
                        toggleRow2LED();
                        flashCounter[1] = 0;
                    }
                }
                else if(noMagMask & 0x02)
    33e2:	11 ff       	sbrs	r17, 1
    33e4:	18 c0       	rjmp	.+48     	; 0x3416 <stepLEDStateMachine+0x1ca>
                {
                    PORTC &= ~(_BV(PC6));
    33e6:	46 98       	cbi	0x08, 6	; 8
    33e8:	aa cf       	rjmp	.-172    	; 0x333e <stepLEDStateMachine+0xf2>
                    {
                        toggleRow4LED();
                        flashCounter[3] = 0;
                    }
                }
                else if(noMagMask & 0x08)
    33ea:	13 ff       	sbrs	r17, 3
    33ec:	18 c0       	rjmp	.+48     	; 0x341e <stepLEDStateMachine+0x1d2>
                {
                    PORTB &= ~(_BV(PB3));
    33ee:	2b 98       	cbi	0x05, 3	; 5
                else
                {
                    turnOnRow4LED();
                    flashCounter[3] = 0;
                }                
                if(blockedRows == 0)
    33f0:	81 11       	cpse	r24, r1
    33f2:	53 cf       	rjmp	.-346    	; 0x329a <stepLEDStateMachine+0x4e>
                {
                    LEDState = LED_STATE_NORMAL;
    33f4:	10 92 4a 06 	sts	0x064A, r1	; 0x80064a <LEDState>
                    turnOnAllLEDs();
    33f8:	0e 94 16 19 	call	0x322c	; 0x322c <turnOnAllLEDs>
            break;
        
        default:
            break;
    }
}
    33fc:	df 91       	pop	r29
    33fe:	cf 91       	pop	r28
    3400:	1f 91       	pop	r17
                }                
                if(blockedRows == 0)
                {
                    LEDState = LED_STATE_NORMAL;
                    turnOnAllLEDs();
                    clearActiveBlockageFlag();
    3402:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <clearActiveBlockageFlag>
    PORTC |= (_BV(PC6));
}

void turnOnRow3LED(void)
{
    PORTB |= (_BV(PB4));
    3406:	2c 9a       	sbi	0x05, 4	; 5
                    PORTB &= ~(_BV(PB4));
                }
                else
                {
                    turnOnRow3LED();
                    flashCounter[2] = 0;
    3408:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <flashCounter+0x2>
    340c:	a7 cf       	rjmp	.-178    	; 0x335c <stepLEDStateMachine+0x110>
    PORTB ^= (_BV(PB3));
}

void turnOnRow1LED(void)
{
    PORTB |= (_BV(PB1));
    340e:	29 9a       	sbi	0x05, 1	; 5
                    PORTB &= ~(_BV(PB1));
                }
                else
                {
                    turnOnRow1LED();
                    flashCounter[0] = 0;
    3410:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <flashCounter>
    3414:	85 cf       	rjmp	.-246    	; 0x3320 <stepLEDStateMachine+0xd4>
    PORTB |= (_BV(PB1));
}

void turnOnRow2LED(void)
{
    PORTC |= (_BV(PC6));
    3416:	46 9a       	sbi	0x08, 6	; 8
                    PORTC &= ~(_BV(PC6));
                }
                else
                {
                    turnOnRow2LED();
                    flashCounter[1] = 0;
    3418:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <flashCounter+0x1>
    341c:	90 cf       	rjmp	.-224    	; 0x333e <stepLEDStateMachine+0xf2>
    PORTB |= (_BV(PB4));
}

void turnOnRow4LED(void)
{
    PORTB |= (_BV(PB3));
    341e:	2b 9a       	sbi	0x05, 3	; 5
                    PORTB &= ~(_BV(PB3));
                }
                else
                {
                    turnOnRow4LED();
                    flashCounter[3] = 0;
    3420:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <flashCounter+0x3>
    3424:	e5 cf       	rjmp	.-54     	; 0x33f0 <stepLEDStateMachine+0x1a4>

// Turns on all row LEDs 
//  and ignores the unused row mask
static void forceOnAllLEDs(void)
{   
    PORTB |= (_BV(PB4));
    3426:	2c 9a       	sbi	0x05, 4	; 5
    PORTB |= (_BV(PB3));
    3428:	2b 9a       	sbi	0x05, 3	; 5
    PORTC |= (_BV(PC6));
    342a:	46 9a       	sbi	0x08, 6	; 8
    PORTB |= (_BV(PB1));
    342c:	29 9a       	sbi	0x05, 1	; 5
}

// Resets the counters for LED toggling
static void clearFlashCounters(void)
{
    flashCounter[0] = 0;
    342e:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <flashCounter>
    flashCounter[1] = 0;
    3432:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <flashCounter+0x1>
    flashCounter[2] = 0;
    3436:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <flashCounter+0x2>
    flashCounter[3] = 0;
    343a:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <flashCounter+0x3>
            }
            else if(getFlowDetectedFlag() == 1)
            {
                forceOnAllLEDs();
                clearFlashCounters();
                LEDState = LED_STATE_NORMAL;
    343e:	10 92 4a 06 	sts	0x064A, r1	; 0x80064a <LEDState>
    3442:	2b cf       	rjmp	.-426    	; 0x329a <stepLEDStateMachine+0x4e>

00003444 <turnOffAllLEDs>:
}

// Forces all row LEDs to off
void turnOffAllLEDs(void)
{
    PORTB &= ~(_BV(PB1) | _BV(PB3) | _BV(PB4));
    3444:	85 b1       	in	r24, 0x05	; 5
    3446:	85 7e       	andi	r24, 0xE5	; 229
    3448:	85 b9       	out	0x05, r24	; 5
    PORTC &= ~(_BV(PC6));
    344a:	46 98       	cbi	0x08, 6	; 8
    344c:	08 95       	ret

0000344e <toggleAllLEDs>:
}

// Toggles all row LEDs
void toggleAllLEDs(void)
{
    PORTB ^= (_BV(PB1) | _BV(PB3) | _BV(PB4));
    344e:	95 b1       	in	r25, 0x05	; 5
    3450:	8a e1       	ldi	r24, 0x1A	; 26
    3452:	89 27       	eor	r24, r25
    3454:	85 b9       	out	0x05, r24	; 5
    PORTC ^= (_BV(PC6));
    3456:	98 b1       	in	r25, 0x08	; 8
    3458:	80 e4       	ldi	r24, 0x40	; 64
    345a:	89 27       	eor	r24, r25
    345c:	88 b9       	out	0x08, r24	; 8
    345e:	08 95       	ret

00003460 <toggleRow1LED>:
}

void toggleRow1LED(void)
{
    PORTB ^= (_BV(PB1));
    3460:	95 b1       	in	r25, 0x05	; 5
    3462:	82 e0       	ldi	r24, 0x02	; 2
    3464:	89 27       	eor	r24, r25
    3466:	85 b9       	out	0x05, r24	; 5
    3468:	08 95       	ret

0000346a <toggleRow2LED>:
}

void toggleRow2LED(void)
{
    PORTC ^= (_BV(PC6));
    346a:	98 b1       	in	r25, 0x08	; 8
    346c:	80 e4       	ldi	r24, 0x40	; 64
    346e:	89 27       	eor	r24, r25
    3470:	88 b9       	out	0x08, r24	; 8
    3472:	08 95       	ret

00003474 <toggleRow3LED>:
}

void toggleRow3LED(void)
{
    PORTB ^= (_BV(PB4));
    3474:	95 b1       	in	r25, 0x05	; 5
    3476:	80 e1       	ldi	r24, 0x10	; 16
    3478:	89 27       	eor	r24, r25
    347a:	85 b9       	out	0x05, r24	; 5
    347c:	08 95       	ret

0000347e <readHwPartNum>:
        serialNum[i] = eeprom_read_byte((BYTE *)(EE_SERIAL_NUM_LOC + i));
    }
}

void readHwPartNum(BYTE * partNumPtr)
{
    347e:	0f 93       	push	r16
    3480:	1f 93       	push	r17
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	8c 01       	movw	r16, r24
    3488:	c0 eb       	ldi	r28, 0xB0	; 176
    348a:	d7 e0       	ldi	r29, 0x07	; 7
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_PART_NUM; i++)
    {
        eeprom_busy_wait();
    348c:	f9 99       	sbic	0x1f, 1	; 31
    348e:	fe cf       	rjmp	.-4      	; 0x348c <readHwPartNum+0xe>
        partNumPtr[i] = eeprom_read_byte((BYTE *)(EE_HW_PART_NUM_LOC + i));
    3490:	ce 01       	movw	r24, r28
    3492:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_read_byte>
    3496:	f8 01       	movw	r30, r16
    3498:	81 93       	st	Z+, r24
    349a:	8f 01       	movw	r16, r30
    349c:	21 96       	adiw	r28, 0x01	; 1

void readHwPartNum(BYTE * partNumPtr)
{
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_PART_NUM; i++)
    349e:	c0 3c       	cpi	r28, 0xC0	; 192
    34a0:	f7 e0       	ldi	r31, 0x07	; 7
    34a2:	df 07       	cpc	r29, r31
    34a4:	99 f7       	brne	.-26     	; 0x348c <readHwPartNum+0xe>
    {
        eeprom_busy_wait();
        partNumPtr[i] = eeprom_read_byte((BYTE *)(EE_HW_PART_NUM_LOC + i));
    }    
}
    34a6:	df 91       	pop	r29
    34a8:	cf 91       	pop	r28
    34aa:	1f 91       	pop	r17
    34ac:	0f 91       	pop	r16
    34ae:	08 95       	ret

000034b0 <readHwVersion>:

void readHwVersion(BYTE * versionPtr)
{
    34b0:	0f 93       	push	r16
    34b2:	1f 93       	push	r17
    34b4:	cf 93       	push	r28
    34b6:	df 93       	push	r29
    34b8:	8c 01       	movw	r16, r24
    34ba:	c0 ed       	ldi	r28, 0xD0	; 208
    34bc:	d7 e0       	ldi	r29, 0x07	; 7
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_VER; i++)
    {
        eeprom_busy_wait();
    34be:	f9 99       	sbic	0x1f, 1	; 31
    34c0:	fe cf       	rjmp	.-4      	; 0x34be <readHwVersion+0xe>
        versionPtr[i] = eeprom_read_byte((BYTE *)(EE_HW_VER_LOC + i));
    34c2:	ce 01       	movw	r24, r28
    34c4:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_read_byte>
    34c8:	f8 01       	movw	r30, r16
    34ca:	81 93       	st	Z+, r24
    34cc:	8f 01       	movw	r16, r30
    34ce:	21 96       	adiw	r28, 0x01	; 1

void readHwVersion(BYTE * versionPtr)
{
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_VER; i++)
    34d0:	c0 3e       	cpi	r28, 0xE0	; 224
    34d2:	f7 e0       	ldi	r31, 0x07	; 7
    34d4:	df 07       	cpc	r29, r31
    34d6:	99 f7       	brne	.-26     	; 0x34be <readHwVersion+0xe>
    {
        eeprom_busy_wait();
        versionPtr[i] = eeprom_read_byte((BYTE *)(EE_HW_VER_LOC + i));
    }
}
    34d8:	df 91       	pop	r29
    34da:	cf 91       	pop	r28
    34dc:	1f 91       	pop	r17
    34de:	0f 91       	pop	r16
    34e0:	08 95       	ret

000034e2 <readFwPartNum>:

void readFwPartNum(BYTE * fwPartNum)
{  
    strcpy_P((char *)fwPartNum, FwPartNum);
    34e2:	64 ea       	ldi	r22, 0xA4	; 164
    34e4:	71 e0       	ldi	r23, 0x01	; 1
    34e6:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <strcpy_P>

000034ea <readWifiStatus>:
    strcpy_P(fwVersion, p);
}

void readWifiStatus(void)
{
    eeprom_busy_wait();
    34ea:	f9 99       	sbic	0x1f, 1	; 31
    34ec:	fe cf       	rjmp	.-4      	; 0x34ea <readWifiStatus>
    wifiStatus = eeprom_read_byte((BYTE *)(EE_WIFI_CONFIG_STATE_LOC));
}
    34ee:	08 95       	ret

000034f0 <writeSerialNumToEeprom>:


void writeSerialNumToEeprom(BYTE * serialPtr)
{
    34f0:	0f 93       	push	r16
    34f2:	1f 93       	push	r17
    34f4:	cf 93       	push	r28
    34f6:	df 93       	push	r29
    BYTE i;

    _CLI();
    34f8:	f8 94       	cli
    34fa:	8c 01       	movw	r16, r24
    34fc:	c6 ea       	ldi	r28, 0xA6	; 166
    34fe:	d7 e0       	ldi	r29, 0x07	; 7
    for(i = 0; i < 8; i++)
    {
        eeprom_busy_wait();
    3500:	f9 99       	sbic	0x1f, 1	; 31
    3502:	fe cf       	rjmp	.-4      	; 0x3500 <writeSerialNumToEeprom+0x10>
        eeprom_write_byte((BYTE *)(EE_SERIAL_NUM_LOC + i), *serialPtr);
    3504:	f8 01       	movw	r30, r16
    3506:	61 91       	ld	r22, Z+
    3508:	8f 01       	movw	r16, r30
    350a:	ce 01       	movw	r24, r28
    350c:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
    3510:	21 96       	adiw	r28, 0x01	; 1
void writeSerialNumToEeprom(BYTE * serialPtr)
{
    BYTE i;

    _CLI();
    for(i = 0; i < 8; i++)
    3512:	ce 3a       	cpi	r28, 0xAE	; 174
    3514:	f7 e0       	ldi	r31, 0x07	; 7
    3516:	df 07       	cpc	r29, r31
    3518:	99 f7       	brne	.-26     	; 0x3500 <writeSerialNumToEeprom+0x10>
    {
        eeprom_busy_wait();
        eeprom_write_byte((BYTE *)(EE_SERIAL_NUM_LOC + i), *serialPtr);
        serialPtr++;
    }
    eeprom_busy_wait();
    351a:	f9 99       	sbic	0x1f, 1	; 31
    351c:	fe cf       	rjmp	.-4      	; 0x351a <writeSerialNumToEeprom+0x2a>
    eeprom_write_byte((BYTE *)(EE_SERIAL_NUM_LOC + 8), '\0');
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	8e ea       	ldi	r24, 0xAE	; 174
    3522:	97 e0       	ldi	r25, 0x07	; 7
    3524:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
    _SEI();
    3528:	78 94       	sei
}
    352a:	df 91       	pop	r29
    352c:	cf 91       	pop	r28
    352e:	1f 91       	pop	r17
    3530:	0f 91       	pop	r16
    3532:	08 95       	ret

00003534 <writeHwVersionToEeprom>:

void writeHwVersionToEeprom(BYTE * versionPtr)
{
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	cf 93       	push	r28
    353a:	df 93       	push	r29
    BYTE i;

    _CLI();
    353c:	f8 94       	cli
    353e:	8c 01       	movw	r16, r24
    3540:	c0 ed       	ldi	r28, 0xD0	; 208
    3542:	d7 e0       	ldi	r29, 0x07	; 7
    for(i = 0; i < 5; i++)
    {
        eeprom_busy_wait();
    3544:	f9 99       	sbic	0x1f, 1	; 31
    3546:	fe cf       	rjmp	.-4      	; 0x3544 <writeHwVersionToEeprom+0x10>
        eeprom_write_byte((BYTE *)(EE_HW_VER_LOC + i), *versionPtr);
    3548:	f8 01       	movw	r30, r16
    354a:	61 91       	ld	r22, Z+
    354c:	8f 01       	movw	r16, r30
    354e:	ce 01       	movw	r24, r28
    3550:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
    3554:	21 96       	adiw	r28, 0x01	; 1
void writeHwVersionToEeprom(BYTE * versionPtr)
{
    BYTE i;

    _CLI();
    for(i = 0; i < 5; i++)
    3556:	c5 3d       	cpi	r28, 0xD5	; 213
    3558:	f7 e0       	ldi	r31, 0x07	; 7
    355a:	df 07       	cpc	r29, r31
    355c:	99 f7       	brne	.-26     	; 0x3544 <writeHwVersionToEeprom+0x10>
    {
        eeprom_busy_wait();
        eeprom_write_byte((BYTE *)(EE_HW_VER_LOC + i), *versionPtr);
        versionPtr++;
    }
    eeprom_busy_wait();
    355e:	f9 99       	sbic	0x1f, 1	; 31
    3560:	fe cf       	rjmp	.-4      	; 0x355e <writeHwVersionToEeprom+0x2a>
    eeprom_write_byte((BYTE *)(EE_HW_VER_LOC + 5), '\0');
    3562:	60 e0       	ldi	r22, 0x00	; 0
    3564:	85 ed       	ldi	r24, 0xD5	; 213
    3566:	97 e0       	ldi	r25, 0x07	; 7
    3568:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
    _SEI();
    356c:	78 94       	sei
}
    356e:	df 91       	pop	r29
    3570:	cf 91       	pop	r28
    3572:	1f 91       	pop	r17
    3574:	0f 91       	pop	r16
    3576:	08 95       	ret

00003578 <writeHwPartNumToEeprom>:

void writeHwPartNumToEeprom(BYTE * hwPartNumPtr, BYTE segmentNumber)
{
    3578:	ef 92       	push	r14
    357a:	ff 92       	push	r15
    357c:	0f 93       	push	r16
    357e:	1f 93       	push	r17
    3580:	cf 93       	push	r28
    3582:	df 93       	push	r29
    BYTE i;
    BYTE writeSize = 0;
    BYTE writeOffset = 0;

    if(segmentNumber == 0)
    3584:	66 23       	and	r22, r22
    3586:	b1 f0       	breq	.+44     	; 0x35b4 <writeHwPartNumToEeprom+0x3c>
    {
        writeSize = 8;
        writeOffset = 0;
    }
    else if(segmentNumber == 1)
    3588:	61 30       	cpi	r22, 0x01	; 1
    358a:	a1 f1       	breq	.+104    	; 0x35f4 <writeHwPartNumToEeprom+0x7c>

void writeHwPartNumToEeprom(BYTE * hwPartNumPtr, BYTE segmentNumber)
{
    BYTE i;
    BYTE writeSize = 0;
    BYTE writeOffset = 0;
    358c:	c0 e0       	ldi	r28, 0x00	; 0
}

void writeHwPartNumToEeprom(BYTE * hwPartNumPtr, BYTE segmentNumber)
{
    BYTE i;
    BYTE writeSize = 0;
    358e:	20 e0       	ldi	r18, 0x00	; 0
    {
        writeSize = 5;
        writeOffset = 8;
    }

    _CLI();
    3590:	f8 94       	cli
    for(i = 0; i < writeSize; i++)
    3592:	21 11       	cpse	r18, r1
    3594:	14 c0       	rjmp	.+40     	; 0x35be <writeHwPartNumToEeprom+0x46>
    {
        eeprom_busy_wait();
        eeprom_write_byte((BYTE *)(EE_HW_PART_NUM_LOC + writeOffset + i), *hwPartNumPtr);
        hwPartNumPtr++;
    }
    eeprom_busy_wait();
    3596:	f9 99       	sbic	0x1f, 1	; 31
    3598:	fe cf       	rjmp	.-4      	; 0x3596 <writeHwPartNumToEeprom+0x1e>
    eeprom_write_byte((BYTE *)(EE_HW_PART_NUM_LOC + 13), '\0');
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	8d eb       	ldi	r24, 0xBD	; 189
    359e:	97 e0       	ldi	r25, 0x07	; 7
    35a0:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
    _SEI();
    35a4:	78 94       	sei
}
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	1f 91       	pop	r17
    35ac:	0f 91       	pop	r16
    35ae:	ff 90       	pop	r15
    35b0:	ef 90       	pop	r14
    35b2:	08 95       	ret
    BYTE writeOffset = 0;

    if(segmentNumber == 0)
    {
        writeSize = 8;
        writeOffset = 0;
    35b4:	c0 e0       	ldi	r28, 0x00	; 0
    BYTE writeSize = 0;
    BYTE writeOffset = 0;

    if(segmentNumber == 0)
    {
        writeSize = 8;
    35b6:	28 e0       	ldi	r18, 0x08	; 8
    {
        writeSize = 5;
        writeOffset = 8;
    }

    _CLI();
    35b8:	f8 94       	cli
    for(i = 0; i < writeSize; i++)
    35ba:	22 23       	and	r18, r18
    35bc:	61 f3       	breq	.-40     	; 0x3596 <writeHwPartNumToEeprom+0x1e>
    35be:	8c 01       	movw	r16, r24
    35c0:	d0 e0       	ldi	r29, 0x00	; 0
    35c2:	c0 55       	subi	r28, 0x50	; 80
    35c4:	d8 4f       	sbci	r29, 0xF8	; 248
    35c6:	21 50       	subi	r18, 0x01	; 1
    35c8:	e2 2e       	mov	r14, r18
    35ca:	f1 2c       	mov	r15, r1
    35cc:	8f ef       	ldi	r24, 0xFF	; 255
    35ce:	e8 1a       	sub	r14, r24
    35d0:	f8 0a       	sbc	r15, r24
    35d2:	e0 0e       	add	r14, r16
    35d4:	f1 1e       	adc	r15, r17
    {
        eeprom_busy_wait();
    35d6:	f9 99       	sbic	0x1f, 1	; 31
    35d8:	fe cf       	rjmp	.-4      	; 0x35d6 <writeHwPartNumToEeprom+0x5e>
        eeprom_write_byte((BYTE *)(EE_HW_PART_NUM_LOC + writeOffset + i), *hwPartNumPtr);
    35da:	f8 01       	movw	r30, r16
    35dc:	61 91       	ld	r22, Z+
    35de:	8f 01       	movw	r16, r30
    35e0:	ce 01       	movw	r24, r28
    35e2:	0e 94 09 20 	call	0x4012	; 0x4012 <eeprom_write_byte>
    35e6:	21 96       	adiw	r28, 0x01	; 1
        writeSize = 5;
        writeOffset = 8;
    }

    _CLI();
    for(i = 0; i < writeSize; i++)
    35e8:	0e 15       	cp	r16, r14
    35ea:	1f 05       	cpc	r17, r15
    35ec:	a1 f7       	brne	.-24     	; 0x35d6 <writeHwPartNumToEeprom+0x5e>
    {
        eeprom_busy_wait();
        eeprom_write_byte((BYTE *)(EE_HW_PART_NUM_LOC + writeOffset + i), *hwPartNumPtr);
        hwPartNumPtr++;
    }
    eeprom_busy_wait();
    35ee:	f9 99       	sbic	0x1f, 1	; 31
    35f0:	d2 cf       	rjmp	.-92     	; 0x3596 <writeHwPartNumToEeprom+0x1e>
    35f2:	d3 cf       	rjmp	.-90     	; 0x359a <writeHwPartNumToEeprom+0x22>
        writeOffset = 0;
    }
    else if(segmentNumber == 1)
    {
        writeSize = 5;
        writeOffset = 8;
    35f4:	c8 e0       	ldi	r28, 0x08	; 8
        writeSize = 8;
        writeOffset = 0;
    }
    else if(segmentNumber == 1)
    {
        writeSize = 5;
    35f6:	25 e0       	ldi	r18, 0x05	; 5
    35f8:	df cf       	rjmp	.-66     	; 0x35b8 <writeHwPartNumToEeprom+0x40>

000035fa <__vector_12>:
DATE:       WHO:  CHANGE DESCRIPTION:
======================================================================
05/08/2004  BWT   Created.
*******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    35fa:	1f 92       	push	r1
    35fc:	0f 92       	push	r0
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	0f 92       	push	r0
    3602:	11 24       	eor	r1, r1
    3604:	8f 93       	push	r24
    3606:	9f 93       	push	r25
    scbyTicksPending++;
    3608:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <scbyTicksPending>
    360c:	8f 5f       	subi	r24, 0xFF	; 255
    360e:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <scbyTicksPending>
    OCR1A  = OCR1A_COUNT_FOR_TICK; // reset output compare value;		
    3612:	89 e0       	ldi	r24, 0x09	; 9
    3614:	9d e3       	ldi	r25, 0x3D	; 61
    3616:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    361a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
} 
    361e:	9f 91       	pop	r25
    3620:	8f 91       	pop	r24
    3622:	0f 90       	pop	r0
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	0f 90       	pop	r0
    3628:	1f 90       	pop	r1
    362a:	18 95       	reti

0000362c <main>:
/*******************************************************************************/

/*******************************************************************************/

int main(void)
{    
    362c:	cf 93       	push	r28
    362e:	df 93       	push	r29
    3630:	00 d0       	rcall	.+0      	; 0x3632 <main+0x6>
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62

    _CLI(); //disable all interrupts
    3636:	f8 94       	cli
    //move interrupts back to application section
    //at this point IVSEL bit is set and we need to reset it
    MCUCR |= 0x01;//set the IVCE bit
    3638:	85 b7       	in	r24, 0x35	; 53
    363a:	81 60       	ori	r24, 0x01	; 1
    363c:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0x00; //reset the IVSEL and IVCE bit    
    363e:	15 be       	out	0x35, r1	; 53
======================================================================
07/07/2005  VS       Initial Creation
*******************************************************************************/
static void hwInit(void)
{
    CONFIG_PORTB_DDR;
    3640:	84 b1       	in	r24, 0x04	; 4
    3642:	8b 69       	ori	r24, 0x9B	; 155
    3644:	84 b9       	out	0x04, r24	; 4
    CONFIG_PORTC_DDR;
    3646:	87 b1       	in	r24, 0x07	; 7
    3648:	8f 6c       	ori	r24, 0xCF	; 207
    364a:	87 b9       	out	0x07, r24	; 7
    CONFIG_PORTD_DDR;
    364c:	8a b1       	in	r24, 0x0a	; 10
    364e:	8b 69       	ori	r24, 0x9B	; 155
    3650:	8a b9       	out	0x0a, r24	; 10
    CONFIG_PORTE_DDR;
    3652:	1d b8       	out	0x0d, r1	; 13
    
    PORTB = 0;
    3654:	15 b8       	out	0x05, r1	; 5
    PORTD = 0;
    3656:	1b b8       	out	0x0b, r1	; 11
/*******************************************************************************/

// Read and store the HW config (Wired vs Wireless) from EEPROM 
static void readHwConfig(void)
{
    eeprom_busy_wait();
    3658:	f9 99       	sbic	0x1f, 1	; 31
    365a:	fe cf       	rjmp	.-4      	; 0x3658 <main+0x2c>

    if (eeprom_read_byte((BYTE *)EE_HW_CONFIG_LOC) == 1)
    365c:	8b e6       	ldi	r24, 0x6B	; 107
    365e:	97 e0       	ldi	r25, 0x07	; 7
    3660:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_read_byte>
    3664:	81 30       	cpi	r24, 0x01	; 1
    3666:	09 f4       	brne	.+2      	; 0x366a <main+0x3e>
    3668:	97 c0       	rjmp	.+302    	; 0x3798 <main+0x16c>
    {
        hwConfig = HW_TYPE_WIRELESS;
    }
    else
    {
        hwConfig = HW_TYPE_WIRED;
    366a:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <hwConfig>
/*******************************************************************************/

/*******************************************************************************/

int main(void)
{    
    366e:	04 eb       	ldi	r16, 0xB4	; 180
    3670:	16 e0       	ldi	r17, 0x06	; 6
    BYTE i;
    
    for(i = 0; i < LENGTH_SERIAL_NUM; i++)
    {
        eeprom_busy_wait();
        serialNum[i] = eeprom_read_byte((BYTE *)(EE_SERIAL_NUM_LOC + i));
    3672:	86 ea       	ldi	r24, 0xA6	; 166
    3674:	97 e0       	ldi	r25, 0x07	; 7
    3676:	9c 01       	movw	r18, r24
    3678:	24 5b       	subi	r18, 0xB4	; 180
    367a:	36 40       	sbci	r19, 0x06	; 6
    367c:	79 01       	movw	r14, r18
{
    BYTE i;
    
    for(i = 0; i < LENGTH_SERIAL_NUM; i++)
    {
        eeprom_busy_wait();
    367e:	f9 99       	sbic	0x1f, 1	; 31
    3680:	fe cf       	rjmp	.-4      	; 0x367e <main+0x52>
        serialNum[i] = eeprom_read_byte((BYTE *)(EE_SERIAL_NUM_LOC + i));
    3682:	c7 01       	movw	r24, r14
    3684:	80 0f       	add	r24, r16
    3686:	91 1f       	adc	r25, r17
    3688:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_read_byte>
    368c:	f8 01       	movw	r30, r16
    368e:	81 93       	st	Z+, r24
    3690:	8f 01       	movw	r16, r30
// Read and store the device Serial Number from EEPROM
static void readSerialNum(void)
{
    BYTE i;
    
    for(i = 0; i < LENGTH_SERIAL_NUM; i++)
    3692:	f6 e0       	ldi	r31, 0x06	; 6
    3694:	0e 3b       	cpi	r16, 0xBE	; 190
    3696:	1f 07       	cpc	r17, r31
    3698:	91 f7       	brne	.-28     	; 0x367e <main+0x52>
static void readFwVersion(void)
{
    PGM_P p; // Pointer used to locate const strings stored in PROGMEM
    
    // Retrieve the version string from Flash and then copy
    memcpy_P(&p, &versionInfoArray[0], sizeof(PGM_P));
    369a:	42 e0       	ldi	r20, 0x02	; 2
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	60 ea       	ldi	r22, 0xA0	; 160
    36a0:	71 e0       	ldi	r23, 0x01	; 1
    36a2:	ce 01       	movw	r24, r28
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <memcpy_P>
    strcpy_P(fwVersion, p);
    36aa:	69 81       	ldd	r22, Y+1	; 0x01
    36ac:	7a 81       	ldd	r23, Y+2	; 0x02
    36ae:	84 ea       	ldi	r24, 0xA4	; 164
    36b0:	96 e0       	ldi	r25, 0x06	; 6
    36b2:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <strcpy_P>
    hwInit();
    // Read config data from EEPROM
    readHwConfig();
    readSerialNum();
    readFwVersion();
    readCalValues();
    36b6:	0e 94 c0 08 	call	0x1180	; 0x1180 <readCalValues>
    
    // Initialize application level routines.
    appInit();
    36ba:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <appInit>
    turnOnAllLEDs();
    36be:	0e 94 16 19 	call	0x322c	; 0x322c <turnOnAllLEDs>
	initUART();
    36c2:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <initUART>
10/10/2006   Vijay Soni       Initial Creation
10/16/2006   Robert Weinmann  Added Interrupt Enable for Output Compare match
*******************************************************************************/
static void SchedulerInit(void)
{
    TCCR1A = 0; // Use OCR1A for TOP count
    36c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    TCCR1B = _BV(WGM12) | _BV(CS10); // CTC mode, no clock pre-scaler
    36ca:	89 e0       	ldi	r24, 0x09	; 9
    36cc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    TIMSK1 |= _BV(OCIE1A); // Enable Output Compare A Match interrupt
    36d0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
    36d4:	82 60       	ori	r24, 0x02	; 2
    36d6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
    OCR1A = OCR1A_COUNT_FOR_TICK;    
    36da:	89 e0       	ldi	r24, 0x09	; 9
    36dc:	9d e3       	ldi	r25, 0x3D	; 61
    36de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    36e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

    scbyCurrentTick = LAST_TICK; //initial value, next value will be 0
    36e6:	8f ef       	ldi	r24, 0xFF	; 255
    36e8:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <scbyCurrentTick>
    scbyTicksPending = 0;
    36ec:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <scbyTicksPending>
    turnOnAllLEDs();
	initUART();
    // Initialize scheduler
    SchedulerInit();
    // Enable interrupts
    _SEI();
    36f0:	78 94       	sei
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    36f2:	9f e0       	ldi	r25, 0x0F	; 15
    36f4:	88 e1       	ldi	r24, 0x18	; 24
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	a8 95       	wdr
    36fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    3700:	0f be       	out	0x3f, r0	; 63
    3702:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>

    // Enable watch dog timer for 2 second duration
    wdt_enable(WDTO_2S);
    //sendDeviceInfo();
	resetConnectedSensors();
    3706:	0e 94 43 12 	call	0x2486	; 0x2486 <resetConnectedSensors>
    sendPingAllSensors(); // Prevent connected sensors from 'No CAN traffic' error state
    370a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <sendPingAllSensors>
    /* Start the task manager loop. */
    for (;;)
    {
        //Run0TickTask calls functions that are not time critical.
        //As the 0Tick Task is only serviced when idle
        if (scbyTicksPending == 0)//Ticks Pending == 0
    370e:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <scbyTicksPending>
    3712:	88 23       	and	r24, r24
    3714:	29 f1       	breq	.+74     	; 0x3760 <main+0x134>
            
        }
        else  // Ticks Pending is > 0
        {            
			// _CLI();// disable interrupts as scbyTicksPending  and scbyCurrentTick is read by interrupt routines
            wdt_reset(); //service the watch dog timer every 1 ms
    3716:	a8 95       	wdr
            scbyTicksPending--;
    3718:	81 50       	subi	r24, 0x01	; 1
    371a:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <scbyTicksPending>
            // _SEI(); // enable interrupts
            if (scbyCurrentTick == LAST_TICK)// Last Tick
    371e:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <scbyCurrentTick>
    3722:	8f 3f       	cpi	r24, 0xFF	; 255
    3724:	21 f1       	breq	.+72     	; 0x376e <main+0x142>
            {
                scbyCurrentTick = 0;
            }
            else
            {
                scbyCurrentTick++;
    3726:	8f 5f       	subi	r24, 0xFF	; 255
    3728:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <scbyCurrentTick>
            }
            
            Run1TickTasks(); //every ~0.97 ms
    372c:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <Run1TickTasks>

            //Run one of the following tasks every time as well.
            if (scbyCurrentTick & RUN_2_TICK_MASK)//Run 2 Tick Tasks
    3730:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <scbyCurrentTick>
    3734:	80 fd       	sbrc	r24, 0
    3736:	18 c0       	rjmp	.+48     	; 0x3768 <main+0x13c>
            {
                Run2TickTasks(); // every ~1.95 ms
            }
            else if (scbyCurrentTick & RUN_4_TICK_MASK)// Run 4 Tick Tasks
    3738:	81 fd       	sbrc	r24, 1
    373a:	1c c0       	rjmp	.+56     	; 0x3774 <main+0x148>
            {
                Run4TickTasks(); // every ~3.9 ms
            }
            else if (scbyCurrentTick & RUN_8_TICK_MASK)// Run 8 Tick Tasks
    373c:	82 fd       	sbrc	r24, 2
    373e:	1d c0       	rjmp	.+58     	; 0x377a <main+0x14e>
            {
                Run8TickTasks(); //every ~7.8 ms
            }
            else if (scbyCurrentTick & RUN_16_TICK_MASK)// Run 16 Tick Tasks
    3740:	83 fd       	sbrc	r24, 3
    3742:	1e c0       	rjmp	.+60     	; 0x3780 <main+0x154>
            {
                Run16TickTasks(); //every ~15.6 ms
            }
            else if (scbyCurrentTick & RUN_32_TICK_MASK)// Run 32 Tick Tasks
    3744:	84 fd       	sbrc	r24, 4
    3746:	1f c0       	rjmp	.+62     	; 0x3786 <main+0x15a>
            {
                Run32TickTasks(); // every ~31.2 ms
            }
            else if (scbyCurrentTick & RUN_64_TICK_MASK)
    3748:	85 fd       	sbrc	r24, 5
    374a:	20 c0       	rjmp	.+64     	; 0x378c <main+0x160>
            {
                Run64TickTasks(); //every ~62.1 ms
            }
            else if (scbyCurrentTick & RUN_128_TICK_MASK)
    374c:	86 fd       	sbrc	r24, 6
    374e:	21 c0       	rjmp	.+66     	; 0x3792 <main+0x166>
            {
                Run128TickTasks(); //every ~124.1 ms
            }
            else if (scbyCurrentTick & RUN_256_TICK_MASK)
    3750:	87 ff       	sbrs	r24, 7
    3752:	dd cf       	rjmp	.-70     	; 0x370e <main+0xe2>
            {
                Run256TickTasks(); // every ~248.3 ms
    3754:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <Run256TickTasks>
    /* Start the task manager loop. */
    for (;;)
    {
        //Run0TickTask calls functions that are not time critical.
        //As the 0Tick Task is only serviced when idle
        if (scbyTicksPending == 0)//Ticks Pending == 0
    3758:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <scbyTicksPending>
    375c:	81 11       	cpse	r24, r1
    375e:	db cf       	rjmp	.-74     	; 0x3716 <main+0xea>
        {
            wdt_reset();
    3760:	a8 95       	wdr
            Run0TickTasks();
    3762:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <Run0TickTasks>
    3766:	d3 cf       	rjmp	.-90     	; 0x370e <main+0xe2>
            Run1TickTasks(); //every ~0.97 ms

            //Run one of the following tasks every time as well.
            if (scbyCurrentTick & RUN_2_TICK_MASK)//Run 2 Tick Tasks
            {
                Run2TickTasks(); // every ~1.95 ms
    3768:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <Run2TickTasks>
    376c:	d0 cf       	rjmp	.-96     	; 0x370e <main+0xe2>
            wdt_reset(); //service the watch dog timer every 1 ms
            scbyTicksPending--;
            // _SEI(); // enable interrupts
            if (scbyCurrentTick == LAST_TICK)// Last Tick
            {
                scbyCurrentTick = 0;
    376e:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <scbyCurrentTick>
    3772:	dc cf       	rjmp	.-72     	; 0x372c <main+0x100>
            {
                Run2TickTasks(); // every ~1.95 ms
            }
            else if (scbyCurrentTick & RUN_4_TICK_MASK)// Run 4 Tick Tasks
            {
                Run4TickTasks(); // every ~3.9 ms
    3774:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <Run4TickTasks>
    3778:	ca cf       	rjmp	.-108    	; 0x370e <main+0xe2>
            }
            else if (scbyCurrentTick & RUN_8_TICK_MASK)// Run 8 Tick Tasks
            {
                Run8TickTasks(); //every ~7.8 ms
    377a:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <Run8TickTasks>
    377e:	c7 cf       	rjmp	.-114    	; 0x370e <main+0xe2>
            }
            else if (scbyCurrentTick & RUN_16_TICK_MASK)// Run 16 Tick Tasks
            {
                Run16TickTasks(); //every ~15.6 ms
    3780:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <Run16TickTasks>
    3784:	c4 cf       	rjmp	.-120    	; 0x370e <main+0xe2>
            }
            else if (scbyCurrentTick & RUN_32_TICK_MASK)// Run 32 Tick Tasks
            {
                Run32TickTasks(); // every ~31.2 ms
    3786:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <Run32TickTasks>
    378a:	c1 cf       	rjmp	.-126    	; 0x370e <main+0xe2>
            }
            else if (scbyCurrentTick & RUN_64_TICK_MASK)
            {
                Run64TickTasks(); //every ~62.1 ms
    378c:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <Run64TickTasks>
    3790:	be cf       	rjmp	.-132    	; 0x370e <main+0xe2>
            }
            else if (scbyCurrentTick & RUN_128_TICK_MASK)
            {
                Run128TickTasks(); //every ~124.1 ms
    3792:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <Run128TickTasks>
    3796:	bb cf       	rjmp	.-138    	; 0x370e <main+0xe2>
{
    eeprom_busy_wait();

    if (eeprom_read_byte((BYTE *)EE_HW_CONFIG_LOC) == 1)
    {
        hwConfig = HW_TYPE_WIRELESS;
    3798:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <hwConfig>
    379c:	68 cf       	rjmp	.-304    	; 0x366e <main+0x42>

0000379e <getHwConfig>:

// Returns the device HW config (Wired vs Wireless) 
BYTE getHwConfig(void)
{
    return hwConfig;
}
    379e:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <hwConfig>
    37a2:	08 95       	ret

000037a4 <getSerialNumPtr>:
// Returns a pointer to the characters of the serial number string
// This assumes a format of ABC-xxxx
BYTE * getSerialNumPtr(void)
{
    return (BYTE *)(&serialNum[0]); 
}
    37a4:	84 eb       	ldi	r24, 0xB4	; 180
    37a6:	96 e0       	ldi	r25, 0x06	; 6
    37a8:	08 95       	ret

000037aa <getFwVersionPtr>:

// Returns a pointer to the characters of the firmware version string
char * getFwVersionPtr(void)
{
    return (char *)(&fwVersion[0]);
}
    37aa:	84 ea       	ldi	r24, 0xA4	; 164
    37ac:	96 e0       	ldi	r25, 0x06	; 6
    37ae:	08 95       	ret

000037b0 <jumpToBootloader>:

void jumpToBootloader(void)
{
    _CLI(); //disable all interrupts
    37b0:	f8 94       	cli
    //move interrupts back to application section
    //at this point IVSEL bit is set and we need to reset it
    MCUCR |= 0x01;//set the IVCE bit
    37b2:	85 b7       	in	r24, 0x35	; 53
    37b4:	81 60       	ori	r24, 0x01	; 1
    37b6:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0x02; //reset the IVSEL and IVCE bit
    37b8:	82 e0       	ldi	r24, 0x02	; 2
    37ba:	85 bf       	out	0x35, r24	; 53
#ifdef MCU_64M1
    asm("jmp (0x7000*2)");  	//jump to boot sector
    37bc:	0c 94 00 70 	jmp	0xe000	; 0xe000 <__data_load_end+0x9fc2>
    37c0:	08 95       	ret

000037c2 <checkSystemDataRequests>:
}

// Handle data ready to be relayed between
//  the display and sensors via WiFi or CAN
void checkSystemDataRequests(void)
{
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
    37ce:	27 97       	sbiw	r28, 0x07	; 7
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    BYTE tempByte;
    BYTE devInfoDone;
	
	// Check if the CAN seq for 
	//  gathering device info has timed out
	if((getRunDeviceInfoSeq()) && (getDevInfoTimer() >= TIMER_COUNT_1_5_SEC_4HZ))
    37da:	0e 94 fb 07 	call	0xff6	; 0xff6 <getRunDeviceInfoSeq>
    37de:	81 11       	cpse	r24, r1
    37e0:	59 c0       	rjmp	.+178    	; 0x3894 <checkSystemDataRequests+0xd2>
		resetDeviceInfoBuffer();
		devInfoTimeoutFlag = 1;
		reqFlags = getCANDataRequestFlags();
	}
	
    reqFlags = getCANDataRequestFlags();	
    37e2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
    37e6:	18 2f       	mov	r17, r24
    
    if(reqFlags)
    37e8:	88 23       	and	r24, r24
    37ea:	81 f0       	breq	.+32     	; 0x380c <checkSystemDataRequests+0x4a>
    {
        if(reqFlags & UNIT_DEV_INFO_REQ_BITMASK)
    37ec:	80 fd       	sbrc	r24, 0
    37ee:	70 c0       	rjmp	.+224    	; 0x38d0 <checkSystemDataRequests+0x10e>
            txDevInfoIndex = 0;
			reqFlags = getCANDataRequestFlags();
            setCANDataRequestFlags(reqFlags & ~(UNIT_DEV_INFO_REQ_BITMASK));

        }
        if(reqFlags & FW_UPDATE_ACK_RESP_BITMASK)
    37f0:	11 fd       	sbrc	r17, 1
    37f2:	ac c0       	rjmp	.+344    	; 0x394c <checkSystemDataRequests+0x18a>
        {
            // Send FW packet ack message
			reqFlags = getCANDataRequestFlags();
            setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_ACK_RESP_BITMASK));
        }
        if(reqFlags & START_FW_UPDATE_RESP_BITMASK)
    37f4:	12 fd       	sbrc	r17, 2
    37f6:	04 c1       	rjmp	.+520    	; 0x3a00 <checkSystemDataRequests+0x23e>
            {
                //Don't clear the flag until a data packet arrives - resend until successful
                sendStartFwUpdateAckMessage();
            }
        }
        if(reqFlags & FW_UPDATE_DATA_RX_BITMASK)
    37f8:	13 fd       	sbrc	r17, 3
    37fa:	59 c0       	rjmp	.+178    	; 0x38ae <checkSystemDataRequests+0xec>
            txBytesRemaining = 250;
            txIndex = 0;
			reqFlags = getCANDataRequestFlags();
			setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_DATA_RX_BITMASK));
        }
        if(reqFlags & DEV_INFO_READY_BITMASK) // Send a device info packet via ASIP
    37fc:	14 fd       	sbrc	r17, 4
    37fe:	af c0       	rjmp	.+350    	; 0x395e <checkSystemDataRequests+0x19c>
              }				
			}
			devInfoTimeoutFlag = 0;            
            wdt_reset();
        }
        if(reqFlags & SYSTEM_DEV_INFO_REQ_BITMASK) // Prep for Device Info sequence
    3800:	15 fd       	sbrc	r17, 5
    3802:	d9 c0       	rjmp	.+434    	; 0x39b6 <checkSystemDataRequests+0x1f4>

				wirelessDevInfoPending = 1;
                wdt_reset();        
            }
        }
        if(reqFlags & BIT_DATA_RX_BITMASK) // BIT failure reported by CAN
    3804:	16 fd       	sbrc	r17, 6
    3806:	4e c1       	rjmp	.+668    	; 0x3aa4 <checkSystemDataRequests+0x2e2>
				sendBITMessage((WORD)(tempByte), 0); // Severity 'critical'
				reqFlags = getCANDataRequestFlags();
				setCANDataRequestFlags(reqFlags & ~(BIT_DATA_RX_BITMASK));
			}
        }
        if(reqFlags & FIELD_CAL_REQ_BITMASK) // Cal Status messages pending
    3808:	17 fd       	sbrc	r17, 7
    380a:	22 c1       	rjmp	.+580    	; 0x3a50 <checkSystemDataRequests+0x28e>
            }
        }
    }
    
    // Send more FW image data if the sensor module is ready
    if((pendingTxFlag) && (txBytesRemaining))
    380c:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <pendingTxFlag.2538>
    3810:	88 23       	and	r24, r24
    3812:	c1 f0       	breq	.+48     	; 0x3844 <checkSystemDataRequests+0x82>
    3814:	10 91 53 06 	lds	r17, 0x0653	; 0x800653 <txBytesRemaining.2540>
    3818:	11 23       	and	r17, r17
    381a:	a1 f0       	breq	.+40     	; 0x3844 <checkSystemDataRequests+0x82>
    {        
        if(txBytesRemaining < 8)
    381c:	18 30       	cpi	r17, 0x08	; 8
    381e:	08 f0       	brcs	.+2      	; 0x3822 <checkSystemDataRequests+0x60>
    3820:	fd c0       	rjmp	.+506    	; 0x3a1c <checkSystemDataRequests+0x25a>
        {
            // With a starting packet size of 250 this remainder should always be 2 bytes
            sendCANFwUpdateShortDataPacket(getFwDataPtr() + txIndex, txBytesRemaining);
    3822:	0e 94 de 07 	call	0xfbc	; 0xfbc <getFwDataPtr>
    3826:	20 91 52 06 	lds	r18, 0x0652	; 0x800652 <txIndex.2542>
    382a:	61 2f       	mov	r22, r17
    382c:	82 0f       	add	r24, r18
    382e:	91 1d       	adc	r25, r1
    3830:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <sendCANFwUpdateShortDataPacket>
            txBytesRemaining = 0;
    3834:	10 92 53 06 	sts	0x0653, r1	; 0x800653 <txBytesRemaining.2540>
            pendingTxFlag = 0;
    3838:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <pendingTxFlag.2538>
            txIndex = 0;
    383c:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <txIndex.2542>

            sendFwUpdatePacketAckMessage(); // Send the Packet Ack to the display
    3840:	0e 94 38 06 	call	0xc70	; 0xc70 <sendFwUpdatePacketAckMessage>
            txIndex += 8;
            txBytesRemaining -= 8;
        }
    }
    // Also check for device info CAN requests
    if((pendingDevInfoTxFlag) && (txDevInfoBytesRemaining))
    3844:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <pendingDevInfoTxFlag.2539>
    3848:	88 23       	and	r24, r24
    384a:	21 f0       	breq	.+8      	; 0x3854 <checkSystemDataRequests+0x92>
    384c:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <txDevInfoBytesRemaining.2541>
    3850:	81 11       	cpse	r24, r1
    3852:	0b c0       	rjmp	.+22     	; 0x386a <checkSystemDataRequests+0xa8>
        {
            txDevInfoBytesRemaining -= 8;
        }
    }

}
    3854:	27 96       	adiw	r28, 0x07	; 7
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61
    3860:	df 91       	pop	r29
    3862:	cf 91       	pop	r28
    3864:	1f 91       	pop	r17
    3866:	0f 91       	pop	r16
    3868:	08 95       	ret
        }
    }
    // Also check for device info CAN requests
    if((pendingDevInfoTxFlag) && (txDevInfoBytesRemaining))
    {
        sendDeviceInfoData(&outgoingDevInfoMsg[txDevInfoIndex]);
    386a:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <txDevInfoIndex.2543>
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	86 5a       	subi	r24, 0xA6	; 166
    3872:	99 4f       	sbci	r25, 0xF9	; 249
    3874:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <sendDeviceInfoData>
        txDevInfoIndex += 8;
    3878:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <txDevInfoIndex.2543>
    387c:	88 5f       	subi	r24, 0xF8	; 248
    387e:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <txDevInfoIndex.2543>
        if(txDevInfoBytesRemaining < 8)
    3882:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <txDevInfoBytesRemaining.2541>
    3886:	88 30       	cpi	r24, 0x08	; 8
    3888:	08 f4       	brcc	.+2      	; 0x388c <checkSystemDataRequests+0xca>
    388a:	db c0       	rjmp	.+438    	; 0x3a42 <checkSystemDataRequests+0x280>
            pendingDevInfoTxFlag = 0;
            txDevInfoIndex = 0;
        }
        else
        {
            txDevInfoBytesRemaining -= 8;
    388c:	88 50       	subi	r24, 0x08	; 8
    388e:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <txDevInfoBytesRemaining.2541>
    3892:	e0 cf       	rjmp	.-64     	; 0x3854 <checkSystemDataRequests+0x92>
    BYTE tempByte;
    BYTE devInfoDone;
	
	// Check if the CAN seq for 
	//  gathering device info has timed out
	if((getRunDeviceInfoSeq()) && (getDevInfoTimer() >= TIMER_COUNT_1_5_SEC_4HZ))
    3894:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <getDevInfoTimer>
    3898:	86 30       	cpi	r24, 0x06	; 6
    389a:	08 f4       	brcc	.+2      	; 0x389e <checkSystemDataRequests+0xdc>
    389c:	a2 cf       	rjmp	.-188    	; 0x37e2 <checkSystemDataRequests+0x20>
	{
		// Abort the dev info seq and move on
		resetDeviceInfoBuffer();
    389e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <resetDeviceInfoBuffer>
		devInfoTimeoutFlag = 1;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <devInfoTimeoutFlag.2550>
		reqFlags = getCANDataRequestFlags();
    38a8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
    38ac:	9a cf       	rjmp	.-204    	; 0x37e2 <checkSystemDataRequests+0x20>
            }
        }
        if(reqFlags & FW_UPDATE_DATA_RX_BITMASK)
        {
            // FW Update data 
            pendingTxFlag = 1;
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	80 93 54 06 	sts	0x0654, r24	; 0x800654 <pendingTxFlag.2538>
            txBytesRemaining = 250;
    38b4:	8a ef       	ldi	r24, 0xFA	; 250
    38b6:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <txBytesRemaining.2540>
            txIndex = 0;
    38ba:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <txIndex.2542>
			reqFlags = getCANDataRequestFlags();
    38be:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
    38c2:	18 2f       	mov	r17, r24
			setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_DATA_RX_BITMASK));
    38c4:	87 7f       	andi	r24, 0xF7	; 247
    38c6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <setCANDataRequestFlags>
        }
        if(reqFlags & DEV_INFO_READY_BITMASK) // Send a device info packet via ASIP
    38ca:	14 ff       	sbrs	r17, 4
    38cc:	99 cf       	rjmp	.-206    	; 0x3800 <checkSystemDataRequests+0x3e>
    38ce:	47 c0       	rjmp	.+142    	; 0x395e <checkSystemDataRequests+0x19c>
    38d0:	4a e5       	ldi	r20, 0x5A	; 90
    38d2:	56 e0       	ldi	r21, 0x06	; 6
    38d4:	84 ea       	ldi	r24, 0xA4	; 164
    38d6:	96 e0       	ldi	r25, 0x06	; 6
	
    reqFlags = getCANDataRequestFlags();	
    
    if(reqFlags)
    {
        if(reqFlags & UNIT_DEV_INFO_REQ_BITMASK)
    38d8:	fa 01       	movw	r30, r20

    tempPtr = getSerialNumPtr();

    for(i = 0; i < 74; i++)
    {
        outgoingDevInfoMsg[i] = 0;
    38da:	11 92       	st	Z+, r1
    BYTE i;
    BYTE * tempPtr;

    tempPtr = getSerialNumPtr();

    for(i = 0; i < 74; i++)
    38dc:	8e 17       	cp	r24, r30
    38de:	9f 07       	cpc	r25, r31
    38e0:	e1 f7       	brne	.-8      	; 0x38da <checkSystemDataRequests+0x118>
    38e2:	84 eb       	ldi	r24, 0xB4	; 180
    38e4:	96 e0       	ldi	r25, 0x06	; 6
    38e6:	e4 e6       	ldi	r30, 0x64	; 100
    38e8:	f6 e0       	ldi	r31, 0x06	; 6
    }

    // Build payload
    for(i = 0; i < 10; i++)
    {
        outgoingDevInfoMsg[i] = *tempPtr++;
    38ea:	dc 01       	movw	r26, r24
    38ec:	2d 91       	ld	r18, X+
    38ee:	cd 01       	movw	r24, r26
    38f0:	da 01       	movw	r26, r20
    38f2:	2d 93       	st	X+, r18
    38f4:	ad 01       	movw	r20, r26
    {
        outgoingDevInfoMsg[i] = 0;
    }

    // Build payload
    for(i = 0; i < 10; i++)
    38f6:	b6 e0       	ldi	r27, 0x06	; 6
    38f8:	44 36       	cpi	r20, 0x64	; 100
    38fa:	5b 07       	cpc	r21, r27
    38fc:	b1 f7       	brne	.-20     	; 0x38ea <checkSystemDataRequests+0x128>
    38fe:	a4 ea       	ldi	r26, 0xA4	; 164
    3900:	b6 e0       	ldi	r27, 0x06	; 6
    3902:	24 e7       	ldi	r18, 0x74	; 116
    3904:	36 e0       	ldi	r19, 0x06	; 6

    tempPtr = (BYTE *)getFwVersionPtr();

    for(i = 10; i < 26; i++)
    {
        outgoingDevInfoMsg[i] = *tempPtr++;
    3906:	8d 91       	ld	r24, X+
    3908:	81 93       	st	Z+, r24
        outgoingDevInfoMsg[i] = *tempPtr++;
    }

    tempPtr = (BYTE *)getFwVersionPtr();

    for(i = 10; i < 26; i++)
    390a:	2e 17       	cp	r18, r30
    390c:	3f 07       	cpc	r19, r31
    390e:	d9 f7       	brne	.-10     	; 0x3906 <checkSystemDataRequests+0x144>
    {
        outgoingDevInfoMsg[i] = *tempPtr++;
    }

    strcpy_P(&outgoingDevInfoMsg[26], FwPartNum);
    3910:	64 ea       	ldi	r22, 0xA4	; 164
    3912:	71 e0       	ldi	r23, 0x01	; 1
    3914:	84 e7       	ldi	r24, 0x74	; 116
    3916:	96 e0       	ldi	r25, 0x06	; 6
    3918:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <strcpy_P>

    readHwVersion(&outgoingDevInfoMsg[42]);
    391c:	84 e8       	ldi	r24, 0x84	; 132
    391e:	96 e0       	ldi	r25, 0x06	; 6
    3920:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <readHwVersion>
    readHwPartNum(&outgoingDevInfoMsg[58]);
    3924:	84 e9       	ldi	r24, 0x94	; 148
    3926:	96 e0       	ldi	r25, 0x06	; 6
    3928:	0e 94 3f 1a 	call	0x347e	; 0x347e <readHwPartNum>
    {
        if(reqFlags & UNIT_DEV_INFO_REQ_BITMASK)
        {
            // build FW version msg...
            buildCANDeviceInfo();
            pendingDevInfoTxFlag = 1;
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <pendingDevInfoTxFlag.2539>
            txDevInfoBytesRemaining = 74;
    3932:	8a e4       	ldi	r24, 0x4A	; 74
    3934:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <txDevInfoBytesRemaining.2541>
            txDevInfoIndex = 0;
    3938:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <txDevInfoIndex.2543>
			reqFlags = getCANDataRequestFlags();
    393c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
    3940:	18 2f       	mov	r17, r24
            setCANDataRequestFlags(reqFlags & ~(UNIT_DEV_INFO_REQ_BITMASK));
    3942:	8e 7f       	andi	r24, 0xFE	; 254
    3944:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <setCANDataRequestFlags>

        }
        if(reqFlags & FW_UPDATE_ACK_RESP_BITMASK)
    3948:	11 ff       	sbrs	r17, 1
    394a:	54 cf       	rjmp	.-344    	; 0x37f4 <checkSystemDataRequests+0x32>
        {
            // Send FW packet ack message
			reqFlags = getCANDataRequestFlags();
    394c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
    3950:	18 2f       	mov	r17, r24
            setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_ACK_RESP_BITMASK));
    3952:	8d 7f       	andi	r24, 0xFD	; 253
    3954:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <setCANDataRequestFlags>
        }
        if(reqFlags & START_FW_UPDATE_RESP_BITMASK)
    3958:	12 ff       	sbrs	r17, 2
    395a:	4e cf       	rjmp	.-356    	; 0x37f8 <checkSystemDataRequests+0x36>
    395c:	51 c0       	rjmp	.+162    	; 0x3a00 <checkSystemDataRequests+0x23e>
			reqFlags = getCANDataRequestFlags();
			setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_DATA_RX_BITMASK));
        }
        if(reqFlags & DEV_INFO_READY_BITMASK) // Send a device info packet via ASIP
        {
			if(!getUARTTxBuffEmpty())			
    395e:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <getUARTTxBuffEmpty>
    3962:	88 23       	and	r24, r24
    3964:	09 f4       	brne	.+2      	; 0x3968 <checkSystemDataRequests+0x1a6>
    3966:	d1 c0       	rjmp	.+418    	; 0x3b0a <checkSystemDataRequests+0x348>
			{
				clearDevInfoTimer();
				return;
			}
			if(!devInfoTimeoutFlag) // Transmit if the last CAN sequence did not time out
    3968:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <devInfoTimeoutFlag.2550>
    396c:	88 23       	and	r24, r24
    396e:	09 f4       	brne	.+2      	; 0x3972 <checkSystemDataRequests+0x1b0>
    3970:	d9 c0       	rjmp	.+434    	; 0x3b24 <checkSystemDataRequests+0x362>
				devInfoTxCount++;
				devInfoTimeoutTxRetry = 0;
			}
			else // A timeout has occurred
			{
				if(devInfoTimeoutTxRetry < 2)
    3972:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <devInfoTimeoutTxRetry.2551>
    3976:	82 30       	cpi	r24, 0x02	; 2
    3978:	08 f4       	brcc	.+2      	; 0x397c <checkSystemDataRequests+0x1ba>
    397a:	e6 c0       	rjmp	.+460    	; 0x3b48 <checkSystemDataRequests+0x386>
					clearDevInfoTimer();
				}
				else
				{
					// Abort and move on to the next sensor
					devInfoTimeoutTxRetry = 0;
    397c:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <devInfoTimeoutTxRetry.2551>
				}				
			}			
			if((devInfoTxCount > DEV_INFO_TX_RETRY_COUNT) || (devInfoTimeoutFlag))
			{
				devInfoTxCount = 0;
    3980:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <devInfoTxCount.2547>
				reqFlags = getCANDataRequestFlags();
    3984:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
    3988:	18 2f       	mov	r17, r24
				setCANDataRequestFlags(reqFlags & ~(DEV_INFO_READY_BITMASK));
    398a:	8f 7e       	andi	r24, 0xEF	; 239
    398c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <setCANDataRequestFlags>
				
              // Kick off the next device info request
              devInfoDone = sendNextTargetedDeviceInfoReq();
    3990:	0e 94 48 12 	call	0x2490	; 0x2490 <sendNextTargetedDeviceInfoReq>
    3994:	08 2f       	mov	r16, r24
			  clearDevInfoTimer(); // Reset the timer for receiving CAN data
    3996:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <clearDevInfoTimer>
              
              if(devInfoDone)
    399a:	00 23       	and	r16, r16
    399c:	39 f0       	breq	.+14     	; 0x39ac <checkSystemDataRequests+0x1ea>
              {
	              if(lastDevInfoSent)
    399e:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <lastDevInfoSent.2548>
    39a2:	81 11       	cpse	r24, r1
    39a4:	df c0       	rjmp	.+446    	; 0x3b64 <checkSystemDataRequests+0x3a2>
					clearRunDeviceInfoSeq();
					enableSensorDataTx();
				  }
				  else
				  {
					lastDevInfoSent = 1; // Force to iterate through one more time to Tx the last data
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	80 93 4f 06 	sts	0x064F, r24	; 0x80064f <lastDevInfoSent.2548>
				  }
              }				
			}
			devInfoTimeoutFlag = 0;            
    39ac:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <devInfoTimeoutFlag.2550>
            wdt_reset();
    39b0:	a8 95       	wdr
        }
        if(reqFlags & SYSTEM_DEV_INFO_REQ_BITMASK) // Prep for Device Info sequence
    39b2:	15 ff       	sbrs	r17, 5
    39b4:	27 cf       	rjmp	.-434    	; 0x3804 <checkSystemDataRequests+0x42>
        {
			setRunDeviceInfoSeq();
    39b6:	0e 94 fe 07 	call	0xffc	; 0xffc <setRunDeviceInfoSeq>
			devInfoTimeoutFlag = 0;
    39ba:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <devInfoTimeoutFlag.2550>
			
			if(wirelessDevInfoPending)
    39be:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <wirelessDevInfoPending.2549>
    39c2:	81 11       	cpse	r24, r1
    39c4:	85 c0       	rjmp	.+266    	; 0x3ad0 <checkSystemDataRequests+0x30e>
					}
				}				
				return;
			}
			
            devInfoDelayCount++;
    39c6:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <devInfoDelayCount.2545>
    39ca:	8f 5f       	subi	r24, 0xFF	; 255
    39cc:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <devInfoDelayCount.2545>

            if(devInfoDelayCount >= DEV_INFO_DELAY_TIME)  // Wait ~250ms for ping responses
    39d0:	84 30       	cpi	r24, 0x04	; 4
    39d2:	08 f4       	brcc	.+2      	; 0x39d6 <checkSystemDataRequests+0x214>
    39d4:	17 cf       	rjmp	.-466    	; 0x3804 <checkSystemDataRequests+0x42>
            {
                if(pingCount < SENSOR_PING_RETRY_COUNT)
    39d6:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <pingCount.2546>
    39da:	83 30       	cpi	r24, 0x03	; 3
    39dc:	08 f4       	brcc	.+2      	; 0x39e0 <checkSystemDataRequests+0x21e>
    39de:	98 c0       	rjmp	.+304    	; 0x3b10 <checkSystemDataRequests+0x34e>
					pingCount++;
					devInfoDelayCount = 0;
					return;
				}
				
				devInfoDelayCount = 0;
    39e0:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <devInfoDelayCount.2545>
                pingCount = 0;
    39e4:	10 92 4c 06 	sts	0x064C, r1	; 0x80064c <pingCount.2546>
				
                // Get the # of wired sensors that have responded to the ping plus the wireless
                tempByte = getConnectedSensorCount() + 1;
    39e8:	0e 94 89 12 	call	0x2512	; 0x2512 <getConnectedSensorCount>
				sendSensorCount(tempByte);
    39ec:	8f 5f       	subi	r24, 0xFF	; 255
    39ee:	0e 94 aa 12 	call	0x2554	; 0x2554 <sendSensorCount>
                sendDeviceInfo(); // Push the wireless sensor device info into the Tx queue
    39f2:	0e 94 30 08 	call	0x1060	; 0x1060 <sendDeviceInfo>

				wirelessDevInfoPending = 1;
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <wirelessDevInfoPending.2549>
                wdt_reset();        
    39fc:	a8 95       	wdr
    39fe:	02 cf       	rjmp	.-508    	; 0x3804 <checkSystemDataRequests+0x42>
            setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_ACK_RESP_BITMASK));
        }
        if(reqFlags & START_FW_UPDATE_RESP_BITMASK)
        {
            // Send FW Update Start ack message
            disableSensorDataTx();
    3a00:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <disableSensorDataTx>
            if((getIsTxIdle()) && (!getRunDeviceInfoSeq()))
    3a04:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <getIsTxIdle>
    3a08:	88 23       	and	r24, r24
    3a0a:	09 f4       	brne	.+2      	; 0x3a0e <checkSystemDataRequests+0x24c>
    3a0c:	f5 ce       	rjmp	.-534    	; 0x37f8 <checkSystemDataRequests+0x36>
    3a0e:	0e 94 fb 07 	call	0xff6	; 0xff6 <getRunDeviceInfoSeq>
    3a12:	81 11       	cpse	r24, r1
    3a14:	f1 ce       	rjmp	.-542    	; 0x37f8 <checkSystemDataRequests+0x36>
            {
                //Don't clear the flag until a data packet arrives - resend until successful
                sendStartFwUpdateAckMessage();
    3a16:	0e 94 57 06 	call	0xcae	; 0xcae <sendStartFwUpdateAckMessage>
    3a1a:	ee ce       	rjmp	.-548    	; 0x37f8 <checkSystemDataRequests+0x36>

            sendFwUpdatePacketAckMessage(); // Send the Packet Ack to the display
        }
        else
        {
            sendCANFwUpdateDataPacket(getFwDataPtr() + txIndex);
    3a1c:	0e 94 de 07 	call	0xfbc	; 0xfbc <getFwDataPtr>
    3a20:	20 91 52 06 	lds	r18, 0x0652	; 0x800652 <txIndex.2542>
    3a24:	82 0f       	add	r24, r18
    3a26:	91 1d       	adc	r25, r1
    3a28:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <sendCANFwUpdateDataPacket>
            txIndex += 8;
    3a2c:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <txIndex.2542>
    3a30:	88 5f       	subi	r24, 0xF8	; 248
    3a32:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <txIndex.2542>
            txBytesRemaining -= 8;
    3a36:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <txBytesRemaining.2540>
    3a3a:	88 50       	subi	r24, 0x08	; 8
    3a3c:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <txBytesRemaining.2540>
    3a40:	01 cf       	rjmp	.-510    	; 0x3844 <checkSystemDataRequests+0x82>
    {
        sendDeviceInfoData(&outgoingDevInfoMsg[txDevInfoIndex]);
        txDevInfoIndex += 8;
        if(txDevInfoBytesRemaining < 8)
        {
            txDevInfoBytesRemaining = 0;
    3a42:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <txDevInfoBytesRemaining.2541>
            pendingDevInfoTxFlag = 0;
    3a46:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <pendingDevInfoTxFlag.2539>
            txDevInfoIndex = 0;
    3a4a:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <txDevInfoIndex.2543>
    3a4e:	02 cf       	rjmp	.-508    	; 0x3854 <checkSystemDataRequests+0x92>
				setCANDataRequestFlags(reqFlags & ~(BIT_DATA_RX_BITMASK));
			}
        }
        if(reqFlags & FIELD_CAL_REQ_BITMASK) // Cal Status messages pending
        {
            tempByte = getConnectedSensorCount();
    3a50:	0e 94 89 12 	call	0x2512	; 0x2512 <getConnectedSensorCount>
    3a54:	18 2f       	mov	r17, r24
            
            if((getCalStatusResponseCount() >= tempByte) && (!getRunCalibrationFlag()))
    3a56:	0e 94 8c 12 	call	0x2518	; 0x2518 <getCalStatusResponseCount>
    3a5a:	81 17       	cp	r24, r17
    3a5c:	08 f4       	brcc	.+2      	; 0x3a60 <checkSystemDataRequests+0x29e>
    3a5e:	d6 ce       	rjmp	.-596    	; 0x380c <checkSystemDataRequests+0x4a>
    3a60:	0e 94 8f 04 	call	0x91e	; 0x91e <getRunCalibrationFlag>
    3a64:	81 11       	cpse	r24, r1
    3a66:	d2 ce       	rjmp	.-604    	; 0x380c <checkSystemDataRequests+0x4a>
            {                
                tempByte++; // Increment sensor count to include this sensor
                
                if(!calStatusDataReady)
    3a68:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <calStatusDataReady>
    3a6c:	88 23       	and	r24, r24
    3a6e:	09 f4       	brne	.+2      	; 0x3a72 <checkSystemDataRequests+0x2b0>
    3a70:	85 c0       	rjmp	.+266    	; 0x3b7c <checkSystemDataRequests+0x3ba>
                {
                    fillLocalCalStatusData();
                    calStatusDataReady = 1;
                }
                if((!getCalStatusAckReceivedFlag()) && (txRetryCount < 80)) // Retry results message for ~5 sec @ 62ms retry loop
    3a72:	0e 94 05 08 	call	0x100a	; 0x100a <getCalStatusAckReceivedFlag>
    3a76:	81 11       	cpse	r24, r1
    3a78:	05 c0       	rjmp	.+10     	; 0x3a84 <checkSystemDataRequests+0x2c2>
    3a7a:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <txRetryCount.2544>
    3a7e:	80 35       	cpi	r24, 0x50	; 80
    3a80:	08 f4       	brcc	.+2      	; 0x3a84 <checkSystemDataRequests+0x2c2>
    3a82:	9a c0       	rjmp	.+308    	; 0x3bb8 <checkSystemDataRequests+0x3f6>
                    transmitCalStatusInfoASIP(tempByte, getFwDataPtr());
                    txRetryCount++;
                }
                else
                {
					reqFlags = getCANDataRequestFlags();
    3a84:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
                    setCANDataRequestFlags(reqFlags & ~(FIELD_CAL_REQ_BITMASK));
    3a88:	8f 77       	andi	r24, 0x7F	; 127
    3a8a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <setCANDataRequestFlags>
                    clearCalStatusAckReceivedFlag();
    3a8e:	0e 94 08 08 	call	0x1010	; 0x1010 <clearCalStatusAckReceivedFlag>
                    calStatusDataReady = 0;
    3a92:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <calStatusDataReady>
                    txRetryCount = 0;
    3a96:	10 92 4b 06 	sts	0x064B, r1	; 0x80064b <txRetryCount.2544>
                    enableSensorDataTx();
    3a9a:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <enableSensorDataTx>
                    sendCANSensorDataEnableMsg();
    3a9e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <sendCANSensorDataEnableMsg>
    3aa2:	b4 ce       	rjmp	.-664    	; 0x380c <checkSystemDataRequests+0x4a>
                wdt_reset();        
            }
        }
        if(reqFlags & BIT_DATA_RX_BITMASK) // BIT failure reported by CAN
        {
            tempByte = getLastActiveBIT();
    3aa4:	0e 94 a9 08 	call	0x1152	; 0x1152 <getLastActiveBIT>
    3aa8:	08 2f       	mov	r16, r24
			
			if((tempByte != 0xFF) && (!getRunDeviceInfoSeq()))
    3aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    3aac:	09 f4       	brne	.+2      	; 0x3ab0 <checkSystemDataRequests+0x2ee>
    3aae:	ac ce       	rjmp	.-680    	; 0x3808 <checkSystemDataRequests+0x46>
    3ab0:	0e 94 fb 07 	call	0xff6	; 0xff6 <getRunDeviceInfoSeq>
    3ab4:	81 11       	cpse	r24, r1
    3ab6:	a8 ce       	rjmp	.-688    	; 0x3808 <checkSystemDataRequests+0x46>
			{
				sendBITMessage((WORD)(tempByte), 0); // Severity 'critical'
    3ab8:	60 e0       	ldi	r22, 0x00	; 0
    3aba:	80 2f       	mov	r24, r16
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	0e 94 bd 07 	call	0xf7a	; 0xf7a <sendBITMessage>
				reqFlags = getCANDataRequestFlags();
    3ac2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
    3ac6:	18 2f       	mov	r17, r24
				setCANDataRequestFlags(reqFlags & ~(BIT_DATA_RX_BITMASK));
    3ac8:	8f 7b       	andi	r24, 0xBF	; 191
    3aca:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <setCANDataRequestFlags>
    3ace:	9c ce       	rjmp	.-712    	; 0x3808 <checkSystemDataRequests+0x46>
			setRunDeviceInfoSeq();
			devInfoTimeoutFlag = 0;
			
			if(wirelessDevInfoPending)
			{
				if(!getUARTTxBuffEmpty())			
    3ad0:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <getUARTTxBuffEmpty>
    3ad4:	88 23       	and	r24, r24
    3ad6:	c9 f0       	breq	.+50     	; 0x3b0a <checkSystemDataRequests+0x348>
				{
					clearDevInfoTimer();
					return;
				}			
				sendDeviceInfo();
    3ad8:	0e 94 30 08 	call	0x1060	; 0x1060 <sendDeviceInfo>
				devInfoTxCount++;
    3adc:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <devInfoTxCount.2547>
    3ae0:	8f 5f       	subi	r24, 0xFF	; 255
    3ae2:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <devInfoTxCount.2547>
				
				if(devInfoTxCount > DEV_INFO_TX_RETRY_COUNT)
    3ae6:	85 30       	cpi	r24, 0x05	; 5
    3ae8:	08 f4       	brcc	.+2      	; 0x3aec <checkSystemDataRequests+0x32a>
    3aea:	b4 ce       	rjmp	.-664    	; 0x3854 <checkSystemDataRequests+0x92>
				{
					reqFlags = getCANDataRequestFlags();
    3aec:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <getCANDataRequestFlags>
					setCANDataRequestFlags(reqFlags & ~(SYSTEM_DEV_INFO_REQ_BITMASK));
    3af0:	8f 7d       	andi	r24, 0xDF	; 223
    3af2:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <setCANDataRequestFlags>
					devInfoTxCount = 0;
    3af6:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <devInfoTxCount.2547>
					wirelessDevInfoPending = 0;
    3afa:	10 92 4e 06 	sts	0x064E, r1	; 0x80064e <wirelessDevInfoPending.2549>
					
					if(getConnectedSensorCount() > 0)
    3afe:	0e 94 89 12 	call	0x2512	; 0x2512 <getConnectedSensorCount>
    3b02:	88 23       	and	r24, r24
    3b04:	b1 f1       	breq	.+108    	; 0x3b72 <checkSystemDataRequests+0x3b0>
					{
						sendNextTargetedDeviceInfoReq();
    3b06:	0e 94 48 12 	call	0x2490	; 0x2490 <sendNextTargetedDeviceInfoReq>
						clearDevInfoTimer(); // Reset the timer for receiving CAN data
    3b0a:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <clearDevInfoTimer>
    3b0e:	a2 ce       	rjmp	.-700    	; 0x3854 <checkSystemDataRequests+0x92>

            if(devInfoDelayCount >= DEV_INFO_DELAY_TIME)  // Wait ~250ms for ping responses
            {
                if(pingCount < SENSOR_PING_RETRY_COUNT)
				{
					sendPingAllSensors();
    3b10:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <sendPingAllSensors>
					pingCount++;
    3b14:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <pingCount.2546>
    3b18:	8f 5f       	subi	r24, 0xFF	; 255
    3b1a:	80 93 4c 06 	sts	0x064C, r24	; 0x80064c <pingCount.2546>
					devInfoDelayCount = 0;
    3b1e:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <devInfoDelayCount.2545>
					return;
    3b22:	98 ce       	rjmp	.-720    	; 0x3854 <checkSystemDataRequests+0x92>
				clearDevInfoTimer();
				return;
			}
			if(!devInfoTimeoutFlag) // Transmit if the last CAN sequence did not time out
			{
				transmitDeviceInfoASIP();
    3b24:	0e 94 0b 08 	call	0x1016	; 0x1016 <transmitDeviceInfoASIP>
				devInfoTxCount++;
    3b28:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <devInfoTxCount.2547>
    3b2c:	8f 5f       	subi	r24, 0xFF	; 255
    3b2e:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <devInfoTxCount.2547>
				devInfoTimeoutTxRetry = 0;
    3b32:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <devInfoTimeoutTxRetry.2551>
				{
					// Abort and move on to the next sensor
					devInfoTimeoutTxRetry = 0;
				}				
			}			
			if((devInfoTxCount > DEV_INFO_TX_RETRY_COUNT) || (devInfoTimeoutFlag))
    3b36:	85 30       	cpi	r24, 0x05	; 5
    3b38:	08 f0       	brcs	.+2      	; 0x3b3c <checkSystemDataRequests+0x37a>
    3b3a:	22 cf       	rjmp	.-444    	; 0x3980 <checkSystemDataRequests+0x1be>
    3b3c:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <devInfoTimeoutFlag.2550>
    3b40:	88 23       	and	r24, r24
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <checkSystemDataRequests+0x384>
    3b44:	33 cf       	rjmp	.-410    	; 0x39ac <checkSystemDataRequests+0x1ea>
    3b46:	1c cf       	rjmp	.-456    	; 0x3980 <checkSystemDataRequests+0x1be>
			else // A timeout has occurred
			{
				if(devInfoTimeoutTxRetry < 2)
				{
					//Re-send the last dev info query
					resendLastTargetedDeviceInfoReq();
    3b48:	0e 94 70 12 	call	0x24e0	; 0x24e0 <resendLastTargetedDeviceInfoReq>
					devInfoTimeoutFlag = 0;
    3b4c:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <devInfoTimeoutFlag.2550>
					devInfoTimeoutTxRetry++;				
    3b50:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <devInfoTimeoutTxRetry.2551>
    3b54:	8f 5f       	subi	r24, 0xFF	; 255
    3b56:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <devInfoTimeoutTxRetry.2551>
					clearDevInfoTimer();
    3b5a:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <clearDevInfoTimer>
    3b5e:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <devInfoTxCount.2547>
    3b62:	e9 cf       	rjmp	.-46     	; 0x3b36 <checkSystemDataRequests+0x374>
              
              if(devInfoDone)
              {
	              if(lastDevInfoSent)
				  {
					lastDevInfoSent = 0;
    3b64:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <lastDevInfoSent.2548>
					clearRunDeviceInfoSeq();
    3b68:	0e 94 02 08 	call	0x1004	; 0x1004 <clearRunDeviceInfoSeq>
					enableSensorDataTx();
    3b6c:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <enableSensorDataTx>
    3b70:	1d cf       	rjmp	.-454    	; 0x39ac <checkSystemDataRequests+0x1ea>
						sendNextTargetedDeviceInfoReq();
						clearDevInfoTimer(); // Reset the timer for receiving CAN data
					}
					else
					{
						clearRunDeviceInfoSeq();
    3b72:	0e 94 02 08 	call	0x1004	; 0x1004 <clearRunDeviceInfoSeq>
						enableSensorDataTx();
    3b76:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <enableSensorDataTx>
    3b7a:	6c ce       	rjmp	.-808    	; 0x3854 <checkSystemDataRequests+0x92>
static void fillLocalCalStatusData(void)
{
    BYTE statusData[7];
    BYTE* serialNumPtr;

    getCalStatusData(&statusData[0], &statusData[1], &statusData[2]);
    3b7c:	ae 01       	movw	r20, r28
    3b7e:	4d 5f       	subi	r20, 0xFD	; 253
    3b80:	5f 4f       	sbci	r21, 0xFF	; 255
    3b82:	be 01       	movw	r22, r28
    3b84:	6e 5f       	subi	r22, 0xFE	; 254
    3b86:	7f 4f       	sbci	r23, 0xFF	; 255
    3b88:	ce 01       	movw	r24, r28
    3b8a:	01 96       	adiw	r24, 0x01	; 1
    3b8c:	0e 94 92 04 	call	0x924	; 0x924 <getCalStatusData>

    serialNumPtr = getSerialNumPtr();
    statusData[3] = *(serialNumPtr + 4);
    3b90:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <serialNum+0x4>
    3b94:	8c 83       	std	Y+4, r24	; 0x04
    statusData[4] = *(serialNumPtr + 5);
    3b96:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <serialNum+0x5>
    3b9a:	8d 83       	std	Y+5, r24	; 0x05
    statusData[5] = *(serialNumPtr + 6);
    3b9c:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <serialNum+0x6>
    3ba0:	8e 83       	std	Y+6, r24	; 0x06
    statusData[6] = *(serialNumPtr + 7);
    3ba2:	80 91 bb 06 	lds	r24, 0x06BB	; 0x8006bb <serialNum+0x7>
    3ba6:	8f 83       	std	Y+7, r24	; 0x07

    copyCalStatusDataToTxBuffer(&statusData[0]);
    3ba8:	ce 01       	movw	r24, r28
    3baa:	01 96       	adiw	r24, 0x01	; 1
    3bac:	0e 94 95 12 	call	0x252a	; 0x252a <copyCalStatusDataToTxBuffer>
                tempByte++; // Increment sensor count to include this sensor
                
                if(!calStatusDataReady)
                {
                    fillLocalCalStatusData();
                    calStatusDataReady = 1;
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <calStatusDataReady>
    3bb6:	5d cf       	rjmp	.-326    	; 0x3a72 <checkSystemDataRequests+0x2b0>
                }
                if((!getCalStatusAckReceivedFlag()) && (txRetryCount < 80)) // Retry results message for ~5 sec @ 62ms retry loop
                {
                    // Now Tx cal data via ASIP/WiFi
                    transmitCalStatusInfoASIP(tempByte, getFwDataPtr());
    3bb8:	0e 94 de 07 	call	0xfbc	; 0xfbc <getFwDataPtr>
    3bbc:	bc 01       	movw	r22, r24
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	81 0f       	add	r24, r17
    3bc2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <transmitCalStatusInfoASIP>
                    txRetryCount++;
    3bc6:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <txRetryCount.2544>
    3bca:	8f 5f       	subi	r24, 0xFF	; 255
    3bcc:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <txRetryCount.2544>
    3bd0:	1d ce       	rjmp	.-966    	; 0x380c <checkSystemDataRequests+0x4a>

00003bd2 <appInit>:
======================================================================
03/27/2005  J       Initial Creation
*******************************************************************************/
void appInit(void)
{
   initCAN();
    3bd2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <initCAN>
   initADC();
    3bd6:	0e 94 04 01 	call	0x208	; 0x208 <initADC>
   initDAC();
    3bda:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <initDAC>

   readAsipOutCID();
    3bde:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <readAsipOutCID>
   readWifiStatus();
    3be2:	0e 94 75 1a 	call	0x34ea	; 0x34ea <readWifiStatus>
   SET_WIFI_RESET_HIGH;       
    3be6:	59 98       	cbi	0x0b, 1	; 11
  
   initBitMonitor();
    3be8:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <initBitMonitor>
   initBlockageProcessor();
    3bec:	0e 94 ac 08 	call	0x1158	; 0x1158 <initBlockageProcessor>
   initLEDStateMachine();
    3bf0:	0c 94 04 19 	jmp	0x3208	; 0x3208 <initLEDStateMachine>

00003bf4 <get4HzTimer>:

// Returns the ticks of a 4 Hz timer
BYTE get4HzTimer(void)
{
    return FourHzTimer;
}
    3bf4:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <FourHzTimer>
    3bf8:	08 95       	ret

00003bfa <clear4HzTimer>:

// Clears the tick count of the 4 Hz timer
void clear4HzTimer(void)
{
    FourHzTimer = 0;
    3bfa:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <FourHzTimer>
    3bfe:	08 95       	ret

00003c00 <getDevInfoTimer>:
}

BYTE getDevInfoTimer(void)
{
	return DevInfoTimer;	
}
    3c00:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <DevInfoTimer>
    3c04:	08 95       	ret

00003c06 <clearDevInfoTimer>:

void clearDevInfoTimer(void)
{
	DevInfoTimer = 0;
    3c06:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <DevInfoTimer>
    3c0a:	08 95       	ret

00003c0c <get30SecStartupTimer>:
}

BYTE get30SecStartupTimer(void)
{
    return thirtySecStartupTimer;
}
    3c0c:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <thirtySecStartupTimer>
    3c10:	08 95       	ret

00003c12 <Run0TickTasks>:
    3c12:	08 95       	ret

00003c14 <Run1TickTasks>:
    3c14:	08 95       	ret

00003c16 <Run2TickTasks>:
    3c16:	08 95       	ret

00003c18 <Run4TickTasks>:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run4TickTasks(void)
{   
    processValidAsipMessages();
    3c18:	0e 94 d5 06 	call	0xdaa	; 0xdaa <processValidAsipMessages>
	retransmitBlockageData();
    3c1c:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <retransmitBlockageData>

00003c20 <Run8TickTasks>:
    3c20:	08 95       	ret

00003c22 <Run16TickTasks>:
DATE       WHO      CHANGE DESCRIPTION:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run16TickTasks(void)
{
    3c22:	08 95       	ret

00003c24 <Run32TickTasks>:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run32TickTasks(void)
{
	startADCConversion(); 
    3c24:	0c 94 af 01 	jmp	0x35e	; 0x35e <startADCConversion>

00003c28 <Run64TickTasks>:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run64TickTasks(void)
{     
   stepBitMonitorStateMachine();	   
    3c28:	0e 94 7d 08 	call	0x10fa	; 0x10fa <stepBitMonitorStateMachine>
   checkSystemDataRequests(); 
    3c2c:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <checkSystemDataRequests>

00003c30 <Run128TickTasks>:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run128TickTasks(void)
{
    if(getSensorsReadyFlag()) // If all sensors have been sampled 4x, do the averaging
    3c30:	0e 94 89 04 	call	0x912	; 0x912 <getSensorsReadyFlag>
    3c34:	81 11       	cpse	r24, r1
    3c36:	0d c0       	rjmp	.+26     	; 0x3c52 <Run128TickTasks+0x22>
    {
        averageADCData();
        applyCalibrationToData();
        clearSensorsReadyFlag(); 		
    }
    if(!getRunCalibrationFlag())
    3c38:	0e 94 8f 04 	call	0x91e	; 0x91e <getRunCalibrationFlag>
    3c3c:	88 23       	and	r24, r24
    3c3e:	31 f0       	breq	.+12     	; 0x3c4c <Run128TickTasks+0x1c>
    {
        stepLEDStateMachine(); 		
    }

	if(!blockSensorDataTx)
    3c40:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <blockSensorDataTx>
    3c44:	81 11       	cpse	r24, r1
    3c46:	08 95       	ret
    {
		sendFlowRateMessages();	
    3c48:	0c 94 22 06 	jmp	0xc44	; 0xc44 <sendFlowRateMessages>
        applyCalibrationToData();
        clearSensorsReadyFlag(); 		
    }
    if(!getRunCalibrationFlag())
    {
        stepLEDStateMachine(); 		
    3c4c:	0e 94 26 19 	call	0x324c	; 0x324c <stepLEDStateMachine>
    3c50:	f7 cf       	rjmp	.-18     	; 0x3c40 <Run128TickTasks+0x10>
*******************************************************************************/
void Run128TickTasks(void)
{
    if(getSensorsReadyFlag()) // If all sensors have been sampled 4x, do the averaging
    {
        averageADCData();
    3c52:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <averageADCData>
        applyCalibrationToData();
    3c56:	0e 94 28 09 	call	0x1250	; 0x1250 <applyCalibrationToData>
        clearSensorsReadyFlag(); 		
    3c5a:	0e 94 8c 04 	call	0x918	; 0x918 <clearSensorsReadyFlag>
    3c5e:	ec cf       	rjmp	.-40     	; 0x3c38 <Run128TickTasks+0x8>

00003c60 <Run256TickTasks>:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run256TickTasks(void)
{  
    FourHzTimer++;
    3c60:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <FourHzTimer>
    3c64:	8f 5f       	subi	r24, 0xFF	; 255
    3c66:	80 93 c4 06 	sts	0x06C4, r24	; 0x8006c4 <FourHzTimer>
	DevInfoTimer++;
    3c6a:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <DevInfoTimer>
    3c6e:	9f 5f       	subi	r25, 0xFF	; 255
    3c70:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <DevInfoTimer>

    // Set a flag 30 seconds after startup
    if(FourHzTimer > 120)
    3c74:	89 37       	cpi	r24, 0x79	; 121
    3c76:	18 f0       	brcs	.+6      	; 0x3c7e <Run256TickTasks+0x1e>
    {
        thirtySecStartupTimer = 1;
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <thirtySecStartupTimer>
    }
	
	processBlockageData();  			
    3c7e:	0e 94 29 0a 	call	0x1452	; 0x1452 <processBlockageData>
	stepEEUpdateTask();
    3c82:	0c 94 c5 12 	jmp	0x258a	; 0x258a <stepEEUpdateTask>

00003c86 <disableSensorDataTx>:
} 

void disableSensorDataTx(void)
{
    blockSensorDataTx = 1;
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	80 93 c1 06 	sts	0x06C1, r24	; 0x8006c1 <blockSensorDataTx>
    3c8c:	08 95       	ret

00003c8e <enableSensorDataTx>:
}

void enableSensorDataTx(void)
{
    blockSensorDataTx = 0;
    3c8e:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <blockSensorDataTx>
    3c92:	08 95       	ret

00003c94 <initUART>:
		}
	}
	sei();
	
	return free_bytes;
}
    3c94:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <wifiTxBufferHead>
    3c98:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <wifiTxBufferTail>
    3c9c:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <scfTX_Active>
    3ca0:	e8 ec       	ldi	r30, 0xC8	; 200
    3ca2:	f0 e0       	ldi	r31, 0x00	; 0
    3ca4:	80 e8       	ldi	r24, 0x80	; 128
    3ca6:	80 83       	st	Z, r24
    3ca8:	82 ea       	ldi	r24, 0xA2	; 162
    3caa:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    3cae:	80 81       	ld	r24, Z
    3cb0:	8f 60       	ori	r24, 0x0F	; 15
    3cb2:	80 83       	st	Z, r24
    3cb4:	83 e0       	ldi	r24, 0x03	; 3
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    3cbc:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    3cc0:	ea ec       	ldi	r30, 0xCA	; 202
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	8b 60       	ori	r24, 0x0B	; 11
    3cc8:	80 83       	st	Z, r24
    3cca:	5f 98       	cbi	0x0b, 7	; 11
    3ccc:	41 98       	cbi	0x08, 1	; 8
    3cce:	08 95       	ret

00003cd0 <getIsTxIdle>:
    3cd0:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3cd4:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <wifiTxBufferTail>
    3cd8:	98 17       	cp	r25, r24
    3cda:	11 f0       	breq	.+4      	; 0x3ce0 <getIsTxIdle+0x10>
    3cdc:	80 e0       	ldi	r24, 0x00	; 0
    3cde:	08 95       	ret
    3ce0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    3ce4:	82 fb       	bst	r24, 2
    3ce6:	99 27       	eor	r25, r25
    3ce8:	90 f9       	bld	r25, 0
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	89 27       	eor	r24, r25
    3cee:	08 95       	ret

00003cf0 <__vector_21>:
    3cf0:	1f 92       	push	r1
    3cf2:	0f 92       	push	r0
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	0f 92       	push	r0
    3cf8:	11 24       	eor	r1, r1
    3cfa:	2f 93       	push	r18
    3cfc:	3f 93       	push	r19
    3cfe:	4f 93       	push	r20
    3d00:	5f 93       	push	r21
    3d02:	6f 93       	push	r22
    3d04:	7f 93       	push	r23
    3d06:	8f 93       	push	r24
    3d08:	9f 93       	push	r25
    3d0a:	af 93       	push	r26
    3d0c:	bf 93       	push	r27
    3d0e:	ef 93       	push	r30
    3d10:	ff 93       	push	r31
    3d12:	98 b1       	in	r25, 0x08	; 8
    3d14:	80 e4       	ldi	r24, 0x40	; 64
    3d16:	89 27       	eor	r24, r25
    3d18:	88 b9       	out	0x08, r24	; 8
    3d1a:	e9 ec       	ldi	r30, 0xC9	; 201
    3d1c:	f0 e0       	ldi	r31, 0x00	; 0
    3d1e:	80 81       	ld	r24, Z
    3d20:	88 60       	ori	r24, 0x08	; 8
    3d22:	80 83       	st	Z, r24
    3d24:	e8 ec       	ldi	r30, 0xC8	; 200
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	80 81       	ld	r24, Z
    3d2a:	80 68       	ori	r24, 0x80	; 128
    3d2c:	80 83       	st	Z, r24
    3d2e:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <initUART>
    3d32:	ff 91       	pop	r31
    3d34:	ef 91       	pop	r30
    3d36:	bf 91       	pop	r27
    3d38:	af 91       	pop	r26
    3d3a:	9f 91       	pop	r25
    3d3c:	8f 91       	pop	r24
    3d3e:	7f 91       	pop	r23
    3d40:	6f 91       	pop	r22
    3d42:	5f 91       	pop	r21
    3d44:	4f 91       	pop	r20
    3d46:	3f 91       	pop	r19
    3d48:	2f 91       	pop	r18
    3d4a:	0f 90       	pop	r0
    3d4c:	0f be       	out	0x3f, r0	; 63
    3d4e:	0f 90       	pop	r0
    3d50:	1f 90       	pop	r1
    3d52:	18 95       	reti

00003d54 <__vector_20>:
    3d54:	1f 92       	push	r1
    3d56:	0f 92       	push	r0
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	0f 92       	push	r0
    3d5c:	11 24       	eor	r1, r1
    3d5e:	2f 93       	push	r18
    3d60:	3f 93       	push	r19
    3d62:	4f 93       	push	r20
    3d64:	5f 93       	push	r21
    3d66:	6f 93       	push	r22
    3d68:	7f 93       	push	r23
    3d6a:	8f 93       	push	r24
    3d6c:	9f 93       	push	r25
    3d6e:	af 93       	push	r26
    3d70:	bf 93       	push	r27
    3d72:	ef 93       	push	r30
    3d74:	ff 93       	push	r31
    3d76:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    3d7a:	80 fd       	sbrc	r24, 0
    3d7c:	2e c0       	rjmp	.+92     	; 0x3dda <__vector_20+0x86>
    3d7e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    3d82:	81 ff       	sbrs	r24, 1
    3d84:	19 c0       	rjmp	.+50     	; 0x3db8 <__vector_20+0x64>
    3d86:	e0 91 c7 06 	lds	r30, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3d8a:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <wifiTxBufferTail>
    3d8e:	e8 17       	cp	r30, r24
    3d90:	61 f1       	breq	.+88     	; 0x3dea <__vector_20+0x96>
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	8e 0f       	add	r24, r30
    3d96:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <wifiTxBufferHead>
    3d9a:	f0 e0       	ldi	r31, 0x00	; 0
    3d9c:	e8 53       	subi	r30, 0x38	; 56
    3d9e:	f9 4f       	sbci	r31, 0xF9	; 249
    3da0:	80 81       	ld	r24, Z
    3da2:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7f00d2>
    3da6:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3daa:	88 3c       	cpi	r24, 0xC8	; 200
    3dac:	10 f0       	brcs	.+4      	; 0x3db2 <__vector_20+0x5e>
    3dae:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <wifiTxBufferHead>
    3db2:	82 e0       	ldi	r24, 0x02	; 2
    3db4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    3db8:	ff 91       	pop	r31
    3dba:	ef 91       	pop	r30
    3dbc:	bf 91       	pop	r27
    3dbe:	af 91       	pop	r26
    3dc0:	9f 91       	pop	r25
    3dc2:	8f 91       	pop	r24
    3dc4:	7f 91       	pop	r23
    3dc6:	6f 91       	pop	r22
    3dc8:	5f 91       	pop	r21
    3dca:	4f 91       	pop	r20
    3dcc:	3f 91       	pop	r19
    3dce:	2f 91       	pop	r18
    3dd0:	0f 90       	pop	r0
    3dd2:	0f be       	out	0x3f, r0	; 63
    3dd4:	0f 90       	pop	r0
    3dd6:	1f 90       	pop	r1
    3dd8:	18 95       	reti
    3dda:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7f00d2>
    3dde:	0e 94 ed 04 	call	0x9da	; 0x9da <stepAsipStateMachine>
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    3de8:	ca cf       	rjmp	.-108    	; 0x3d7e <__vector_20+0x2a>
    3dea:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <scfTX_Active>
    3dee:	e1 cf       	rjmp	.-62     	; 0x3db2 <__vector_20+0x5e>

00003df0 <getUARTTxBuffEmpty>:

BOOL getUARTTxBuffEmpty(void)
{
	return (wifiTxBufferTail == wifiTxBufferHead);
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	20 91 c6 06 	lds	r18, 0x06C6	; 0x8006c6 <wifiTxBufferTail>
    3df6:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3dfa:	29 13       	cpse	r18, r25
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
}
    3dfe:	08 95       	ret

00003e00 <addBytesToWifiTxBuffer>:

BYTE getUART_TxBytesFree(void)
{
	BYTE free_bytes = 0;
	
	cli();
    3e00:	f8 94       	cli
	{
		if(wifiTxBufferHead > wifiTxBufferTail)
    3e02:	20 91 c7 06 	lds	r18, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3e06:	30 91 c6 06 	lds	r19, 0x06C6	; 0x8006c6 <wifiTxBufferTail>
    3e0a:	32 17       	cp	r19, r18
    3e0c:	08 f0       	brcs	.+2      	; 0x3e10 <addBytesToWifiTxBuffer+0x10>
    3e0e:	42 c0       	rjmp	.+132    	; 0x3e94 <addBytesToWifiTxBuffer+0x94>
		{			
			free_bytes = wifiTxBufferHead - wifiTxBufferTail - 1;
    3e10:	21 50       	subi	r18, 0x01	; 1
    3e12:	23 1b       	sub	r18, r19
		else
		{
			free_bytes = WIFI_TX_BUFFER_SIZE - 1;
		}
	}
	sei();
    3e14:	78 94       	sei
BOOL addBytesToWifiTxBuffer(const BYTE * data, BYTE size)
{
    BYTE i;

	// Make sure there is enough room for the data
	if(size > getUART_TxBytesFree())
    3e16:	26 17       	cp	r18, r22
    3e18:	08 f4       	brcc	.+2      	; 0x3e1c <addBytesToWifiTxBuffer+0x1c>
    3e1a:	44 c0       	rjmp	.+136    	; 0x3ea4 <addBytesToWifiTxBuffer+0xa4>
	{		
        return FALSE;			
	}	
	
	cli();
    3e1c:	f8 94       	cli
	{
		// Add data to buffer
		for(i = 0; i < size; i++)
    3e1e:	66 23       	and	r22, r22
    3e20:	f1 f0       	breq	.+60     	; 0x3e5e <addBytesToWifiTxBuffer+0x5e>
    3e22:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <wifiTxBufferTail>
    3e26:	dc 01       	movw	r26, r24
    3e28:	61 50       	subi	r22, 0x01	; 1
    3e2a:	26 2f       	mov	r18, r22
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	2f 5f       	subi	r18, 0xFF	; 255
    3e30:	3f 4f       	sbci	r19, 0xFF	; 255
    3e32:	28 0f       	add	r18, r24
    3e34:	39 1f       	adc	r19, r25
    3e36:	04 c0       	rjmp	.+8      	; 0x3e40 <addBytesToWifiTxBuffer+0x40>
		{
			wifiTxBuffer[wifiTxBufferTail++] = *data++;
			if(wifiTxBufferTail >= WIFI_TX_BUFFER_SIZE)
    3e38:	e8 2f       	mov	r30, r24
	}	
	
	cli();
	{
		// Add data to buffer
		for(i = 0; i < size; i++)
    3e3a:	a2 17       	cp	r26, r18
    3e3c:	b3 07       	cpc	r27, r19
    3e3e:	69 f0       	breq	.+26     	; 0x3e5a <addBytesToWifiTxBuffer+0x5a>
		{
			wifiTxBuffer[wifiTxBufferTail++] = *data++;
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	8e 0f       	add	r24, r30
    3e44:	9d 91       	ld	r25, X+
    3e46:	f0 e0       	ldi	r31, 0x00	; 0
    3e48:	e8 53       	subi	r30, 0x38	; 56
    3e4a:	f9 4f       	sbci	r31, 0xF9	; 249
    3e4c:	90 83       	st	Z, r25
			if(wifiTxBufferTail >= WIFI_TX_BUFFER_SIZE)
    3e4e:	88 3c       	cpi	r24, 0xC8	; 200
    3e50:	98 f3       	brcs	.-26     	; 0x3e38 <addBytesToWifiTxBuffer+0x38>
			{
				wifiTxBufferTail = 0;
    3e52:	e0 e0       	ldi	r30, 0x00	; 0
	}	
	
	cli();
	{
		// Add data to buffer
		for(i = 0; i < size; i++)
    3e54:	a2 17       	cp	r26, r18
    3e56:	b3 07       	cpc	r27, r19
    3e58:	99 f7       	brne	.-26     	; 0x3e40 <addBytesToWifiTxBuffer+0x40>
    3e5a:	e0 93 c6 06 	sts	0x06C6, r30	; 0x8006c6 <wifiTxBufferTail>
				wifiTxBufferTail = 0;
			}
		}	
		
		// If the IRQ isn't going already, make it start
		if(scfTX_Active != TRUE)
    3e5e:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <scfTX_Active>
    3e62:	81 30       	cpi	r24, 0x01	; 1
    3e64:	a1 f0       	breq	.+40     	; 0x3e8e <addBytesToWifiTxBuffer+0x8e>
		{
			scfTX_Active = TRUE;
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <scfTX_Active>
			
			LINDAT = wifiTxBuffer[wifiTxBufferHead++];						
    3e6c:	e0 91 c7 06 	lds	r30, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3e70:	8e 0f       	add	r24, r30
    3e72:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <wifiTxBufferHead>
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	e8 53       	subi	r30, 0x38	; 56
    3e7a:	f9 4f       	sbci	r31, 0xF9	; 249
    3e7c:	80 81       	ld	r24, Z
    3e7e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7f00d2>
			if(wifiTxBufferHead >= WIFI_TX_BUFFER_SIZE)
    3e82:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3e86:	88 3c       	cpi	r24, 0xC8	; 200
    3e88:	10 f0       	brcs	.+4      	; 0x3e8e <addBytesToWifiTxBuffer+0x8e>
			{
				wifiTxBufferHead = 0;
    3e8a:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <wifiTxBufferHead>
			}
		}
	}	
	sei();
    3e8e:	78 94       	sei
	
	return TRUE;
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	08 95       	ret
	{
		if(wifiTxBufferHead > wifiTxBufferTail)
		{			
			free_bytes = wifiTxBufferHead - wifiTxBufferTail - 1;
		}
		else if(wifiTxBufferTail > wifiTxBufferHead)
    3e94:	23 17       	cp	r18, r19
    3e96:	40 f4       	brcc	.+16     	; 0x3ea8 <addBytesToWifiTxBuffer+0xa8>
		{
			free_bytes = WIFI_TX_BUFFER_SIZE - wifiTxBufferTail + wifiTxBufferHead - 1;
    3e98:	29 53       	subi	r18, 0x39	; 57
    3e9a:	23 1b       	sub	r18, r19
		else
		{
			free_bytes = WIFI_TX_BUFFER_SIZE - 1;
		}
	}
	sei();
    3e9c:	78 94       	sei
BOOL addBytesToWifiTxBuffer(const BYTE * data, BYTE size)
{
    BYTE i;

	// Make sure there is enough room for the data
	if(size > getUART_TxBytesFree())
    3e9e:	26 17       	cp	r18, r22
    3ea0:	08 f0       	brcs	.+2      	; 0x3ea4 <addBytesToWifiTxBuffer+0xa4>
    3ea2:	bc cf       	rjmp	.-136    	; 0x3e1c <addBytesToWifiTxBuffer+0x1c>
	{		
        return FALSE;			
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}	
	sei();
	
	return TRUE;
}
    3ea6:	08 95       	ret
		{
			free_bytes = WIFI_TX_BUFFER_SIZE - wifiTxBufferTail + wifiTxBufferHead - 1;
		}
		else
		{
			free_bytes = WIFI_TX_BUFFER_SIZE - 1;
    3ea8:	27 ec       	ldi	r18, 0xC7	; 199
    3eaa:	b4 cf       	rjmp	.-152    	; 0x3e14 <addBytesToWifiTxBuffer+0x14>

00003eac <sendWifiCommand>:

static BYTE asipCID = 0;


void sendWifiCommand(PGM_P command)
{
    3eac:	0f 93       	push	r16
    3eae:	1f 93       	push	r17
    3eb0:	cf 93       	push	r28
    3eb2:	df 93       	push	r29
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62
    3eb8:	e2 97       	sbiw	r28, 0x32	; 50
    3eba:	0f b6       	in	r0, 0x3f	; 63
    3ebc:	f8 94       	cli
    3ebe:	de bf       	out	0x3e, r29	; 62
    3ec0:	0f be       	out	0x3f, r0	; 63
    3ec2:	cd bf       	out	0x3d, r28	; 61
    3ec4:	8c 01       	movw	r16, r24
	char wifiConfigTxBuffer[50]; // Tx buffer for WiFi config messages

	// Retrieve the command string from Flash and then add to Tx buffer
	strcpy_P(wifiConfigTxBuffer, command);
    3ec6:	bc 01       	movw	r22, r24
    3ec8:	ce 01       	movw	r24, r28
    3eca:	01 96       	adiw	r24, 0x01	; 1
    3ecc:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <strcpy_P>
	// Send via UART...
	addBytesToWifiTxBuffer((BYTE *)&wifiConfigTxBuffer[0], __strlen_P(command));
    3ed0:	c8 01       	movw	r24, r16
    3ed2:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <__strlen_P>
    3ed6:	68 2f       	mov	r22, r24
    3ed8:	ce 01       	movw	r24, r28
    3eda:	01 96       	adiw	r24, 0x01	; 1
    3edc:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <addBytesToWifiTxBuffer>
}
    3ee0:	e2 96       	adiw	r28, 0x32	; 50
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	df 91       	pop	r29
    3eee:	cf 91       	pop	r28
    3ef0:	1f 91       	pop	r17
    3ef2:	0f 91       	pop	r16
    3ef4:	08 95       	ret

00003ef6 <readAsipOutCID>:

void readAsipOutCID(void)
{
    eeprom_busy_wait();
    3ef6:	f9 99       	sbic	0x1f, 1	; 31
    3ef8:	fe cf       	rjmp	.-4      	; 0x3ef6 <readAsipOutCID>
    asipCID = 0;
    3efa:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <asipCID>
    3efe:	08 95       	ret

00003f00 <sendUdpPacket>:
}

void sendUdpPacket(AsipMsgStruct * pMessage)
{
    3f00:	0f 93       	push	r16
    3f02:	1f 93       	push	r17
    3f04:	cf 93       	push	r28
    3f06:	df 93       	push	r29
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
    3f0c:	2a 97       	sbiw	r28, 0x0a	; 10
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	f8 94       	cli
    3f12:	de bf       	out	0x3e, r29	; 62
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	cd bf       	out	0x3d, r28	; 61
    3f18:	8c 01       	movw	r16, r24
	BYTE cmdBuffer[10];
	BYTE remainder;
	BYTE dataLen = pMessage->PayloadLength + 7; // Payload plus ASIP header/checksum
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	22 81       	ldd	r18, Z+2	; 0x02
    3f1e:	87 e0       	ldi	r24, 0x07	; 7
    3f20:	82 0f       	add	r24, r18
	
	// ========== WiFi Command ==========
	// Connection ID
	cmdBuffer[0] = asipCID + '0';
    3f22:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <asipCID>
    3f26:	90 5d       	subi	r25, 0xD0	; 208
    3f28:	99 83       	std	Y+1, r25	; 0x01
	
	// Convert the data length into a 4 digit string
	cmdBuffer[1] = '0'; // Thousands
    3f2a:	90 e3       	ldi	r25, 0x30	; 48
    3f2c:	9a 83       	std	Y+2, r25	; 0x02
	cmdBuffer[2] = (dataLen / 100) + '0'; // Hundreds
    3f2e:	99 e2       	ldi	r25, 0x29	; 41
    3f30:	89 9f       	mul	r24, r25
    3f32:	91 2d       	mov	r25, r1
    3f34:	11 24       	eor	r1, r1
    3f36:	92 95       	swap	r25
    3f38:	9f 70       	andi	r25, 0x0F	; 15
    3f3a:	30 e3       	ldi	r19, 0x30	; 48
    3f3c:	39 0f       	add	r19, r25
    3f3e:	3b 83       	std	Y+3, r19	; 0x03
	remainder = dataLen % 100; 
    3f40:	f4 e6       	ldi	r31, 0x64	; 100
    3f42:	9f 9f       	mul	r25, r31
    3f44:	80 19       	sub	r24, r0
    3f46:	11 24       	eor	r1, r1
	cmdBuffer[3] = (remainder / 10) + '0'; // Tens
    3f48:	9d ec       	ldi	r25, 0xCD	; 205
    3f4a:	89 9f       	mul	r24, r25
    3f4c:	91 2d       	mov	r25, r1
    3f4e:	11 24       	eor	r1, r1
    3f50:	96 95       	lsr	r25
    3f52:	96 95       	lsr	r25
    3f54:	96 95       	lsr	r25
    3f56:	30 e3       	ldi	r19, 0x30	; 48
    3f58:	39 0f       	add	r19, r25
    3f5a:	3c 83       	std	Y+4, r19	; 0x04
	remainder = remainder % 10;
	cmdBuffer[4] = remainder + '0'; // Ones
    3f5c:	3a e0       	ldi	r19, 0x0A	; 10
    3f5e:	93 9f       	mul	r25, r19
    3f60:	80 19       	sub	r24, r0
    3f62:	11 24       	eor	r1, r1
    3f64:	80 5d       	subi	r24, 0xD0	; 208
    3f66:	8d 83       	std	Y+5, r24	; 0x05
	
	// ========== ASIP Message ==========
	// Start of ASIP Frame
	cmdBuffer[5] = 0xC2;
    3f68:	82 ec       	ldi	r24, 0xC2	; 194
    3f6a:	8e 83       	std	Y+6, r24	; 0x06
	cmdBuffer[6] = 0x53;
    3f6c:	83 e5       	ldi	r24, 0x53	; 83
    3f6e:	8f 83       	std	Y+7, r24	; 0x07
	cmdBuffer[7] = pMessage->MsgClass;
    3f70:	f8 01       	movw	r30, r16
    3f72:	80 81       	ld	r24, Z
    3f74:	88 87       	std	Y+8, r24	; 0x08
	cmdBuffer[8] = pMessage->MsgId;
    3f76:	81 81       	ldd	r24, Z+1	; 0x01
    3f78:	89 87       	std	Y+9, r24	; 0x09
	cmdBuffer[9] = pMessage->PayloadLength;
    3f7a:	2a 87       	std	Y+10, r18	; 0x0a
	
	sendWifiCommand(udpBulkTransferSeq);
    3f7c:	86 ec       	ldi	r24, 0xC6	; 198
    3f7e:	91 e0       	ldi	r25, 0x01	; 1
    3f80:	0e 94 56 1f 	call	0x3eac	; 0x3eac <sendWifiCommand>
	addBytesToWifiTxBuffer(cmdBuffer, 10);
    3f84:	6a e0       	ldi	r22, 0x0A	; 10
    3f86:	ce 01       	movw	r24, r28
    3f88:	01 96       	adiw	r24, 0x01	; 1
    3f8a:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <addBytesToWifiTxBuffer>
	// Add in payload	
	addBytesToWifiTxBuffer(pMessage->PayloadPtr, pMessage->PayloadLength);
    3f8e:	f8 01       	movw	r30, r16
    3f90:	62 81       	ldd	r22, Z+2	; 0x02
    3f92:	83 81       	ldd	r24, Z+3	; 0x03
    3f94:	94 81       	ldd	r25, Z+4	; 0x04
    3f96:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <addBytesToWifiTxBuffer>
	// Add in checksum bytes
	cmdBuffer[0] = pMessage->Checksum1;
    3f9a:	f8 01       	movw	r30, r16
    3f9c:	85 81       	ldd	r24, Z+5	; 0x05
    3f9e:	89 83       	std	Y+1, r24	; 0x01
	cmdBuffer[1] = pMessage->Checksum2;
    3fa0:	86 81       	ldd	r24, Z+6	; 0x06
    3fa2:	8a 83       	std	Y+2, r24	; 0x02
	addBytesToWifiTxBuffer(cmdBuffer, 2);
    3fa4:	62 e0       	ldi	r22, 0x02	; 2
    3fa6:	ce 01       	movw	r24, r28
    3fa8:	01 96       	adiw	r24, 0x01	; 1
    3faa:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <addBytesToWifiTxBuffer>
}
    3fae:	2a 96       	adiw	r28, 0x0a	; 10
    3fb0:	0f b6       	in	r0, 0x3f	; 63
    3fb2:	f8 94       	cli
    3fb4:	de bf       	out	0x3e, r29	; 62
    3fb6:	0f be       	out	0x3f, r0	; 63
    3fb8:	cd bf       	out	0x3d, r28	; 61
    3fba:	df 91       	pop	r29
    3fbc:	cf 91       	pop	r28
    3fbe:	1f 91       	pop	r17
    3fc0:	0f 91       	pop	r16
    3fc2:	08 95       	ret

00003fc4 <__tablejump2__>:
    3fc4:	ee 0f       	add	r30, r30
    3fc6:	ff 1f       	adc	r31, r31
    3fc8:	05 90       	lpm	r0, Z+
    3fca:	f4 91       	lpm	r31, Z
    3fcc:	e0 2d       	mov	r30, r0
    3fce:	09 94       	ijmp

00003fd0 <memcpy_P>:
    3fd0:	fb 01       	movw	r30, r22
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	02 c0       	rjmp	.+4      	; 0x3fda <memcpy_P+0xa>
    3fd6:	05 90       	lpm	r0, Z+
    3fd8:	0d 92       	st	X+, r0
    3fda:	41 50       	subi	r20, 0x01	; 1
    3fdc:	50 40       	sbci	r21, 0x00	; 0
    3fde:	d8 f7       	brcc	.-10     	; 0x3fd6 <memcpy_P+0x6>
    3fe0:	08 95       	ret

00003fe2 <strcpy_P>:
    3fe2:	fb 01       	movw	r30, r22
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	05 90       	lpm	r0, Z+
    3fe8:	0d 92       	st	X+, r0
    3fea:	00 20       	and	r0, r0
    3fec:	e1 f7       	brne	.-8      	; 0x3fe6 <strcpy_P+0x4>
    3fee:	08 95       	ret

00003ff0 <__strlen_P>:
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	05 90       	lpm	r0, Z+
    3ff4:	00 20       	and	r0, r0
    3ff6:	e9 f7       	brne	.-6      	; 0x3ff2 <__strlen_P+0x2>
    3ff8:	80 95       	com	r24
    3ffa:	90 95       	com	r25
    3ffc:	8e 0f       	add	r24, r30
    3ffe:	9f 1f       	adc	r25, r31
    4000:	08 95       	ret

00004002 <eeprom_read_byte>:
    4002:	f9 99       	sbic	0x1f, 1	; 31
    4004:	fe cf       	rjmp	.-4      	; 0x4002 <eeprom_read_byte>
    4006:	92 bd       	out	0x22, r25	; 34
    4008:	81 bd       	out	0x21, r24	; 33
    400a:	f8 9a       	sbi	0x1f, 0	; 31
    400c:	99 27       	eor	r25, r25
    400e:	80 b5       	in	r24, 0x20	; 32
    4010:	08 95       	ret

00004012 <eeprom_write_byte>:
    4012:	26 2f       	mov	r18, r22

00004014 <eeprom_write_r18>:
    4014:	f9 99       	sbic	0x1f, 1	; 31
    4016:	fe cf       	rjmp	.-4      	; 0x4014 <eeprom_write_r18>
    4018:	1f ba       	out	0x1f, r1	; 31
    401a:	92 bd       	out	0x22, r25	; 34
    401c:	81 bd       	out	0x21, r24	; 33
    401e:	20 bd       	out	0x20, r18	; 32
    4020:	0f b6       	in	r0, 0x3f	; 63
    4022:	f8 94       	cli
    4024:	fa 9a       	sbi	0x1f, 2	; 31
    4026:	f9 9a       	sbi	0x1f, 1	; 31
    4028:	0f be       	out	0x3f, r0	; 63
    402a:	01 96       	adiw	r24, 0x01	; 1
    402c:	08 95       	ret

0000402e <_exit>:
    402e:	f8 94       	cli

00004030 <__stop_program>:
    4030:	ff cf       	rjmp	.-2      	; 0x4030 <__stop_program>
