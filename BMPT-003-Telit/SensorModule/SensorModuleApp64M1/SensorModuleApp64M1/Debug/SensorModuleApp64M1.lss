
SensorModuleApp64M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00004022  000040b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004022  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006f9  0080010c  0080010c  000040c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000040c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000708  00000000  00000000  00004138  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e32  00000000  00000000  00004840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002258  00000000  00000000  0000b672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004bc4  00000000  00000000  0000d8ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001114  00000000  00000000  00012490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002994  00000000  00000000  000135a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c66  00000000  00000000  00015f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d0  00000000  00000000  00019b9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__ctors_end>
       4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
       c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      10:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      14:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      18:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      1c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      20:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      24:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      28:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      2c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      30:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__vector_12>
      34:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      38:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      3c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      40:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      44:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      48:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__vector_18>
      4c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      50:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__vector_20>
      54:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__vector_21>
      58:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      5c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      60:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      64:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      68:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      6c:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__vector_27>
      70:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      74:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      78:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
      7c:	f1 04       	cpc	r15, r1
      7e:	13 05       	cpc	r17, r3
      80:	2e 05       	cpc	r18, r14
      82:	36 05       	cpc	r19, r6
      84:	3e 05       	cpc	r19, r14
      86:	48 05       	cpc	r20, r8
      88:	f4 04       	cpc	r15, r4
      8a:	0b 05       	cpc	r16, r11
      8c:	ae 10       	cpse	r10, r14
      8e:	c8 10       	cpse	r12, r8
      90:	ca 10       	cpse	r12, r10
      92:	6c 10       	cpse	r6, r12
      94:	6c 10       	cpse	r6, r12
      96:	6c 10       	cpse	r6, r12
      98:	6c 10       	cpse	r6, r12
      9a:	6c 10       	cpse	r6, r12
      9c:	6c 10       	cpse	r6, r12
      9e:	6c 10       	cpse	r6, r12
      a0:	6c 10       	cpse	r6, r12
      a2:	cc 10       	cpse	r12, r12
      a4:	6c 10       	cpse	r6, r12
      a6:	6c 10       	cpse	r6, r12
      a8:	6c 10       	cpse	r6, r12
      aa:	d5 10       	cpse	r13, r5
      ac:	6c 10       	cpse	r6, r12
      ae:	6c 10       	cpse	r6, r12
      b0:	de 10       	cpse	r13, r14
      b2:	6c 10       	cpse	r6, r12
      b4:	6c 10       	cpse	r6, r12
      b6:	e7 10       	cpse	r14, r7
      b8:	6c 10       	cpse	r6, r12
      ba:	6c 10       	cpse	r6, r12
      bc:	f3 10       	cpse	r15, r3
      be:	6c 10       	cpse	r6, r12
      c0:	6c 10       	cpse	r6, r12
      c2:	6c 10       	cpse	r6, r12
      c4:	f9 10       	cpse	r15, r9
      c6:	6c 10       	cpse	r6, r12
      c8:	2a 11       	cpse	r18, r10
      ca:	30 11       	cpse	r19, r0
      cc:	6c 10       	cpse	r6, r12
      ce:	6c 10       	cpse	r6, r12
      d0:	3e 11       	cpse	r19, r14
      d2:	49 11       	cpse	r20, r9
      d4:	55 11       	cpse	r21, r5
      d6:	58 11       	cpse	r21, r8
      d8:	6c 10       	cpse	r6, r12
      da:	5b 11       	cpse	r21, r11
      dc:	5e 11       	cpse	r21, r14
      de:	6c 10       	cpse	r6, r12
      e0:	7e 11       	cpse	r23, r14
      e2:	6c 10       	cpse	r6, r12
      e4:	d4 11       	cpse	r29, r4
      e6:	20 12       	cpse	r2, r16
      e8:	e0 11       	cpse	r30, r0
      ea:	00 12       	cpse	r0, r16
      ec:	6c 10       	cpse	r6, r12
      ee:	6c 10       	cpse	r6, r12
      f0:	6c 10       	cpse	r6, r12
      f2:	6c 10       	cpse	r6, r12
      f4:	6c 10       	cpse	r6, r12
      f6:	6c 10       	cpse	r6, r12
      f8:	6c 10       	cpse	r6, r12
      fa:	6c 10       	cpse	r6, r12
      fc:	6c 10       	cpse	r6, r12
      fe:	6c 10       	cpse	r6, r12
     100:	6c 10       	cpse	r6, r12
     102:	6c 10       	cpse	r6, r12
     104:	6c 10       	cpse	r6, r12
     106:	6c 10       	cpse	r6, r12
     108:	6c 10       	cpse	r6, r12
     10a:	6c 10       	cpse	r6, r12
     10c:	6c 10       	cpse	r6, r12
     10e:	6c 10       	cpse	r6, r12
     110:	6c 10       	cpse	r6, r12
     112:	6c 10       	cpse	r6, r12
     114:	6c 10       	cpse	r6, r12
     116:	6c 10       	cpse	r6, r12
     118:	6c 10       	cpse	r6, r12
     11a:	6c 10       	cpse	r6, r12
     11c:	6c 10       	cpse	r6, r12
     11e:	6c 10       	cpse	r6, r12
     120:	6c 10       	cpse	r6, r12
     122:	6c 10       	cpse	r6, r12
     124:	6c 10       	cpse	r6, r12
     126:	6c 10       	cpse	r6, r12
     128:	6c 10       	cpse	r6, r12
     12a:	6c 10       	cpse	r6, r12
     12c:	6c 10       	cpse	r6, r12
     12e:	6c 10       	cpse	r6, r12
     130:	6c 10       	cpse	r6, r12
     132:	6c 10       	cpse	r6, r12
     134:	6c 10       	cpse	r6, r12
     136:	6c 10       	cpse	r6, r12
     138:	6c 10       	cpse	r6, r12
     13a:	6c 10       	cpse	r6, r12
     13c:	6c 10       	cpse	r6, r12
     13e:	6c 10       	cpse	r6, r12
     140:	6c 10       	cpse	r6, r12
     142:	6c 10       	cpse	r6, r12
     144:	6c 10       	cpse	r6, r12
     146:	6c 10       	cpse	r6, r12
     148:	6c 10       	cpse	r6, r12
     14a:	6c 10       	cpse	r6, r12
     14c:	6c 10       	cpse	r6, r12
     14e:	6c 10       	cpse	r6, r12
     150:	6c 10       	cpse	r6, r12
     152:	6c 10       	cpse	r6, r12
     154:	6c 10       	cpse	r6, r12
     156:	6c 10       	cpse	r6, r12
     158:	6c 10       	cpse	r6, r12
     15a:	6c 10       	cpse	r6, r12
     15c:	6c 10       	cpse	r6, r12
     15e:	6c 10       	cpse	r6, r12
     160:	6c 10       	cpse	r6, r12
     162:	6c 10       	cpse	r6, r12
     164:	6c 10       	cpse	r6, r12
     166:	6c 10       	cpse	r6, r12
     168:	6c 10       	cpse	r6, r12
     16a:	6c 10       	cpse	r6, r12
     16c:	6c 10       	cpse	r6, r12
     16e:	6c 10       	cpse	r6, r12
     170:	6c 10       	cpse	r6, r12
     172:	6c 10       	cpse	r6, r12
     174:	6c 10       	cpse	r6, r12
     176:	6c 10       	cpse	r6, r12
     178:	6c 10       	cpse	r6, r12
     17a:	6c 10       	cpse	r6, r12
     17c:	6c 10       	cpse	r6, r12
     17e:	6c 10       	cpse	r6, r12
     180:	6c 10       	cpse	r6, r12
     182:	6c 10       	cpse	r6, r12
     184:	6c 10       	cpse	r6, r12
     186:	6c 10       	cpse	r6, r12
     188:	a0 10       	cpse	r10, r0
     18a:	e7 15       	cp	r30, r7
     18c:	28 17       	cp	r18, r24
     18e:	61 15       	cp	r22, r1
     190:	fe 16       	cp	r15, r30
     192:	b4 15       	cp	r27, r4
     194:	c3 16       	cp	r12, r19
     196:	fe 14       	cp	r15, r14
     198:	83 14       	cp	r8, r3
     19a:	03 14       	cp	r0, r3
     19c:	a4 13       	cpse	r26, r20
     19e:	3d 16       	cp	r3, r29

000001a0 <__trampolines_end>:
     1a0:	b5 01       	movw	r22, r10
     1a2:	a4 01       	movw	r20, r8

000001a4 <FwPartNum>:
     1a4:	35 30 31 30 31 30 2d 30 30 30 30 36 34 00 00 00     501010-000064...
	...

000001b5 <buildVersion>:
	...

000001b6 <udpBulkTransferSeq>:
     1b6:	1b 5a 00 00                                         .Z..

000001ba <__ctors_end>:
     1ba:	11 24       	eor	r1, r1
     1bc:	1f be       	out	0x3f, r1	; 63
     1be:	cf ef       	ldi	r28, 0xFF	; 255
     1c0:	d0 e1       	ldi	r29, 0x10	; 16
     1c2:	de bf       	out	0x3e, r29	; 62
     1c4:	cd bf       	out	0x3d, r28	; 61

000001c6 <__do_copy_data>:
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	a0 e0       	ldi	r26, 0x00	; 0
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	e2 e2       	ldi	r30, 0x22	; 34
     1ce:	f0 e4       	ldi	r31, 0x40	; 64
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__do_copy_data+0x10>
     1d2:	05 90       	lpm	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	ac 30       	cpi	r26, 0x0C	; 12
     1d8:	b1 07       	cpc	r27, r17
     1da:	d9 f7       	brne	.-10     	; 0x1d2 <__do_copy_data+0xc>

000001dc <__do_clear_bss>:
     1dc:	28 e0       	ldi	r18, 0x08	; 8
     1de:	ac e0       	ldi	r26, 0x0C	; 12
     1e0:	b1 e0       	ldi	r27, 0x01	; 1
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <.do_clear_bss_start>

000001e4 <.do_clear_bss_loop>:
     1e4:	1d 92       	st	X+, r1

000001e6 <.do_clear_bss_start>:
     1e6:	a5 30       	cpi	r26, 0x05	; 5
     1e8:	b2 07       	cpc	r27, r18
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <.do_clear_bss_loop>
     1ec:	0e 94 0e 1b 	call	0x361c	; 0x361c <main>
     1f0:	0c 94 0f 20 	jmp	0x401e	; 0x401e <_exit>

000001f4 <__bad_interrupt>:
     1f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f8 <initADC>:
void selectRow4(void)
{
    PORTB &= 0x7E; // Clear Bit0 and Bit7
    PORTC &= 0xFE; // Clear Bit0
    PORTD &= 0xFE; // Clear Bit0
    PORTB |= 0x01; // Set Bit0 
     1f8:	22 e5       	ldi	r18, 0x52	; 82
     1fa:	31 e0       	ldi	r19, 0x01	; 1
     1fc:	4a e1       	ldi	r20, 0x1A	; 26
     1fe:	51 e0       	ldi	r21, 0x01	; 1
     200:	da 01       	movw	r26, r20
     202:	f9 01       	movw	r30, r18
     204:	87 e0       	ldi	r24, 0x07	; 7
     206:	11 92       	st	Z+, r1
     208:	11 92       	st	Z+, r1
     20a:	1d 92       	st	X+, r1
     20c:	1d 92       	st	X+, r1
     20e:	81 50       	subi	r24, 0x01	; 1
     210:	d1 f7       	brne	.-12     	; 0x206 <initADC+0xe>
     212:	22 5f       	subi	r18, 0xF2	; 242
     214:	3f 4f       	sbci	r19, 0xFF	; 255
     216:	42 5f       	subi	r20, 0xF2	; 242
     218:	5f 4f       	sbci	r21, 0xFF	; 255
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	2a 38       	cpi	r18, 0x8A	; 138
     21e:	38 07       	cpc	r19, r24
     220:	79 f7       	brne	.-34     	; 0x200 <initADC+0x8>
     222:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sampleCount>
     226:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     22a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     22e:	80 64       	ori	r24, 0x40	; 64
     230:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     234:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     238:	8f 77       	andi	r24, 0x7F	; 127
     23a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     23e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     242:	8f 7d       	andi	r24, 0xDF	; 223
     244:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     248:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     24c:	89 60       	ori	r24, 0x09	; 9
     24e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     252:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     256:	87 60       	ori	r24, 0x07	; 7
     258:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     25c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     260:	88 60       	ori	r24, 0x08	; 8
     262:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     266:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     26a:	80 68       	ori	r24, 0x80	; 128
     26c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     270:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     274:	80 7e       	andi	r24, 0xE0	; 224
     276:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     27a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     27e:	89 60       	ori	r24, 0x09	; 9
     280:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     284:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <channelIndex>
     288:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sampleCount>
     28c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <runCalibrationFlag>
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <activeRow>
     296:	85 b1       	in	r24, 0x05	; 5
     298:	8e 77       	andi	r24, 0x7E	; 126
     29a:	85 b9       	out	0x05, r24	; 5
     29c:	40 98       	cbi	0x08, 0	; 8
     29e:	58 98       	cbi	0x0b, 0	; 11
     2a0:	2f 9a       	sbi	0x05, 7	; 5
     2a2:	08 95       	ret

000002a4 <averageADCData>:
     2a4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sampleCount>
     2a8:	88 23       	and	r24, r24
     2aa:	11 f1       	breq	.+68     	; 0x2f0 <averageADCData+0x4c>
     2ac:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <runCalibrationFlag>
     2b0:	81 11       	cpse	r24, r1
     2b2:	1f c0       	rjmp	.+62     	; 0x2f2 <averageADCData+0x4e>
     2b4:	4a e1       	ldi	r20, 0x1A	; 26
     2b6:	51 e0       	ldi	r21, 0x01	; 1
     2b8:	62 e5       	ldi	r22, 0x52	; 82
     2ba:	71 e0       	ldi	r23, 0x01	; 1
     2bc:	fb 01       	movw	r30, r22
     2be:	da 01       	movw	r26, r20
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	96 95       	lsr	r25
     2c8:	87 95       	ror	r24
     2ca:	96 95       	lsr	r25
     2cc:	87 95       	ror	r24
     2ce:	8d 93       	st	X+, r24
     2d0:	9d 93       	st	X+, r25
     2d2:	11 92       	st	Z+, r1
     2d4:	11 92       	st	Z+, r1
     2d6:	2f 5f       	subi	r18, 0xFF	; 255
     2d8:	27 30       	cpi	r18, 0x07	; 7
     2da:	99 f7       	brne	.-26     	; 0x2c2 <averageADCData+0x1e>
     2dc:	42 5f       	subi	r20, 0xF2	; 242
     2de:	5f 4f       	sbci	r21, 0xFF	; 255
     2e0:	62 5f       	subi	r22, 0xF2	; 242
     2e2:	7f 4f       	sbci	r23, 0xFF	; 255
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	42 35       	cpi	r20, 0x52	; 82
     2e8:	58 07       	cpc	r21, r24
     2ea:	41 f7       	brne	.-48     	; 0x2bc <averageADCData+0x18>
     2ec:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sampleCount>
     2f0:	08 95       	ret
     2f2:	08 95       	ret

000002f4 <setNextSensorRow>:
     2f4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <activeRow>
     2f8:	8f 5f       	subi	r24, 0xFF	; 255
     2fa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <activeRow>
     2fe:	85 30       	cpi	r24, 0x05	; 5
     300:	50 f0       	brcs	.+20     	; 0x316 <setNextSensorRow+0x22>
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <activeRow>
     308:	85 b1       	in	r24, 0x05	; 5
     30a:	8e 77       	andi	r24, 0x7E	; 126
     30c:	85 b9       	out	0x05, r24	; 5
     30e:	40 98       	cbi	0x08, 0	; 8
     310:	58 98       	cbi	0x0b, 0	; 11
     312:	2f 9a       	sbi	0x05, 7	; 5
     314:	08 95       	ret
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	b9 f3       	breq	.-18     	; 0x308 <setNextSensorRow+0x14>
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	61 f0       	breq	.+24     	; 0x336 <setNextSensorRow+0x42>
     31e:	83 30       	cpi	r24, 0x03	; 3
     320:	81 f0       	breq	.+32     	; 0x342 <setNextSensorRow+0x4e>
     322:	84 30       	cpi	r24, 0x04	; 4
     324:	09 f0       	breq	.+2      	; 0x328 <setNextSensorRow+0x34>
     326:	08 95       	ret
     328:	85 b1       	in	r24, 0x05	; 5
     32a:	8e 77       	andi	r24, 0x7E	; 126
     32c:	85 b9       	out	0x05, r24	; 5
     32e:	40 98       	cbi	0x08, 0	; 8
     330:	58 98       	cbi	0x0b, 0	; 11
     332:	28 9a       	sbi	0x05, 0	; 5
     334:	08 95       	ret
     336:	85 b1       	in	r24, 0x05	; 5
     338:	8e 77       	andi	r24, 0x7E	; 126
     33a:	85 b9       	out	0x05, r24	; 5
     33c:	40 98       	cbi	0x08, 0	; 8
     33e:	58 9a       	sbi	0x0b, 0	; 11
     340:	08 95       	ret
     342:	85 b1       	in	r24, 0x05	; 5
     344:	8e 77       	andi	r24, 0x7E	; 126
     346:	85 b9       	out	0x05, r24	; 5
     348:	58 98       	cbi	0x0b, 0	; 11
     34a:	40 9a       	sbi	0x08, 0	; 8
     34c:	08 95       	ret

0000034e <startADCConversion>:
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <runCalibrationFlag>
     356:	81 11       	cpse	r24, r1
     358:	08 c0       	rjmp	.+16     	; 0x36a <startADCConversion+0x1c>
     35a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     35e:	80 64       	ori	r24, 0x40	; 64
     360:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret
     36a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <calInitDone.2267>
     36e:	88 23       	and	r24, r24
     370:	69 f0       	breq	.+26     	; 0x38c <startADCConversion+0x3e>
     372:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     376:	88 23       	and	r24, r24
     378:	09 f4       	brne	.+2      	; 0x37c <startADCConversion+0x2e>
     37a:	48 c0       	rjmp	.+144    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     37c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     380:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     384:	80 64       	ori	r24, 0x40	; 64
     386:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     38a:	ec cf       	rjmp	.-40     	; 0x364 <startADCConversion+0x16>
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <calInitDone.2267>
     392:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     396:	95 b1       	in	r25, 0x05	; 5
     398:	9e 77       	andi	r25, 0x7E	; 126
     39a:	95 b9       	out	0x05, r25	; 5
     39c:	40 98       	cbi	0x08, 0	; 8
     39e:	58 98       	cbi	0x0b, 0	; 11
     3a0:	2f 9a       	sbi	0x05, 7	; 5
     3a2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <activeRow>
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	0e 94 ed 18 	call	0x31da	; 0x31da <setDAC>
     3ae:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <calRow>
     3b2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <calSensor>
     3b6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <channelIndex>
     3ba:	22 e5       	ldi	r18, 0x52	; 82
     3bc:	31 e0       	ldi	r19, 0x01	; 1
     3be:	4a e1       	ldi	r20, 0x1A	; 26
     3c0:	51 e0       	ldi	r21, 0x01	; 1
     3c2:	da 01       	movw	r26, r20
     3c4:	f9 01       	movw	r30, r18
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	11 92       	st	Z+, r1
     3ca:	11 92       	st	Z+, r1
     3cc:	1d 92       	st	X+, r1
     3ce:	1d 92       	st	X+, r1
     3d0:	8f 5f       	subi	r24, 0xFF	; 255
     3d2:	87 30       	cpi	r24, 0x07	; 7
     3d4:	c9 f7       	brne	.-14     	; 0x3c8 <startADCConversion+0x7a>
     3d6:	22 5f       	subi	r18, 0xF2	; 242
     3d8:	3f 4f       	sbci	r19, 0xFF	; 255
     3da:	42 5f       	subi	r20, 0xF2	; 242
     3dc:	5f 4f       	sbci	r21, 0xFF	; 255
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	2a 38       	cpi	r18, 0x8A	; 138
     3e2:	38 07       	cpc	r19, r24
     3e4:	71 f7       	brne	.-36     	; 0x3c2 <startADCConversion+0x74>
     3e6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sampleCount>
     3ea:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     3ee:	80 7e       	andi	r24, 0xE0	; 224
     3f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     3f4:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     3f8:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <channelIndex>
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	ec 5f       	subi	r30, 0xFC	; 252
     400:	fe 4f       	sbci	r31, 0xFE	; 254
     402:	80 81       	ld	r24, Z
     404:	89 2b       	or	r24, r25
     406:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     40a:	ac cf       	rjmp	.-168    	; 0x364 <startADCConversion+0x16>
     40c:	f8 94       	cli
     40e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <getDAC>
     412:	ec 01       	movw	r28, r24
     414:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <calSensor>
     418:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <calRow>
     41c:	69 2f       	mov	r22, r25
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	9b 01       	movw	r18, r22
     422:	e7 e0       	ldi	r30, 0x07	; 7
     424:	8e 9f       	mul	r24, r30
     426:	20 0d       	add	r18, r0
     428:	31 1d       	adc	r19, r1
     42a:	11 24       	eor	r1, r1
     42c:	22 0f       	add	r18, r18
     42e:	33 1f       	adc	r19, r19
     430:	f9 01       	movw	r30, r18
     432:	ee 5a       	subi	r30, 0xAE	; 174
     434:	fe 4f       	sbci	r31, 0xFE	; 254
     436:	40 81       	ld	r20, Z
     438:	51 81       	ldd	r21, Z+1	; 0x01
     43a:	52 95       	swap	r21
     43c:	42 95       	swap	r20
     43e:	4f 70       	andi	r20, 0x0F	; 15
     440:	45 27       	eor	r20, r21
     442:	5f 70       	andi	r21, 0x0F	; 15
     444:	45 27       	eor	r20, r21
     446:	f9 01       	movw	r30, r18
     448:	ef 56       	subi	r30, 0x6F	; 111
     44a:	f8 4f       	sbci	r31, 0xF8	; 248
     44c:	51 83       	std	Z+1, r21	; 0x01
     44e:	40 83       	st	Z, r20
     450:	4d 3f       	cpi	r20, 0xFD	; 253
     452:	e1 e0       	ldi	r30, 0x01	; 1
     454:	5e 07       	cpc	r21, r30
     456:	08 f4       	brcc	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	48 c0       	rjmp	.+144    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     45a:	44 30       	cpi	r20, 0x04	; 4
     45c:	52 40       	sbci	r21, 0x02	; 2
     45e:	08 f4       	brcc	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     460:	c8 c0       	rjmp	.+400    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
     462:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <calRetryCount.2264>
     466:	99 30       	cpi	r25, 0x09	; 9
     468:	08 f0       	brcs	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     46a:	44 c0       	rjmp	.+136    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     46c:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <getDAC>
     470:	84 36       	cpi	r24, 0x64	; 100
     472:	22 e0       	ldi	r18, 0x02	; 2
     474:	92 07       	cpc	r25, r18
     476:	08 f0       	brcs	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     478:	88 c1       	rjmp	.+784    	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	0e 94 ed 18 	call	0x31da	; 0x31da <setDAC>
     480:	0e 94 2d 1a 	call	0x345a	; 0x345a <toggleRow2LED>
     484:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	09 f4       	brne	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48c:	7b c1       	rjmp	.+758    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     494:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <calRetryCount.2264>
     498:	8f 5f       	subi	r24, 0xFF	; 255
     49a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <calRetryCount.2264>
     49e:	22 e5       	ldi	r18, 0x52	; 82
     4a0:	31 e0       	ldi	r19, 0x01	; 1
     4a2:	4a e1       	ldi	r20, 0x1A	; 26
     4a4:	51 e0       	ldi	r21, 0x01	; 1
     4a6:	da 01       	movw	r26, r20
     4a8:	f9 01       	movw	r30, r18
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	11 92       	st	Z+, r1
     4ae:	11 92       	st	Z+, r1
     4b0:	1d 92       	st	X+, r1
     4b2:	1d 92       	st	X+, r1
     4b4:	8f 5f       	subi	r24, 0xFF	; 255
     4b6:	87 30       	cpi	r24, 0x07	; 7
     4b8:	c9 f7       	brne	.-14     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4ba:	22 5f       	subi	r18, 0xF2	; 242
     4bc:	3f 4f       	sbci	r19, 0xFF	; 255
     4be:	42 5f       	subi	r20, 0xF2	; 242
     4c0:	5f 4f       	sbci	r21, 0xFF	; 255
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	2a 38       	cpi	r18, 0x8A	; 138
     4c6:	38 07       	cpc	r19, r24
     4c8:	71 f7       	brne	.-36     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4ca:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sampleCount>
     4ce:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     4d2:	87 30       	cpi	r24, 0x07	; 7
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4d6:	09 c1       	rjmp	.+530    	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
     4d8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <channelIndex>
     4dc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <sensorSampleCount>
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     4e6:	78 94       	sei
     4e8:	3d cf       	rjmp	.-390    	; 0x364 <startADCConversion+0x16>
     4ea:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <calRetryCount.2264>
     4ee:	29 30       	cpi	r18, 0x09	; 9
     4f0:	08 f4       	brcc	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f2:	0e c1       	rjmp	.+540    	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
     4f4:	f9 99       	sbic	0x1f, 1	; 31
     4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f8:	9e e0       	ldi	r25, 0x0E	; 14
     4fa:	89 9f       	mul	r24, r25
     4fc:	90 01       	movw	r18, r0
     4fe:	11 24       	eor	r1, r1
     500:	22 59       	subi	r18, 0x92	; 146
     502:	38 4f       	sbci	r19, 0xF8	; 248
     504:	cb 01       	movw	r24, r22
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	6c 2f       	mov	r22, r28
     50c:	82 0f       	add	r24, r18
     50e:	93 1f       	adc	r25, r19
     510:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
     514:	f9 99       	sbic	0x1f, 1	; 31
     516:	fe cf       	rjmp	.-4      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     518:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <calRow>
     51c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	ee e0       	ldi	r30, 0x0E	; 14
     528:	2e 9f       	mul	r18, r30
     52a:	80 0d       	add	r24, r0
     52c:	91 1d       	adc	r25, r1
     52e:	11 24       	eor	r1, r1
     530:	6d 2f       	mov	r22, r29
     532:	81 59       	subi	r24, 0x91	; 145
     534:	98 4f       	sbci	r25, 0xF8	; 248
     536:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
     53a:	f9 99       	sbic	0x1f, 1	; 31
     53c:	fe cf       	rjmp	.-4      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     53e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <calRow>
     542:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <calSensor>
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	f9 01       	movw	r30, r18
     54a:	47 e0       	ldi	r20, 0x07	; 7
     54c:	84 9f       	mul	r24, r20
     54e:	e0 0d       	add	r30, r0
     550:	f1 1d       	adc	r31, r1
     552:	11 24       	eor	r1, r1
     554:	ee 0f       	add	r30, r30
     556:	ff 1f       	adc	r31, r31
     558:	ef 56       	subi	r30, 0x6F	; 111
     55a:	f8 4f       	sbci	r31, 0xF8	; 248
     55c:	4e e0       	ldi	r20, 0x0E	; 14
     55e:	84 9f       	mul	r24, r20
     560:	c0 01       	movw	r24, r0
     562:	11 24       	eor	r1, r1
     564:	8e 5c       	subi	r24, 0xCE	; 206
     566:	98 4f       	sbci	r25, 0xF8	; 248
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	60 81       	ld	r22, Z
     56e:	82 0f       	add	r24, r18
     570:	93 1f       	adc	r25, r19
     572:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
     576:	f9 99       	sbic	0x1f, 1	; 31
     578:	fe cf       	rjmp	.-4      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
     57a:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <calRow>
     57e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	fc 01       	movw	r30, r24
     586:	37 e0       	ldi	r19, 0x07	; 7
     588:	23 9f       	mul	r18, r19
     58a:	e0 0d       	add	r30, r0
     58c:	f1 1d       	adc	r31, r1
     58e:	11 24       	eor	r1, r1
     590:	ee 0f       	add	r30, r30
     592:	ff 1f       	adc	r31, r31
     594:	ef 56       	subi	r30, 0x6F	; 111
     596:	f8 4f       	sbci	r31, 0xF8	; 248
     598:	61 81       	ldd	r22, Z+1	; 0x01
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	4e e0       	ldi	r20, 0x0E	; 14
     5a0:	24 9f       	mul	r18, r20
     5a2:	80 0d       	add	r24, r0
     5a4:	91 1d       	adc	r25, r1
     5a6:	11 24       	eor	r1, r1
     5a8:	8d 5c       	subi	r24, 0xCD	; 205
     5aa:	98 4f       	sbci	r25, 0xF8	; 248
     5ac:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
     5b0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <calSensor>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	0e 94 ed 18 	call	0x31da	; 0x31da <setDAC>
     5c2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     5c6:	80 7e       	andi	r24, 0xE0	; 224
     5c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     5cc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <calSensor>
     5d0:	e7 30       	cpi	r30, 0x07	; 7
     5d2:	08 f0       	brcs	.+2      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5d4:	b3 c0       	rjmp	.+358    	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
     5d6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	ec 5f       	subi	r30, 0xFC	; 252
     5de:	fe 4f       	sbci	r31, 0xFE	; 254
     5e0:	80 81       	ld	r24, Z
     5e2:	89 2b       	or	r24, r25
     5e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     5e8:	0e 94 32 1a 	call	0x3464	; 0x3464 <toggleRow3LED>
     5ec:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <calRetryCount.2264>
     5f0:	56 cf       	rjmp	.-340    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     5f2:	f9 99       	sbic	0x1f, 1	; 31
     5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
     5f6:	ee e0       	ldi	r30, 0x0E	; 14
     5f8:	8e 9f       	mul	r24, r30
     5fa:	90 01       	movw	r18, r0
     5fc:	11 24       	eor	r1, r1
     5fe:	22 59       	subi	r18, 0x92	; 146
     600:	38 4f       	sbci	r19, 0xF8	; 248
     602:	cb 01       	movw	r24, r22
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	6c 2f       	mov	r22, r28
     60a:	82 0f       	add	r24, r18
     60c:	93 1f       	adc	r25, r19
     60e:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
     612:	f9 99       	sbic	0x1f, 1	; 31
     614:	fe cf       	rjmp	.-4      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
     616:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <calRow>
     61a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	88 0f       	add	r24, r24
     622:	99 1f       	adc	r25, r25
     624:	3e e0       	ldi	r19, 0x0E	; 14
     626:	23 9f       	mul	r18, r19
     628:	80 0d       	add	r24, r0
     62a:	91 1d       	adc	r25, r1
     62c:	11 24       	eor	r1, r1
     62e:	6d 2f       	mov	r22, r29
     630:	81 59       	subi	r24, 0x91	; 145
     632:	98 4f       	sbci	r25, 0xF8	; 248
     634:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
     638:	f9 99       	sbic	0x1f, 1	; 31
     63a:	fe cf       	rjmp	.-4      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     63c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <calRow>
     640:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <calSensor>
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	f9 01       	movw	r30, r18
     648:	47 e0       	ldi	r20, 0x07	; 7
     64a:	84 9f       	mul	r24, r20
     64c:	e0 0d       	add	r30, r0
     64e:	f1 1d       	adc	r31, r1
     650:	11 24       	eor	r1, r1
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	ef 56       	subi	r30, 0x6F	; 111
     658:	f8 4f       	sbci	r31, 0xF8	; 248
     65a:	4e e0       	ldi	r20, 0x0E	; 14
     65c:	84 9f       	mul	r24, r20
     65e:	c0 01       	movw	r24, r0
     660:	11 24       	eor	r1, r1
     662:	8e 5c       	subi	r24, 0xCE	; 206
     664:	98 4f       	sbci	r25, 0xF8	; 248
     666:	22 0f       	add	r18, r18
     668:	33 1f       	adc	r19, r19
     66a:	60 81       	ld	r22, Z
     66c:	82 0f       	add	r24, r18
     66e:	93 1f       	adc	r25, r19
     670:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
     674:	f9 99       	sbic	0x1f, 1	; 31
     676:	fe cf       	rjmp	.-4      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
     678:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <calRow>
     67c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	fc 01       	movw	r30, r24
     684:	37 e0       	ldi	r19, 0x07	; 7
     686:	23 9f       	mul	r18, r19
     688:	e0 0d       	add	r30, r0
     68a:	f1 1d       	adc	r31, r1
     68c:	11 24       	eor	r1, r1
     68e:	ee 0f       	add	r30, r30
     690:	ff 1f       	adc	r31, r31
     692:	ef 56       	subi	r30, 0x6F	; 111
     694:	f8 4f       	sbci	r31, 0xF8	; 248
     696:	61 81       	ldd	r22, Z+1	; 0x01
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	4e e0       	ldi	r20, 0x0E	; 14
     69e:	24 9f       	mul	r18, r20
     6a0:	80 0d       	add	r24, r0
     6a2:	91 1d       	adc	r25, r1
     6a4:	11 24       	eor	r1, r1
     6a6:	8d 5c       	subi	r24, 0xCD	; 205
     6a8:	98 4f       	sbci	r25, 0xF8	; 248
     6aa:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
     6ae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     6b2:	8f 5f       	subi	r24, 0xFF	; 255
     6b4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <calSensor>
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	0e 94 ed 18 	call	0x31da	; 0x31da <setDAC>
     6c0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     6c4:	80 7e       	andi	r24, 0xE0	; 224
     6c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     6ca:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <calSensor>
     6ce:	e7 30       	cpi	r30, 0x07	; 7
     6d0:	c8 f4       	brcc	.+50     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
     6d2:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	ec 5f       	subi	r30, 0xFC	; 252
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	80 81       	ld	r24, Z
     6de:	89 2b       	or	r24, r25
     6e0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     6e4:	0e 94 1f 1a 	call	0x343e	; 0x343e <toggleAllLEDs>
     6e8:	da ce       	rjmp	.-588    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     6ea:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <calSensor>
     6ee:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <calRow>
     6f2:	cf 5f       	subi	r28, 0xFF	; 255
     6f4:	c0 93 15 01 	sts	0x0115, r28	; 0x800115 <calRow>
     6f8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <setNextSensorRow>
     6fc:	c4 30       	cpi	r28, 0x04	; 4
     6fe:	78 f5       	brcc	.+94     	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	ea ce       	rjmp	.-556    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     704:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     708:	89 60       	ori	r24, 0x09	; 9
     70a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     70e:	ea cf       	rjmp	.-44     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     710:	cd 39       	cpi	r28, 0x9D	; 157
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	de 07       	cpc	r29, r30
     716:	c0 f0       	brcs	.+48     	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
     718:	ce 01       	movw	r24, r28
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	0e 94 ed 18 	call	0x31da	; 0x31da <setDAC>
     720:	0e 94 28 1a 	call	0x3450	; 0x3450 <toggleRow1LED>
     724:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     728:	88 23       	and	r24, r24
     72a:	61 f1       	breq	.+88     	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     72c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
     730:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <calRetryCount.2264>
     734:	8f 5f       	subi	r24, 0xFF	; 255
     736:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <calRetryCount.2264>
     73a:	b1 ce       	rjmp	.-670    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     73c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     740:	89 60       	ori	r24, 0x09	; 9
     742:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     746:	50 cf       	rjmp	.-352    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <calFail>
     74e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <calFailRow>
     752:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <calFailSensor>
     756:	9f 5f       	subi	r25, 0xFF	; 255
     758:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <calSensor>
     75c:	ad cf       	rjmp	.-166    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     75e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <runCalibrationFlag>
     762:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <calInitDone.2267>
     766:	0e 94 1a 1a 	call	0x3434	; 0x3434 <turnOffAllLEDs>
     76a:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <calFailSensor>
     76e:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <calFailRow>
     772:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <calFail>
     776:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <sendCalStatusMsg>
     77a:	0e 94 b8 08 	call	0x1170	; 0x1170 <readCalValues>
     77e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     782:	aa ce       	rjmp	.-684    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     784:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <calRetryCount.2264>
     788:	8a ce       	rjmp	.-748    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <calFail>
     790:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <calRow>
     794:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <calFailRow>
     798:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <calSensor>
     79c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <calFailSensor>
     7a0:	88 cf       	rjmp	.-240    	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>

000007a2 <__vector_27>:
     7a2:	1f 92       	push	r1
     7a4:	0f 92       	push	r0
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	0f 92       	push	r0
     7aa:	11 24       	eor	r1, r1
     7ac:	2f 93       	push	r18
     7ae:	3f 93       	push	r19
     7b0:	4f 93       	push	r20
     7b2:	5f 93       	push	r21
     7b4:	6f 93       	push	r22
     7b6:	7f 93       	push	r23
     7b8:	8f 93       	push	r24
     7ba:	9f 93       	push	r25
     7bc:	af 93       	push	r26
     7be:	bf 93       	push	r27
     7c0:	cf 93       	push	r28
     7c2:	ef 93       	push	r30
     7c4:	ff 93       	push	r31
     7c6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
     7ca:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
     7ce:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <channelIndex>
     7d2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <activeRow>
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	fc 01       	movw	r30, r24
     7dc:	ee 0f       	add	r30, r30
     7de:	ff 1f       	adc	r31, r31
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	ee 0f       	add	r30, r30
     7e6:	ff 1f       	adc	r31, r31
     7e8:	e8 1b       	sub	r30, r24
     7ea:	f9 0b       	sbc	r31, r25
     7ec:	e4 0f       	add	r30, r20
     7ee:	f1 1d       	adc	r31, r1
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	ee 5a       	subi	r30, 0xAE	; 174
     7f6:	fe 4f       	sbci	r31, 0xFE	; 254
     7f8:	82 2f       	mov	r24, r18
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	93 2b       	or	r25, r19
     7fe:	20 81       	ld	r18, Z
     800:	31 81       	ldd	r19, Z+1	; 0x01
     802:	82 0f       	add	r24, r18
     804:	93 1f       	adc	r25, r19
     806:	91 83       	std	Z+1, r25	; 0x01
     808:	80 83       	st	Z, r24
     80a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sensorSampleCount>
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <sensorSampleCount>
     814:	c0 91 16 01 	lds	r28, 0x0116	; 0x800116 <runCalibrationFlag>
     818:	cc 23       	and	r28, r28
     81a:	c9 f0       	breq	.+50     	; 0x84e <__EEPROM_REGION_LENGTH__+0x4e>
     81c:	80 31       	cpi	r24, 0x10	; 16
     81e:	28 f4       	brcc	.+10     	; 0x82a <__EEPROM_REGION_LENGTH__+0x2a>
     820:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     824:	80 64       	ori	r24, 0x40	; 64
     826:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f007a>
     82a:	ff 91       	pop	r31
     82c:	ef 91       	pop	r30
     82e:	cf 91       	pop	r28
     830:	bf 91       	pop	r27
     832:	af 91       	pop	r26
     834:	9f 91       	pop	r25
     836:	8f 91       	pop	r24
     838:	7f 91       	pop	r23
     83a:	6f 91       	pop	r22
     83c:	5f 91       	pop	r21
     83e:	4f 91       	pop	r20
     840:	3f 91       	pop	r19
     842:	2f 91       	pop	r18
     844:	0f 90       	pop	r0
     846:	0f be       	out	0x3f, r0	; 63
     848:	0f 90       	pop	r0
     84a:	1f 90       	pop	r1
     84c:	18 95       	reti
     84e:	84 30       	cpi	r24, 0x04	; 4
     850:	38 f3       	brcs	.-50     	; 0x820 <__EEPROM_REGION_LENGTH__+0x20>
     852:	4f 5f       	subi	r20, 0xFF	; 255
     854:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <channelIndex>
     858:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     85c:	80 7e       	andi	r24, 0xE0	; 224
     85e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     862:	47 30       	cpi	r20, 0x07	; 7
     864:	50 f1       	brcs	.+84     	; 0x8ba <__EEPROM_REGION_LENGTH__+0xba>
     866:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     86a:	89 60       	ori	r24, 0x09	; 9
     86c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     870:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <channelIndex>
     874:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <activeRow>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	c1 f1       	breq	.+112    	; 0x8ec <__EEPROM_REGION_LENGTH__+0xec>
     87c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <setNextSensorRow>
     880:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <sensorSampleCount>
     884:	8c 2f       	mov	r24, r28
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <activeRow>
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	21 50       	subi	r18, 0x01	; 1
     890:	31 09       	sbc	r19, r1
     892:	f9 01       	movw	r30, r18
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	ee 0f       	add	r30, r30
     89a:	ff 1f       	adc	r31, r31
     89c:	ee 0f       	add	r30, r30
     89e:	ff 1f       	adc	r31, r31
     8a0:	e2 1b       	sub	r30, r18
     8a2:	f3 0b       	sbc	r31, r19
     8a4:	e8 0f       	add	r30, r24
     8a6:	f9 1f       	adc	r31, r25
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	e3 53       	subi	r30, 0x33	; 51
     8ae:	f8 4f       	sbci	r31, 0xF8	; 248
     8b0:	80 81       	ld	r24, Z
     8b2:	91 81       	ldd	r25, Z+1	; 0x01
     8b4:	0e 94 ed 18 	call	0x31da	; 0x31da <setDAC>
     8b8:	b8 cf       	rjmp	.-144    	; 0x82a <__EEPROM_REGION_LENGTH__+0x2a>
     8ba:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     8be:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <channelIndex>
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	ec 5f       	subi	r30, 0xFC	; 252
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	80 81       	ld	r24, Z
     8ca:	89 2b       	or	r24, r25
     8cc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f007c>
     8d0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sampleCount>
     8d4:	8f 5f       	subi	r24, 0xFF	; 255
     8d6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sampleCount>
     8da:	c0 91 19 01 	lds	r28, 0x0119	; 0x800119 <channelIndex>
     8de:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <sensorSampleCount>
     8e2:	c7 30       	cpi	r28, 0x07	; 7
     8e4:	78 f2       	brcs	.-98     	; 0x884 <__EEPROM_REGION_LENGTH__+0x84>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	ce cf       	rjmp	.-100    	; 0x888 <__EEPROM_REGION_LENGTH__+0x88>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sensorsReadyFlag>
     8f2:	c4 cf       	rjmp	.-120    	; 0x87c <__EEPROM_REGION_LENGTH__+0x7c>

000008f4 <getAveragedADCDataPtr>:
     8f4:	8a e1       	ldi	r24, 0x1A	; 26
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	08 95       	ret

000008fa <startSensorCalibration>:
}

// Kicks off the calibration process
void startSensorCalibration(void)
{
    runCalibrationFlag = 1;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <runCalibrationFlag>
     900:	08 95       	ret

00000902 <getSensorsReadyFlag>:
}

BYTE getSensorsReadyFlag(void)
{
    return sensorsReadyFlag;
}
     902:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sensorsReadyFlag>
     906:	08 95       	ret

00000908 <clearSensorsReadyFlag>:

void clearSensorsReadyFlag(void)
{
    sensorsReadyFlag = 0;
     908:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sensorsReadyFlag>
     90c:	08 95       	ret

0000090e <getRunCalibrationFlag>:
}

BYTE getRunCalibrationFlag(void)
{
    return runCalibrationFlag;
}
     90e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <runCalibrationFlag>
     912:	08 95       	ret

00000914 <getCalStatusData>:

// Returns the most recent calibration results data
void getCalStatusData(BYTE* status, BYTE* calRow, BYTE* calSensor)
{
    *status = calFail;
     914:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <calFail>
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18
    *calRow = calFailRow;
     91c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <calFailRow>
     920:	fb 01       	movw	r30, r22
     922:	80 83       	st	Z, r24
    *calSensor = calFailSensor;
     924:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <calFailSensor>
     928:	fa 01       	movw	r30, r20
     92a:	80 83       	st	Z, r24
     92c:	08 95       	ret

0000092e <addByteToChecksum>:
/********************************************************************
 Clears the 'deviceUpdateMsgReceivedFlag'.
 ********************************************************************/
void clearDeviceUpdateMsgReceivedFlag(void)
{
    deviceUpdateMsgReceivedFlag = 0;
     92e:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <runningCS1>
     932:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <runningCS1+0x1>
     936:	a9 01       	movw	r20, r18
     938:	48 0f       	add	r20, r24
     93a:	51 1d       	adc	r21, r1
     93c:	ca 01       	movw	r24, r20
     93e:	4f 3f       	cpi	r20, 0xFF	; 255
     940:	51 05       	cpc	r21, r1
     942:	19 f0       	breq	.+6      	; 0x94a <addByteToChecksum+0x1c>
     944:	10 f0       	brcs	.+4      	; 0x94a <addByteToChecksum+0x1c>
     946:	8f 5f       	subi	r24, 0xFF	; 255
     948:	91 09       	sbc	r25, r1
     94a:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <runningCS1+0x1>
     94e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <runningCS1>
     952:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <runningCS2>
     956:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <runningCS2+0x1>
     95a:	28 0f       	add	r18, r24
     95c:	39 1f       	adc	r19, r25
     95e:	2f 3f       	cpi	r18, 0xFF	; 255
     960:	31 05       	cpc	r19, r1
     962:	19 f0       	breq	.+6      	; 0x96a <addByteToChecksum+0x3c>
     964:	10 f0       	brcs	.+4      	; 0x96a <addByteToChecksum+0x3c>
     966:	2f 5f       	subi	r18, 0xFF	; 255
     968:	31 09       	sbc	r19, r1
     96a:	30 93 79 02 	sts	0x0279, r19	; 0x800279 <runningCS2+0x1>
     96e:	20 93 78 02 	sts	0x0278, r18	; 0x800278 <runningCS2>
     972:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <Msg_CS1>
     976:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <Msg_CS2>
     97a:	08 95       	ret

0000097c <transmitAddByteToChecksum>:
     97c:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <transmitRunningChecksum1>
     980:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <transmitRunningChecksum1+0x1>
     984:	a9 01       	movw	r20, r18
     986:	48 0f       	add	r20, r24
     988:	51 1d       	adc	r21, r1
     98a:	ca 01       	movw	r24, r20
     98c:	4f 3f       	cpi	r20, 0xFF	; 255
     98e:	51 05       	cpc	r21, r1
     990:	19 f0       	breq	.+6      	; 0x998 <transmitAddByteToChecksum+0x1c>
     992:	10 f0       	brcs	.+4      	; 0x998 <transmitAddByteToChecksum+0x1c>
     994:	8f 5f       	subi	r24, 0xFF	; 255
     996:	91 09       	sbc	r25, r1
     998:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <transmitRunningChecksum1+0x1>
     99c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <transmitRunningChecksum1>
     9a0:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <transmitRunningChecksum2>
     9a4:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <transmitRunningChecksum2+0x1>
     9a8:	28 0f       	add	r18, r24
     9aa:	39 1f       	adc	r19, r25
     9ac:	2f 3f       	cpi	r18, 0xFF	; 255
     9ae:	31 05       	cpc	r19, r1
     9b0:	19 f0       	breq	.+6      	; 0x9b8 <transmitAddByteToChecksum+0x3c>
     9b2:	10 f0       	brcs	.+4      	; 0x9b8 <transmitAddByteToChecksum+0x3c>
     9b4:	2f 5f       	subi	r18, 0xFF	; 255
     9b6:	31 09       	sbc	r19, r1
     9b8:	30 93 75 02 	sts	0x0275, r19	; 0x800275 <transmitRunningChecksum2+0x1>
     9bc:	20 93 74 02 	sts	0x0274, r18	; 0x800274 <transmitRunningChecksum2>
     9c0:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <transmitFinalChecksum1>
     9c4:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <transmitFinalChecksum2>
     9c8:	08 95       	ret

000009ca <stepAsipStateMachine>:
     9ca:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <AsipSMState>
     9ce:	4e 2f       	mov	r20, r30
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	48 30       	cpi	r20, 0x08	; 8
     9d4:	51 05       	cpc	r21, r1
     9d6:	38 f4       	brcc	.+14     	; 0x9e6 <stepAsipStateMachine+0x1c>
     9d8:	fa 01       	movw	r30, r20
     9da:	e2 5c       	subi	r30, 0xC2	; 194
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <__tablejump2__>
     9e2:	82 3c       	cpi	r24, 0xC2	; 194
     9e4:	a9 f1       	breq	.+106    	; 0xa50 <stepAsipStateMachine+0x86>
     9e6:	08 95       	ret
     9e8:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <Msg_CS1>
     9ec:	89 17       	cp	r24, r25
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <stepAsipStateMachine+0x28>
     9f0:	77 c0       	rjmp	.+238    	; 0xae0 <stepAsipStateMachine+0x116>
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <runningCS1+0x1>
     9fa:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <runningCS1>
     9fe:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <runningCS2+0x1>
     a02:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <runningCS2>
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <Msg_CS1>
     a0c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <Msg_CS2>
     a10:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <AsipSMState>
     a14:	08 95       	ret
     a16:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <Msg_CS2>
     a1a:	89 13       	cpse	r24, r25
     a1c:	ea cf       	rjmp	.-44     	; 0x9f2 <stepAsipStateMachine+0x28>
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <ASIPMessageReady>
     a24:	e6 cf       	rjmp	.-52     	; 0x9f2 <stepAsipStateMachine+0x28>
     a26:	83 35       	cpi	r24, 0x53	; 83
     a28:	09 f4       	brne	.+2      	; 0xa2c <stepAsipStateMachine+0x62>
     a2a:	5e c0       	rjmp	.+188    	; 0xae8 <stepAsipStateMachine+0x11e>
     a2c:	82 3c       	cpi	r24, 0xC2	; 194
     a2e:	09 f7       	brne	.-62     	; 0x9f2 <stepAsipStateMachine+0x28>
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <runningCS1+0x1>
     a38:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <runningCS1>
     a3c:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <runningCS2+0x1>
     a40:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <runningCS2>
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <Msg_CS1>
     a4a:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <Msg_CS2>
     a4e:	82 ec       	ldi	r24, 0xC2	; 194
     a50:	0e 94 97 04 	call	0x92e	; 0x92e <addByteToChecksum>
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     a5a:	08 95       	ret
     a5c:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <Msg_Class>
     a60:	0e 94 97 04 	call	0x92e	; 0x92e <addByteToChecksum>
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     a6a:	08 95       	ret
     a6c:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <Msg_ID>
     a70:	0e 94 97 04 	call	0x92e	; 0x92e <addByteToChecksum>
     a74:	84 e0       	ldi	r24, 0x04	; 4
     a76:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     a7a:	08 95       	ret
     a7c:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <Msg_Length>
     a80:	81 11       	cpse	r24, r1
     a82:	1b c0       	rjmp	.+54     	; 0xaba <stepAsipStateMachine+0xf0>
     a84:	86 e0       	ldi	r24, 0x06	; 6
     a86:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0c 94 97 04 	jmp	0x92e	; 0x92e <addByteToChecksum>
     a90:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <PayloadCount>
     a94:	9f 5f       	subi	r25, 0xFF	; 255
     a96:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <PayloadCount>
     a9a:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <Msg_Length>
     a9e:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <PayloadIndex>
     aa2:	92 17       	cp	r25, r18
     aa4:	79 f0       	breq	.+30     	; 0xac4 <stepAsipStateMachine+0xfa>
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	9e 0f       	add	r25, r30
     aaa:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <PayloadIndex>
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	e8 57       	subi	r30, 0x78	; 120
     ab2:	fc 4f       	sbci	r31, 0xFC	; 252
     ab4:	80 83       	st	Z, r24
     ab6:	0c 94 97 04 	jmp	0x92e	; 0x92e <addByteToChecksum>
     aba:	95 e0       	ldi	r25, 0x05	; 5
     abc:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <AsipSMState>
     ac0:	0c 94 97 04 	jmp	0x92e	; 0x92e <addByteToChecksum>
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	e8 57       	subi	r30, 0x78	; 120
     ac8:	fc 4f       	sbci	r31, 0xFC	; 252
     aca:	80 83       	st	Z, r24
     acc:	0e 94 97 04 	call	0x92e	; 0x92e <addByteToChecksum>
     ad0:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <PayloadCount>
     ad4:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <PayloadIndex>
     ad8:	86 e0       	ldi	r24, 0x06	; 6
     ada:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     ade:	08 95       	ret
     ae0:	87 e0       	ldi	r24, 0x07	; 7
     ae2:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     ae6:	08 95       	ret
     ae8:	0e 94 97 04 	call	0x92e	; 0x92e <addByteToChecksum>
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <AsipSMState>
     af2:	08 95       	ret

00000af4 <buildAsipTransmitMessage>:
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	d8 2f       	mov	r29, r24
     b00:	c6 2f       	mov	r28, r22
     b02:	04 2f       	mov	r16, r20
     b04:	f2 2e       	mov	r15, r18
     b06:	13 2f       	mov	r17, r19
     b08:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <outgoingMsg>
     b0c:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <outgoingMsg+0x1>
     b10:	40 93 7e 02 	sts	0x027E, r20	; 0x80027e <outgoingMsg+0x2>
     b14:	20 93 7f 02 	sts	0x027F, r18	; 0x80027f <outgoingMsg+0x3>
     b18:	30 93 80 02 	sts	0x0280, r19	; 0x800280 <outgoingMsg+0x4>
     b1c:	8f ef       	ldi	r24, 0xFF	; 255
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <transmitRunningChecksum1+0x1>
     b24:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <transmitRunningChecksum1>
     b28:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <transmitRunningChecksum2+0x1>
     b2c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <transmitRunningChecksum2>
     b30:	8f ef       	ldi	r24, 0xFF	; 255
     b32:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <transmitFinalChecksum1>
     b36:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <transmitFinalChecksum2>
     b3a:	82 ec       	ldi	r24, 0xC2	; 194
     b3c:	0e 94 be 04 	call	0x97c	; 0x97c <transmitAddByteToChecksum>
     b40:	83 e5       	ldi	r24, 0x53	; 83
     b42:	0e 94 be 04 	call	0x97c	; 0x97c <transmitAddByteToChecksum>
     b46:	8d 2f       	mov	r24, r29
     b48:	0e 94 be 04 	call	0x97c	; 0x97c <transmitAddByteToChecksum>
     b4c:	8c 2f       	mov	r24, r28
     b4e:	0e 94 be 04 	call	0x97c	; 0x97c <transmitAddByteToChecksum>
     b52:	80 2f       	mov	r24, r16
     b54:	0e 94 be 04 	call	0x97c	; 0x97c <transmitAddByteToChecksum>
     b58:	00 23       	and	r16, r16
     b5a:	71 f0       	breq	.+28     	; 0xb78 <buildAsipTransmitMessage+0x84>
     b5c:	cf 2d       	mov	r28, r15
     b5e:	d1 2f       	mov	r29, r17
     b60:	01 50       	subi	r16, 0x01	; 1
     b62:	10 e0       	ldi	r17, 0x00	; 0
     b64:	0f 5f       	subi	r16, 0xFF	; 255
     b66:	1f 4f       	sbci	r17, 0xFF	; 255
     b68:	0c 0f       	add	r16, r28
     b6a:	1d 1f       	adc	r17, r29
     b6c:	89 91       	ld	r24, Y+
     b6e:	0e 94 be 04 	call	0x97c	; 0x97c <transmitAddByteToChecksum>
     b72:	c0 17       	cp	r28, r16
     b74:	d1 07       	cpc	r29, r17
     b76:	d1 f7       	brne	.-12     	; 0xb6c <buildAsipTransmitMessage+0x78>
     b78:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <transmitFinalChecksum1>
     b7c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <outgoingMsg+0x5>
     b80:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <transmitFinalChecksum2>
     b84:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <outgoingMsg+0x6>
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	08 95       	ret

00000b94 <sendASIPSensorDataMsg>:
/*********************************************************************
 ASIP equivalent to the sendCANSensorDataMsg function. This does not
 transmit immediately, but adds the levels to the flow rate message queue
 *********************************************************************/
void sendASIPSensorDataMsg(BYTE * levels)
{
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	ec 01       	movw	r28, r24
	BYTE * pMessage;
	_CLI();
     b9a:	f8 94       	cli
	BYTE * serialNumPtr = getSerialNumPtr() + 4;
     b9c:	0e 94 ca 1b 	call	0x3794	; 0x3794 <getSerialNumPtr>
     ba0:	dc 01       	movw	r26, r24
	
	if(scFlowRateMessageCount < MAXIMUM_FLOW_RATE_MESSAGES)
     ba2:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <scFlowRateMessageCount>
     ba6:	98 31       	cpi	r25, 0x18	; 24
     ba8:	50 f5       	brcc	.+84     	; 0xbfe <sendASIPSensorDataMsg+0x6a>
	{
		// Write pointer
		pMessage = scbFlowRateTxQueue + (scFlowRateMessageCount * 6);
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	98 9f       	mul	r25, r24
     bae:	f0 01       	movw	r30, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	e5 57       	subi	r30, 0x75	; 117
     bb4:	fe 4f       	sbci	r31, 0xFE	; 254
		
		pMessage[0] = *(serialNumPtr); // Serial Num 
     bb6:	14 96       	adiw	r26, 0x04	; 4
     bb8:	8c 91       	ld	r24, X
     bba:	14 97       	sbiw	r26, 0x04	; 4
     bbc:	80 83       	st	Z, r24
		pMessage[1] = *(serialNumPtr + 1); // Serial Num
     bbe:	15 96       	adiw	r26, 0x05	; 5
     bc0:	8c 91       	ld	r24, X
     bc2:	15 97       	sbiw	r26, 0x05	; 5
     bc4:	81 83       	std	Z+1, r24	; 0x01
		pMessage[2] = *(serialNumPtr + 2); // Serial Num 
     bc6:	16 96       	adiw	r26, 0x06	; 6
     bc8:	8c 91       	ld	r24, X
     bca:	16 97       	sbiw	r26, 0x06	; 6
     bcc:	82 83       	std	Z+2, r24	; 0x02
		pMessage[3] = *(serialNumPtr + 3); // Serial Num 
     bce:	17 96       	adiw	r26, 0x07	; 7
     bd0:	8c 91       	ld	r24, X
     bd2:	83 83       	std	Z+3, r24	; 0x03
		pMessage[4] = ((levels[0] << 4) | (levels[1] & 0x0F)); // Rows 1 & 2
     bd4:	28 81       	ld	r18, Y
     bd6:	80 e1       	ldi	r24, 0x10	; 16
     bd8:	28 9f       	mul	r18, r24
     bda:	90 01       	movw	r18, r0
     bdc:	11 24       	eor	r1, r1
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	8f 70       	andi	r24, 0x0F	; 15
     be2:	28 2b       	or	r18, r24
     be4:	24 83       	std	Z+4, r18	; 0x04
		pMessage[5] = ((levels[2] << 4) | (levels[3] & 0x0F)); // Rows 3 & 4
     be6:	2a 81       	ldd	r18, Y+2	; 0x02
     be8:	80 e1       	ldi	r24, 0x10	; 16
     bea:	28 9f       	mul	r18, r24
     bec:	90 01       	movw	r18, r0
     bee:	11 24       	eor	r1, r1
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	8f 70       	andi	r24, 0x0F	; 15
     bf4:	28 2b       	or	r18, r24
     bf6:	25 83       	std	Z+5, r18	; 0x05
		
		scFlowRateMessageCount++;
     bf8:	9f 5f       	subi	r25, 0xFF	; 255
     bfa:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <scFlowRateMessageCount>
	}
	_SEI();
     bfe:	78 94       	sei
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <addFlowRateMessage>:
 ********************************************************************/
void addFlowRateMessage(BYTE * message)
{
	BYTE i;
	BYTE * pMessage;
	if(scFlowRateMessageCount < MAXIMUM_FLOW_RATE_MESSAGES)
     c06:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <scFlowRateMessageCount>
     c0a:	28 31       	cpi	r18, 0x18	; 24
     c0c:	90 f4       	brcc	.+36     	; 0xc32 <addFlowRateMessage+0x2c>
     c0e:	fc 01       	movw	r30, r24
     c10:	86 e0       	ldi	r24, 0x06	; 6
     c12:	28 9f       	mul	r18, r24
     c14:	d0 01       	movw	r26, r0
     c16:	11 24       	eor	r1, r1
     c18:	a5 57       	subi	r26, 0x75	; 117
     c1a:	be 4f       	sbci	r27, 0xFE	; 254
     c1c:	af 01       	movw	r20, r30
     c1e:	4a 5f       	subi	r20, 0xFA	; 250
     c20:	5f 4f       	sbci	r21, 0xFF	; 255
	{
		pMessage = scbFlowRateTxQueue + (scFlowRateMessageCount * 6);

		for(i = 0; i < 6; i++)
		{
			pMessage[i] = message[i];	
     c22:	81 91       	ld	r24, Z+
     c24:	8d 93       	st	X+, r24
	BYTE * pMessage;
	if(scFlowRateMessageCount < MAXIMUM_FLOW_RATE_MESSAGES)
	{
		pMessage = scbFlowRateTxQueue + (scFlowRateMessageCount * 6);

		for(i = 0; i < 6; i++)
     c26:	e4 17       	cp	r30, r20
     c28:	f5 07       	cpc	r31, r21
     c2a:	d9 f7       	brne	.-10     	; 0xc22 <addFlowRateMessage+0x1c>
		{
			pMessage[i] = message[i];	
		}

		scFlowRateMessageCount++;
     c2c:	2f 5f       	subi	r18, 0xFF	; 255
     c2e:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <scFlowRateMessageCount>
     c32:	08 95       	ret

00000c34 <sendFlowRateMessages>:
/********************************************************************
 Takes the flow rate transmit queue and sends it out as an ASIP message.
 ********************************************************************/
void sendFlowRateMessages(void)
{
	if(scFlowRateMessageCount > 0)
     c34:	40 91 8a 01 	lds	r20, 0x018A	; 0x80018a <scFlowRateMessageCount>
     c38:	41 11       	cpse	r20, r1
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <sendFlowRateMessages+0xa>
     c3c:	08 95       	ret
	{
		buildAsipTransmitMessage(0x0A, 0x01, scFlowRateMessageCount * 6, scbFlowRateTxQueue);
     c3e:	84 2f       	mov	r24, r20
     c40:	88 0f       	add	r24, r24
     c42:	48 0f       	add	r20, r24
     c44:	44 0f       	add	r20, r20
     c46:	2b e8       	ldi	r18, 0x8B	; 139
     c48:	31 e0       	ldi	r19, 0x01	; 1
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	8a e0       	ldi	r24, 0x0A	; 10
     c4e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <buildAsipTransmitMessage>
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     c52:	8c e7       	ldi	r24, 0x7C	; 124
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <sendUdpPacket>
{
	if(scFlowRateMessageCount > 0)
	{
		buildAsipTransmitMessage(0x0A, 0x01, scFlowRateMessageCount * 6, scbFlowRateTxQueue);
		transmitAsipMessage();
		scFlowRateMessageCount = 0;
     c5a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <scFlowRateMessageCount>
     c5e:	08 95       	ret

00000c60 <sendFwUpdatePacketAckMessage>:
	}
}

void sendFwUpdatePacketAckMessage(void)
{
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	00 d0       	rcall	.+0      	; 0xc66 <sendFwUpdatePacketAckMessage+0x6>
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
    BYTE payload[] = {0x00, 0x31};
     c6a:	19 82       	std	Y+1, r1	; 0x01
     c6c:	81 e3       	ldi	r24, 0x31	; 49
     c6e:	8a 83       	std	Y+2, r24	; 0x02
    
    outgoingMsg.MsgClass = 0x01;
     c70:	ec e7       	ldi	r30, 0x7C	; 124
     c72:	f2 e0       	ldi	r31, 0x02	; 2
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 83       	st	Z, r24
    outgoingMsg.MsgId = 0x00;
     c78:	11 82       	std	Z+1, r1	; 0x01
    outgoingMsg.PayloadLength = 2;
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	82 83       	std	Z+2, r24	; 0x02
    outgoingMsg.PayloadPtr = payload;
     c7e:	ce 01       	movw	r24, r28
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	94 83       	std	Z+4, r25	; 0x04
     c84:	83 83       	std	Z+3, r24	; 0x03
    outgoingMsg.Checksum1 = 0x4A;
     c86:	8a e4       	ldi	r24, 0x4A	; 74
     c88:	85 83       	std	Z+5, r24	; 0x05
    outgoingMsg.Checksum2 = 0x83;
     c8a:	83 e8       	ldi	r24, 0x83	; 131
     c8c:	86 83       	std	Z+6, r24	; 0x06
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     c8e:	cf 01       	movw	r24, r30
     c90:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <sendUdpPacket>
    outgoingMsg.PayloadPtr = payload;
    outgoingMsg.Checksum1 = 0x4A;
    outgoingMsg.Checksum2 = 0x83;

	transmitAsipMessage();    
}
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <sendStartFwUpdateAckMessage>:


void sendStartFwUpdateAckMessage(void)
{
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	1f 92       	push	r1
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
    BYTE mode = 3;
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	89 83       	std	Y+1, r24	; 0x01

    outgoingMsg.MsgClass = 0x00;
     cac:	ec e7       	ldi	r30, 0x7C	; 124
     cae:	f2 e0       	ldi	r31, 0x02	; 2
     cb0:	10 82       	st	Z, r1
    outgoingMsg.MsgId = 0x05;
     cb2:	85 e0       	ldi	r24, 0x05	; 5
     cb4:	81 83       	std	Z+1, r24	; 0x01
    outgoingMsg.PayloadLength = 1;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	82 83       	std	Z+2, r24	; 0x02
    outgoingMsg.PayloadPtr = &mode;
     cba:	ce 01       	movw	r24, r28
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	94 83       	std	Z+4, r25	; 0x04
     cc0:	83 83       	std	Z+3, r24	; 0x03
    outgoingMsg.Checksum1 = 0x1F;
     cc2:	8f e1       	ldi	r24, 0x1F	; 31
     cc4:	85 83       	std	Z+5, r24	; 0x05
    outgoingMsg.Checksum2 = 0x45;
     cc6:	85 e4       	ldi	r24, 0x45	; 69
     cc8:	86 83       	std	Z+6, r24	; 0x06
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     cca:	cf 01       	movw	r24, r30
     ccc:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <sendUdpPacket>
    outgoingMsg.PayloadPtr = &mode;
    outgoingMsg.Checksum1 = 0x1F;
    outgoingMsg.Checksum2 = 0x45;

    transmitAsipMessage();
}
     cd0:	0f 90       	pop	r0
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <sendStartCalAckMessage>:

void sendStartCalAckMessage(void)
{
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	00 d0       	rcall	.+0      	; 0xcde <sendStartCalAckMessage+0x6>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
    BYTE payload[] = {ASIP_CLASS_FIELD_CAL, 0x0A};
     ce2:	88 e0       	ldi	r24, 0x08	; 8
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	8a e0       	ldi	r24, 0x0A	; 10
     ce8:	8a 83       	std	Y+2, r24	; 0x02

    outgoingMsg.MsgClass = 0x01;
     cea:	ec e7       	ldi	r30, 0x7C	; 124
     cec:	f2 e0       	ldi	r31, 0x02	; 2
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	80 83       	st	Z, r24
    outgoingMsg.MsgId = 0x00;
     cf2:	11 82       	std	Z+1, r1	; 0x01
    outgoingMsg.PayloadLength = 2;
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	82 83       	std	Z+2, r24	; 0x02
    outgoingMsg.PayloadPtr = payload;
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	94 83       	std	Z+4, r25	; 0x04
     cfe:	83 83       	std	Z+3, r24	; 0x03
    outgoingMsg.Checksum1 = 0x2B;
     d00:	8b e2       	ldi	r24, 0x2B	; 43
     d02:	85 83       	std	Z+5, r24	; 0x05
    outgoingMsg.Checksum2 = 0x6C;
     d04:	8c e6       	ldi	r24, 0x6C	; 108
     d06:	86 83       	std	Z+6, r24	; 0x06
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     d08:	cf 01       	movw	r24, r30
     d0a:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <sendUdpPacket>
    outgoingMsg.PayloadPtr = payload;
    outgoingMsg.Checksum1 = 0x2B;
    outgoingMsg.Checksum2 = 0x6C;

    transmitAsipMessage();
}
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <sendFwUpdatePacketNackMessage>:

void sendFwUpdatePacketNackMessage(void)
{
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <sendFwUpdatePacketNackMessage+0x6>
     d1e:	1f 92       	push	r1
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
    BYTE payload[] = {0x00, 0x31, 0x00};
     d24:	19 82       	std	Y+1, r1	; 0x01
     d26:	81 e3       	ldi	r24, 0x31	; 49
     d28:	8a 83       	std	Y+2, r24	; 0x02
     d2a:	1b 82       	std	Y+3, r1	; 0x03

    outgoingMsg.MsgClass = 0x01;
     d2c:	ec e7       	ldi	r30, 0x7C	; 124
     d2e:	f2 e0       	ldi	r31, 0x02	; 2
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	80 83       	st	Z, r24
    outgoingMsg.MsgId = 0x01;
     d34:	81 83       	std	Z+1, r24	; 0x01
    outgoingMsg.PayloadLength = 3;
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	82 83       	std	Z+2, r24	; 0x02
    outgoingMsg.PayloadPtr = payload;
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	94 83       	std	Z+4, r25	; 0x04
     d40:	83 83       	std	Z+3, r24	; 0x03
    outgoingMsg.Checksum1 = 0x4C;
     d42:	8c e4       	ldi	r24, 0x4C	; 76
     d44:	85 83       	std	Z+5, r24	; 0x05
    outgoingMsg.Checksum2 = 0xD6;
     d46:	86 ed       	ldi	r24, 0xD6	; 214
     d48:	86 83       	std	Z+6, r24	; 0x06
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     d4a:	cf 01       	movw	r24, r30
     d4c:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <sendUdpPacket>
    outgoingMsg.PayloadPtr = payload;
    outgoingMsg.Checksum1 = 0x4C;
    outgoingMsg.Checksum2 = 0xD6;

    transmitAsipMessage();
}
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <sendFwUpdateCompleteAckMessage>:

void sendFwUpdateCompleteAckMessage(void)
{
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	00 d0       	rcall	.+0      	; 0xd62 <sendFwUpdateCompleteAckMessage+0x6>
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
    BYTE payload[] = {0x00, 0x30};
     d66:	19 82       	std	Y+1, r1	; 0x01
     d68:	80 e3       	ldi	r24, 0x30	; 48
     d6a:	8a 83       	std	Y+2, r24	; 0x02

    outgoingMsg.MsgClass = 0x01;
     d6c:	ec e7       	ldi	r30, 0x7C	; 124
     d6e:	f2 e0       	ldi	r31, 0x02	; 2
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 83       	st	Z, r24
    outgoingMsg.MsgId = 0x00;
     d74:	11 82       	std	Z+1, r1	; 0x01
    outgoingMsg.PayloadLength = 2;
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	82 83       	std	Z+2, r24	; 0x02
    outgoingMsg.PayloadPtr = payload;
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	94 83       	std	Z+4, r25	; 0x04
     d80:	83 83       	std	Z+3, r24	; 0x03
    outgoingMsg.Checksum1 = 0x49;
     d82:	89 e4       	ldi	r24, 0x49	; 73
     d84:	85 83       	std	Z+5, r24	; 0x05
    outgoingMsg.Checksum2 = 0x82;
     d86:	82 e8       	ldi	r24, 0x82	; 130
     d88:	86 83       	std	Z+6, r24	; 0x06
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     d8a:	cf 01       	movw	r24, r30
     d8c:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <sendUdpPacket>
    outgoingMsg.PayloadPtr = payload;
    outgoingMsg.Checksum1 = 0x49;
    outgoingMsg.Checksum2 = 0x82;

    transmitAsipMessage();
}
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <processValidAsipMessages>:
 This function processes buffered ASIP data. If a valid ASIP
 message is found, an appropriate action is triggered based on the
 message class and ID.
*********************************************************************/
void processValidAsipMessages(void)
{
     d9a:	cf 93       	push	r28
    BYTE reqFlags;

    reqFlags = getCANDataRequestFlags();
     d9c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
     da0:	c8 2f       	mov	r28, r24
    
    if(ASIPMessageReady)
     da2:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <ASIPMessageReady>
     da6:	88 23       	and	r24, r24
     da8:	81 f0       	breq	.+32     	; 0xdca <processValidAsipMessages+0x30>
    {
        switch(Msg_Class)
     daa:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <Msg_Class>
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	71 f0       	breq	.+28     	; 0xdce <processValidAsipMessages+0x34>
     db2:	98 f1       	brcs	.+102    	; 0xe1a <processValidAsipMessages+0x80>
     db4:	88 30       	cpi	r24, 0x08	; 8
     db6:	d1 f0       	breq	.+52     	; 0xdec <processValidAsipMessages+0x52>
     db8:	8a 30       	cpi	r24, 0x0A	; 10
     dba:	29 f4       	brne	.+10     	; 0xdc6 <processValidAsipMessages+0x2c>
                    }
                }
                break;

			case ASIP_CLASS_FLOW:
				if(Msg_ID == 0x03) // Blockage Info
     dbc:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <Msg_ID>
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <processValidAsipMessages+0x2c>
     dc4:	70 c0       	rjmp	.+224    	; 0xea6 <processValidAsipMessages+0x10c>
				
            default:
                break;

        }
        ASIPMessageReady = 0;
     dc6:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <ASIPMessageReady>
    }
}
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret
                }
                                                  
                break;

            case ASIP_CLASS_ACK:
                if(Msg_ID == 0x00) // Ack Ack
     dce:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <Msg_ID>
     dd2:	91 11       	cpse	r25, r1
     dd4:	f8 cf       	rjmp	.-16     	; 0xdc6 <processValidAsipMessages+0x2c>
                {
                    if((Msg_Payload[0] == ASIP_CLASS_FIELD_CAL) && (Msg_Payload[1] == 0x0B))
     dd6:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <Msg_Payload>
     dda:	98 30       	cpi	r25, 0x08	; 8
     ddc:	a1 f7       	brne	.-24     	; 0xdc6 <processValidAsipMessages+0x2c>
     dde:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <Msg_Payload+0x1>
     de2:	9b 30       	cpi	r25, 0x0B	; 11
     de4:	81 f7       	brne	.-32     	; 0xdc6 <processValidAsipMessages+0x2c>
                    {
                        calStatusDataAckReceived = 1;
     de6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <calStatusDataAckReceived>
     dea:	ed cf       	rjmp	.-38     	; 0xdc6 <processValidAsipMessages+0x2c>
                    }
                }
                break;
                   
            case ASIP_CLASS_FIELD_CAL:
                if(Msg_ID == 0x0A) // Field Cal command
     dec:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <Msg_ID>
     df0:	8a 30       	cpi	r24, 0x0A	; 10
     df2:	49 f7       	brne	.-46     	; 0xdc6 <processValidAsipMessages+0x2c>
                {
                    // send cal CAN command to all sensors on the bus,
                    //  then start a self-cal
                    // Save the connected sensor count, then wait for 
                    //    that many cal status responses
                    if(!getRunCalibrationFlag())
     df4:	0e 94 87 04 	call	0x90e	; 0x90e <getRunCalibrationFlag>
     df8:	81 11       	cpse	r24, r1
     dfa:	e5 cf       	rjmp	.-54     	; 0xdc6 <processValidAsipMessages+0x2c>
                    {
                        disableSensorDataTx();
     dfc:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <disableSensorDataTx>
                        clearCalStatusResponseCount();
     e00:	0e 94 87 12 	call	0x250e	; 0x250e <clearCalStatusResponseCount>
                        sendStartCalAckMessage();
     e04:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <sendStartCalAckMessage>
                        setCANDataRequestFlags(reqFlags | FIELD_CAL_REQ_BITMASK);
     e08:	8c 2f       	mov	r24, r28
     e0a:	80 68       	ori	r24, 0x80	; 128
     e0c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setCANDataRequestFlags>
                        sendStartCalCommand(); 
     e10:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <sendStartCalCommand>
                        startSensorCalibration();    
     e14:	0e 94 7d 04 	call	0x8fa	; 0x8fa <startSensorCalibration>
     e18:	d6 cf       	rjmp	.-84     	; 0xdc6 <processValidAsipMessages+0x2c>
    if(ASIPMessageReady)
    {
        switch(Msg_Class)
        {
            case ASIP_CLASS_DEVICE:     
            if(Msg_ID == 0x00)
     e1a:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <Msg_ID>
     e1e:	81 11       	cpse	r24, r1
     e20:	0f c0       	rjmp	.+30     	; 0xe40 <processValidAsipMessages+0xa6>
                {
                    if(!getRunDeviceInfoSeq())  // Ignore if a previous request is still being processed
     e22:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <runDeviceInfoSeq>
     e26:	81 11       	cpse	r24, r1
     e28:	ce cf       	rjmp	.-100    	; 0xdc6 <processValidAsipMessages+0x2c>
                    {
                        disableSensorDataTx();
     e2a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <disableSensorDataTx>
                        setCANDataRequestFlags(reqFlags | SYSTEM_DEV_INFO_REQ_BITMASK);
     e2e:	8c 2f       	mov	r24, r28
     e30:	80 62       	ori	r24, 0x20	; 32
     e32:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setCANDataRequestFlags>
                        resetConnectedSensors();
     e36:	0e 94 3b 12 	call	0x2476	; 0x2476 <resetConnectedSensors>
						sendPingAllSensors();   // Request all connected sensors to reply with serial number
     e3a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <sendPingAllSensors>
     e3e:	c3 cf       	rjmp	.-122    	; 0xdc6 <processValidAsipMessages+0x2c>
                    }
                }
                else if(Msg_ID == 0x30) // Update complete / jump to app command
     e40:	80 33       	cpi	r24, 0x30	; 48
     e42:	09 f4       	brne	.+2      	; 0xe46 <processValidAsipMessages+0xac>
     e44:	5f c0       	rjmp	.+190    	; 0xf04 <processValidAsipMessages+0x16a>
                {
                    sendCANFwUpdateComplete();
                    sendCANSensorDataEnableMsg();
                    sendFwUpdateCompleteAckMessage();
                }
                else if(Msg_ID == 0x31) // Firmware write command with address
     e46:	81 33       	cpi	r24, 0x31	; 49
     e48:	09 f4       	brne	.+2      	; 0xe4c <processValidAsipMessages+0xb2>
     e4a:	40 c0       	rjmp	.+128    	; 0xecc <processValidAsipMessages+0x132>
                        reqFlags = getCANDataRequestFlags();
                        setCANDataRequestFlags(reqFlags | FW_UPDATE_DATA_RX_BITMASK);
                        nextAddress += 250;
                    }
                }
                else if(Msg_ID == 0x32) // Start FW Update w/ Serial Number 
     e4c:	82 33       	cpi	r24, 0x32	; 50
     e4e:	09 f0       	breq	.+2      	; 0xe52 <processValidAsipMessages+0xb8>
     e50:	ba cf       	rjmp	.-140    	; 0xdc6 <processValidAsipMessages+0x2c>
                {
                    sendCANSensorDataDisableMsg(); // Disable sensor CAN traffic until the update is done
     e52:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <sendCANSensorDataDisableMsg>
                    
                    receivedAddress = 0;
                    nextAddress = 0;
     e56:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <nextAddress>
     e5a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <nextAddress+0x1>
     e5e:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <nextAddress+0x2>
     e62:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <nextAddress+0x3>

                    // Check if Serial Num  matches this module...payload is 10-byte serial num string
                    // If not, re-Tx the command via CAN
                    if(compareSerialNums(&Msg_Payload[4], (getSerialNumPtr() + 4))) // Serial Num matches this module
     e66:	0e 94 ca 1b 	call	0x3794	; 0x3794 <getSerialNumPtr>
     e6a:	bc 01       	movw	r22, r24
     e6c:	6c 5f       	subi	r22, 0xFC	; 252
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	8c e8       	ldi	r24, 0x8C	; 140
     e72:	93 e0       	ldi	r25, 0x03	; 3
     e74:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <compareSerialNums>
     e78:	88 23       	and	r24, r24
     e7a:	09 f4       	brne	.+2      	; 0xe7e <processValidAsipMessages+0xe4>
     e7c:	71 c0       	rjmp	.+226    	; 0xf60 <processValidAsipMessages+0x1c6>
                    {
                        _CLI();
     e7e:	f8 94       	cli
                        // Set eeprom flag here...
                        // jump to bootloader...
						eeprom_busy_wait();
     e80:	f9 99       	sbic	0x1f, 1	; 31
     e82:	fe cf       	rjmp	.-4      	; 0xe80 <processValidAsipMessages+0xe6>
						while(eeprom_read_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC) != 0x01)
     e84:	8a e6       	ldi	r24, 0x6A	; 106
     e86:	97 e0       	ldi	r25, 0x07	; 7
     e88:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <processValidAsipMessages+0xf8>
     e90:	40 c0       	rjmp	.+128    	; 0xf12 <processValidAsipMessages+0x178>
						{
							eeprom_busy_wait();
     e92:	f9 99       	sbic	0x1f, 1	; 31
     e94:	fe cf       	rjmp	.-4      	; 0xe92 <processValidAsipMessages+0xf8>
							eeprom_write_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC, 0x01);
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	8a e6       	ldi	r24, 0x6A	; 106
     e9a:	97 e0       	ldi	r25, 0x07	; 7
     e9c:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
							eeprom_busy_wait();
     ea0:	f9 99       	sbic	0x1f, 1	; 31
     ea2:	fe cf       	rjmp	.-4      	; 0xea0 <processValidAsipMessages+0x106>
     ea4:	ef cf       	rjmp	.-34     	; 0xe84 <processValidAsipMessages+0xea>
                break;

			case ASIP_CLASS_FLOW:
				if(Msg_ID == 0x03) // Blockage Info
				{
                    if((Msg_Length % 5) == 0)
     ea6:	60 91 88 04 	lds	r22, 0x0488	; 0x800488 <Msg_Length>
     eaa:	8d ec       	ldi	r24, 0xCD	; 205
     eac:	68 9f       	mul	r22, r24
     eae:	81 2d       	mov	r24, r1
     eb0:	11 24       	eor	r1, r1
     eb2:	86 95       	lsr	r24
     eb4:	86 95       	lsr	r24
     eb6:	98 2f       	mov	r25, r24
     eb8:	99 0f       	add	r25, r25
     eba:	99 0f       	add	r25, r25
     ebc:	89 0f       	add	r24, r25
     ebe:	68 13       	cpse	r22, r24
     ec0:	82 cf       	rjmp	.-252    	; 0xdc6 <processValidAsipMessages+0x2c>
                    {
                        fillBlockageDataBuffer(&Msg_Payload[0], Msg_Length);
     ec2:	88 e8       	ldi	r24, 0x88	; 136
     ec4:	93 e0       	ldi	r25, 0x03	; 3
     ec6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <fillBlockageDataBuffer>
     eca:	7d cf       	rjmp	.-262    	; 0xdc6 <processValidAsipMessages+0x2c>
                    sendCANSensorDataEnableMsg();
                    sendFwUpdateCompleteAckMessage();
                }
                else if(Msg_ID == 0x31) // Firmware write command with address
                {
                    setCANDataRequestFlags(reqFlags & ~(START_FW_UPDATE_RESP_BITMASK)); // Clear the start FW Update flag
     ecc:	8c 2f       	mov	r24, r28
     ece:	8b 7f       	andi	r24, 0xFB	; 251
     ed0:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setCANDataRequestFlags>
                    
                    // Make sure the address is correct
                    receivedAddress = (DWORD)Msg_Payload[0] | ((DWORD)Msg_Payload[1] << 8) | ((DWORD)Msg_Payload[2] << 16) | ((DWORD)Msg_Payload[3] << 24);
                    
                    if(receivedAddress != nextAddress)
     ed4:	40 91 88 03 	lds	r20, 0x0388	; 0x800388 <Msg_Payload>
     ed8:	50 91 89 03 	lds	r21, 0x0389	; 0x800389 <Msg_Payload+0x1>
     edc:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <Msg_Payload+0x2>
     ee0:	70 91 8b 03 	lds	r23, 0x038B	; 0x80038b <Msg_Payload+0x3>
     ee4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <nextAddress>
     ee8:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <nextAddress+0x1>
     eec:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <nextAddress+0x2>
     ef0:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <nextAddress+0x3>
     ef4:	48 17       	cp	r20, r24
     ef6:	59 07       	cpc	r21, r25
     ef8:	6a 07       	cpc	r22, r26
     efa:	7b 07       	cpc	r23, r27
     efc:	69 f0       	breq	.+26     	; 0xf18 <processValidAsipMessages+0x17e>
                    {
                        sendFwUpdatePacketNackMessage();
     efe:	0e 94 8c 06 	call	0xd18	; 0xd18 <sendFwUpdatePacketNackMessage>
     f02:	61 cf       	rjmp	.-318    	; 0xdc6 <processValidAsipMessages+0x2c>
						sendPingAllSensors();   // Request all connected sensors to reply with serial number
                    }
                }
                else if(Msg_ID == 0x30) // Update complete / jump to app command
                {
                    sendCANFwUpdateComplete();
     f04:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <sendCANFwUpdateComplete>
                    sendCANSensorDataEnableMsg();
     f08:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <sendCANSensorDataEnableMsg>
                    sendFwUpdateCompleteAckMessage();
     f0c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <sendFwUpdateCompleteAckMessage>
     f10:	5a cf       	rjmp	.-332    	; 0xdc6 <processValidAsipMessages+0x2c>
						{
							eeprom_busy_wait();
							eeprom_write_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC, 0x01);
							eeprom_busy_wait();
						}
                        jumpToBootloader();
     f12:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <jumpToBootloader>
     f16:	57 cf       	rjmp	.-338    	; 0xdc6 <processValidAsipMessages+0x2c>
     f18:	ec e8       	ldi	r30, 0x8C	; 140
     f1a:	f3 e0       	ldi	r31, 0x03	; 3
     f1c:	a6 e8       	ldi	r26, 0x86	; 134
     f1e:	b2 e0       	ldi	r27, 0x02	; 2
    BYTE i;

    for(i = 0; i < 250; i++)
    {
        // Copy the FW image data, but ignore the 4 byte address
        fwUpdateDataBuff[i] = Msg_Payload[i + 4];
     f20:	81 91       	ld	r24, Z+
     f22:	8d 93       	st	X+, r24

static void fillFwDataBuffer(void)
{
    BYTE i;

    for(i = 0; i < 250; i++)
     f24:	84 e0       	ldi	r24, 0x04	; 4
     f26:	e6 38       	cpi	r30, 0x86	; 134
     f28:	f8 07       	cpc	r31, r24
     f2a:	d1 f7       	brne	.-12     	; 0xf20 <processValidAsipMessages+0x186>
                        sendFwUpdatePacketNackMessage();
                    }
                    else
                    {
                        fillFwDataBuffer();
                        reqFlags = getCANDataRequestFlags();
     f2c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
                        setCANDataRequestFlags(reqFlags | FW_UPDATE_DATA_RX_BITMASK);
     f30:	88 60       	ori	r24, 0x08	; 8
     f32:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setCANDataRequestFlags>
                        nextAddress += 250;
     f36:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <nextAddress>
     f3a:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <nextAddress+0x1>
     f3e:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <nextAddress+0x2>
     f42:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <nextAddress+0x3>
     f46:	86 50       	subi	r24, 0x06	; 6
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	af 4f       	sbci	r26, 0xFF	; 255
     f4c:	bf 4f       	sbci	r27, 0xFF	; 255
     f4e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <nextAddress>
     f52:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <nextAddress+0x1>
     f56:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <nextAddress+0x2>
     f5a:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <nextAddress+0x3>
     f5e:	33 cf       	rjmp	.-410    	; 0xdc6 <processValidAsipMessages+0x2c>
                        jumpToBootloader();
                    }
                    else
                    {
                        // Re-Tx via CAN
                        sendCANStartFwUpdateMsg(&Msg_Payload[4]);
     f60:	8c e8       	ldi	r24, 0x8C	; 140
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <sendCANStartFwUpdateMsg>
     f68:	2e cf       	rjmp	.-420    	; 0xdc6 <processValidAsipMessages+0x2c>

00000f6a <sendBITMessage>:

    transmitAsipMessage();
}

void sendBITMessage(WORD id, BYTE severity)
{
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <sendBITMessage+0x6>
     f70:	00 d0       	rcall	.+0      	; 0xf72 <sendBITMessage+0x8>
     f72:	1f 92       	push	r1
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
    BYTE payload[5];

    payload[0] = 1;
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	29 83       	std	Y+1, r18	; 0x01
    payload[1] = (BYTE)(id & 0xFF);
     f7c:	8a 83       	std	Y+2, r24	; 0x02
    payload[2] = (BYTE)(id >> 8);
     f7e:	9b 83       	std	Y+3, r25	; 0x03
    payload[3] = severity;
     f80:	6c 83       	std	Y+4, r22	; 0x04
    payload[4] = 0; // 0 => fail
     f82:	1d 82       	std	Y+5, r1	; 0x05
    
    buildAsipTransmitMessage(0x03, 0x09, 5, &payload[0]);
     f84:	9e 01       	movw	r18, r28
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	45 e0       	ldi	r20, 0x05	; 5
     f8c:	69 e0       	ldi	r22, 0x09	; 9
     f8e:	83 e0       	ldi	r24, 0x03	; 3
     f90:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <buildAsipTransmitMessage>
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
     f94:	8c e7       	ldi	r24, 0x7C	; 124
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <sendUdpPacket>
    payload[3] = severity;
    payload[4] = 0; // 0 => fail
    
    buildAsipTransmitMessage(0x03, 0x09, 5, &payload[0]);
    transmitAsipMessage();
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <getFwDataPtr>:
}

BYTE * getFwDataPtr(void)
{
    return &fwUpdateDataBuff[0];
}
     fac:	86 e8       	ldi	r24, 0x86	; 134
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	08 95       	ret

00000fb2 <storeDeviceInfoData>:


// Collects data packets from a wired sensor and assembles 
//  them into a device info response message
void storeDeviceInfoData(BYTE * data)
{
     fb2:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <deviceInfoIndex>
     fb6:	dc 01       	movw	r26, r24
     fb8:	98 e0       	ldi	r25, 0x08	; 8
     fba:	92 0f       	add	r25, r18
    BYTE i;

    for(i = 0; i < 8; i++)
    {
        deviceInfoForwardingBuff[deviceInfoIndex] = *(data++);
     fbc:	8d 91       	ld	r24, X+
     fbe:	e2 2f       	mov	r30, r18
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	ee 5d       	subi	r30, 0xDE	; 222
     fc4:	fd 4f       	sbci	r31, 0xFD	; 253
     fc6:	80 83       	st	Z, r24
     fc8:	2f 5f       	subi	r18, 0xFF	; 255
//  them into a device info response message
void storeDeviceInfoData(BYTE * data)
{
    BYTE i;

    for(i = 0; i < 8; i++)
     fca:	29 13       	cpse	r18, r25
     fcc:	f7 cf       	rjmp	.-18     	; 0xfbc <storeDeviceInfoData+0xa>
     fce:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <deviceInfoIndex>
    {
        deviceInfoForwardingBuff[deviceInfoIndex] = *(data++);
        deviceInfoIndex++;
    }

    if(deviceInfoIndex >= 74)
     fd2:	2a 34       	cpi	r18, 0x4A	; 74
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <storeDeviceInfoData+0x26>
     fd6:	08 95       	ret
    {
        deviceInfoIndex = 0;
     fd8:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <deviceInfoIndex>
        i = getCANDataRequestFlags();
     fdc:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
        setCANDataRequestFlags(i | DEV_INFO_READY_BITMASK);
     fe0:	80 61       	ori	r24, 0x10	; 16
     fe2:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <setCANDataRequestFlags>

00000fe6 <getRunDeviceInfoSeq>:
}

BYTE getRunDeviceInfoSeq(void)
{
    return runDeviceInfoSeq;
}
     fe6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <runDeviceInfoSeq>
     fea:	08 95       	ret

00000fec <setRunDeviceInfoSeq>:

void setRunDeviceInfoSeq(void)
{
    runDeviceInfoSeq = 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <runDeviceInfoSeq>
     ff2:	08 95       	ret

00000ff4 <clearRunDeviceInfoSeq>:
}

void clearRunDeviceInfoSeq(void)
{
    runDeviceInfoSeq = 0;
     ff4:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <runDeviceInfoSeq>
     ff8:	08 95       	ret

00000ffa <getCalStatusAckReceivedFlag>:
}

BYTE getCalStatusAckReceivedFlag(void)
{
    return calStatusDataAckReceived;
}
     ffa:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <calStatusDataAckReceived>
     ffe:	08 95       	ret

00001000 <clearCalStatusAckReceivedFlag>:

void clearCalStatusAckReceivedFlag(void)
{
    calStatusDataAckReceived = 0;
    1000:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <calStatusDataAckReceived>
    1004:	08 95       	ret

00001006 <transmitDeviceInfoASIP>:
}

void transmitDeviceInfoASIP(void)
{
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	1f 92       	push	r1
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    BYTE sensorCount = 0;
    1010:	19 82       	std	Y+1, r1	; 0x01
	
	buildAsipTransmitMessage(0x00, 0x01, 74, deviceInfoForwardingBuff);
    1012:	22 e2       	ldi	r18, 0x22	; 34
    1014:	32 e0       	ldi	r19, 0x02	; 2
    1016:	4a e4       	ldi	r20, 0x4A	; 74
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <buildAsipTransmitMessage>
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
    1020:	8c e7       	ldi	r24, 0x7C	; 124
    1022:	92 e0       	ldi	r25, 0x02	; 2
    1024:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <sendUdpPacket>
{
    BYTE sensorCount = 0;
	
	buildAsipTransmitMessage(0x00, 0x01, 74, deviceInfoForwardingBuff);
	transmitAsipMessage();
	sensorCount = getConnectedSensorCount() + 1; // Get wired sensor count and add one for the wireless
    1028:	0e 94 81 12 	call	0x2502	; 0x2502 <getConnectedSensorCount>
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	89 83       	std	Y+1, r24	; 0x01
	buildAsipTransmitMessage(0x0A, 0x02, 1, &sensorCount);
    1030:	9e 01       	movw	r18, r28
    1032:	2f 5f       	subi	r18, 0xFF	; 255
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
    1036:	41 e0       	ldi	r20, 0x01	; 1
    1038:	62 e0       	ldi	r22, 0x02	; 2
    103a:	8a e0       	ldi	r24, 0x0A	; 10
    103c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <buildAsipTransmitMessage>
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
    1040:	8c e7       	ldi	r24, 0x7C	; 124
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <sendUdpPacket>
	buildAsipTransmitMessage(0x00, 0x01, 74, deviceInfoForwardingBuff);
	transmitAsipMessage();
	sensorCount = getConnectedSensorCount() + 1; // Get wired sensor count and add one for the wireless
	buildAsipTransmitMessage(0x0A, 0x02, 1, &sensorCount);
	transmitAsipMessage();
}
    1048:	0f 90       	pop	r0
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <sendDeviceInfo>:
    buildAsipTransmitMessage(0x03, 0x09, 5, &payload[0]);
    transmitAsipMessage();
}

void sendDeviceInfo(void)
{
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    BYTE i;
    BYTE * tempPtr;

    tempPtr = getSerialNumPtr();
    1054:	0e 94 ca 1b 	call	0x3794	; 0x3794 <getSerialNumPtr>
    1058:	a2 e2       	ldi	r26, 0x22	; 34
    105a:	b2 e0       	ldi	r27, 0x02	; 2
    105c:	2c e6       	ldi	r18, 0x6C	; 108
    105e:	32 e0       	ldi	r19, 0x02	; 2
    1060:	fd 01       	movw	r30, r26

    for(i = 0; i < 74; i++)
    {
        deviceInfoForwardingBuff[i] = 0;
    1062:	11 92       	st	Z+, r1
    BYTE i;
    BYTE * tempPtr;

    tempPtr = getSerialNumPtr();

    for(i = 0; i < 74; i++)
    1064:	2e 17       	cp	r18, r30
    1066:	3f 07       	cpc	r19, r31
    1068:	e1 f7       	brne	.-8      	; 0x1062 <sendDeviceInfo+0x12>
    106a:	fc 01       	movw	r30, r24
    106c:	cc e2       	ldi	r28, 0x2C	; 44
    106e:	d2 e0       	ldi	r29, 0x02	; 2
    }

    // Build payload
    for(i = 0; i < 10; i++)
    {
        deviceInfoForwardingBuff[i] = *tempPtr++;
    1070:	81 91       	ld	r24, Z+
    1072:	8d 93       	st	X+, r24
    {
        deviceInfoForwardingBuff[i] = 0;
    }

    // Build payload
    for(i = 0; i < 10; i++)
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	ac 32       	cpi	r26, 0x2C	; 44
    1078:	b8 07       	cpc	r27, r24
    107a:	d1 f7       	brne	.-12     	; 0x1070 <sendDeviceInfo+0x20>
    {
        deviceInfoForwardingBuff[i] = *tempPtr++;
    }

    tempPtr = (BYTE *)getFwVersionPtr();
    107c:	0e 94 cd 1b 	call	0x379a	; 0x379a <getFwVersionPtr>
    1080:	fc 01       	movw	r30, r24
    1082:	2c e3       	ldi	r18, 0x3C	; 60
    1084:	32 e0       	ldi	r19, 0x02	; 2

    for(i = 10; i < 26; i++)
    {
        deviceInfoForwardingBuff[i] = *tempPtr++;
    1086:	81 91       	ld	r24, Z+
    1088:	89 93       	st	Y+, r24
        deviceInfoForwardingBuff[i] = *tempPtr++;
    }

    tempPtr = (BYTE *)getFwVersionPtr();

    for(i = 10; i < 26; i++)
    108a:	2c 17       	cp	r18, r28
    108c:	3d 07       	cpc	r19, r29
    108e:	d9 f7       	brne	.-10     	; 0x1086 <sendDeviceInfo+0x36>
    {
        deviceInfoForwardingBuff[i] = *tempPtr++;
    }

    readFwPartNum(&deviceInfoForwardingBuff[26]);
    1090:	8c e3       	ldi	r24, 0x3C	; 60
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <readFwPartNum>

    readHwVersion(&deviceInfoForwardingBuff[42]);
    1098:	8c e4       	ldi	r24, 0x4C	; 76
    109a:	92 e0       	ldi	r25, 0x02	; 2
    109c:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <readHwVersion>
    readHwPartNum(&deviceInfoForwardingBuff[58]);
    10a0:	8c e5       	ldi	r24, 0x5C	; 92
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	0e 94 37 1a 	call	0x346e	; 0x346e <readHwPartNum>
    
	transmitDeviceInfoASIP();

}
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    readFwPartNum(&deviceInfoForwardingBuff[26]);

    readHwVersion(&deviceInfoForwardingBuff[42]);
    readHwPartNum(&deviceInfoForwardingBuff[58]);
    
	transmitDeviceInfoASIP();
    10ac:	0c 94 03 08 	jmp	0x1006	; 0x1006 <transmitDeviceInfoASIP>

000010b0 <transmitCalStatusInfoASIP>:
}

// Configures the calibration results ASIP message and copies 
//  the data into the WiFi transmit buffer.
void transmitCalStatusInfoASIP(BYTE sensorCount, BYTE* dataBuffer)
{
    10b0:	9b 01       	movw	r18, r22
    BYTE totalLength;
    
    totalLength = (sensorCount * 7) + 1;
    *dataBuffer = sensorCount; // Set payload field of sensor count
    10b2:	fb 01       	movw	r30, r22
    10b4:	80 83       	st	Z, r24
    buildAsipTransmitMessage(ASIP_CLASS_FIELD_CAL, 0x0B, totalLength, dataBuffer);
    10b6:	48 2f       	mov	r20, r24
    10b8:	44 0f       	add	r20, r20
    10ba:	44 0f       	add	r20, r20
    10bc:	44 0f       	add	r20, r20
    10be:	48 1b       	sub	r20, r24
    10c0:	4f 5f       	subi	r20, 0xFF	; 255
    10c2:	6b e0       	ldi	r22, 0x0B	; 11
    10c4:	88 e0       	ldi	r24, 0x08	; 8
    10c6:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <buildAsipTransmitMessage>
/*********************************************************************
 Transmits the ASIP message previously built with buildAsipTransmitMessage
 *********************************************************************/
void transmitAsipMessage(void)
{
	sendUdpPacket(&outgoingMsg);
    10ca:	8c e7       	ldi	r24, 0x7C	; 124
    10cc:	92 e0       	ldi	r25, 0x02	; 2
    10ce:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <sendUdpPacket>

000010d2 <resetDeviceInfoBuffer>:
//  in the event of an abort/timeout situation
void resetDeviceInfoBuffer(void)
{
	BYTE flags = 0;
	
	deviceInfoIndex = 0;
    10d2:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <deviceInfoIndex>
    flags = getCANDataRequestFlags();
    10d6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
	
	if(!(flags & SYSTEM_DEV_INFO_REQ_BITMASK))
    10da:	85 fd       	sbrc	r24, 5
    10dc:	08 95       	ret
	{
		// Only do this if the wireless sensor's device info has been sent
		setCANDataRequestFlags(flags | DEV_INFO_READY_BITMASK);	
    10de:	80 61       	ori	r24, 0x10	; 16
    10e0:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <setCANDataRequestFlags>

000010e4 <initBitMonitor>:
static BYTE systemErrorState;
static BYTE lastActiveBIT = 0xFF;

void initBitMonitor(void)
{
    systemErrorState = ERROR_STATE_NORMAL;
    10e4:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <systemErrorState>
    10e8:	08 95       	ret

000010ea <stepBitMonitorStateMachine>:
}

void stepBitMonitorStateMachine(void)
{
    switch(systemErrorState)
    10ea:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <systemErrorState>
    10ee:	81 11       	cpse	r24, r1
    10f0:	08 95       	ret
    {
        case ERROR_STATE_NORMAL:
            if((!getCANTrafficDetected()) && (get30SecStartupTimer()) && (getHwConfig() == HW_TYPE_WIRED))
    10f2:	0e 94 38 12 	call	0x2470	; 0x2470 <getCANTrafficDetected>
    10f6:	81 11       	cpse	r24, r1
    10f8:	08 c0       	rjmp	.+16     	; 0x110a <__stack+0xb>
    10fa:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <get30SecStartupTimer>
    10fe:	88 23       	and	r24, r24
    1100:	21 f0       	breq	.+8      	; 0x110a <__stack+0xb>
    1102:	0e 94 c7 1b 	call	0x378e	; 0x378e <getHwConfig>
    1106:	88 23       	and	r24, r24
    1108:	59 f0       	breq	.+22     	; 0x1120 <__stack+0x21>
            {
                sendCANBitResultsMsg(0x01);
                systemErrorState = ERROR_STATE_NO_CAN;
            }
            else if(getSensorOORFlag())
    110a:	0e 94 5f 0a 	call	0x14be	; 0x14be <getSensorOORFlag>
    110e:	88 23       	and	r24, r24
    1110:	79 f3       	breq	.-34     	; 0x10f0 <stepBitMonitorStateMachine+0x6>
            {
                sendCANBitResultsMsg(0x02);
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <sendCANBitResultsMsg>
                systemErrorState = ERROR_STATE_SENSOR_OOR;
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <systemErrorState>
    111e:	08 95       	ret
    switch(systemErrorState)
    {
        case ERROR_STATE_NORMAL:
            if((!getCANTrafficDetected()) && (get30SecStartupTimer()) && (getHwConfig() == HW_TYPE_WIRED))
            {
                sendCANBitResultsMsg(0x01);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <sendCANBitResultsMsg>
                systemErrorState = ERROR_STATE_NO_CAN;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <systemErrorState>
    112c:	08 95       	ret

0000112e <getActiveSystemError>:
    }
}

BYTE getActiveSystemError(void)
{
    return (systemErrorState == ERROR_STATE_NORMAL)?0:1;     
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <systemErrorState>
    1134:	91 11       	cpse	r25, r1
    1136:	01 c0       	rjmp	.+2      	; 0x113a <getActiveSystemError+0xc>
    1138:	80 e0       	ldi	r24, 0x00	; 0
}
    113a:	08 95       	ret

0000113c <setLastActiveBIT>:

void setLastActiveBIT(BYTE val)
{
    lastActiveBIT = val;
    113c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lastActiveBIT>
    1140:	08 95       	ret

00001142 <getLastActiveBIT>:
}

BYTE getLastActiveBIT(void)
{
    return lastActiveBIT;
    1142:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lastActiveBIT>
    1146:	08 95       	ret

00001148 <initBlockageProcessor>:


BYTE getNoMagDetectionDone(void)
{
    return noMagDetectionDone;
}
    1148:	e8 e9       	ldi	r30, 0x98	; 152
    114a:	f4 e0       	ldi	r31, 0x04	; 4
    114c:	10 82       	st	Z, r1
    114e:	11 82       	std	Z+1, r1	; 0x01
    1150:	12 82       	std	Z+2, r1	; 0x02
    1152:	13 82       	std	Z+3, r1	; 0x03
    1154:	8f e0       	ldi	r24, 0x0F	; 15
    1156:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <noMagnetRowMask>
    115a:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <sensorOORFlag>
    115e:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <flowDetectedFlag>
    1162:	e9 ec       	ldi	r30, 0xC9	; 201
    1164:	f7 e0       	ldi	r31, 0x07	; 7
    1166:	10 82       	st	Z, r1
    1168:	11 82       	std	Z+1, r1	; 0x01
    116a:	12 82       	std	Z+2, r1	; 0x02
    116c:	13 82       	std	Z+3, r1	; 0x03
    116e:	08 95       	ret

00001170 <readCalValues>:
    1170:	af 92       	push	r10
    1172:	bf 92       	push	r11
    1174:	cf 92       	push	r12
    1176:	df 92       	push	r13
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	80 e4       	ldi	r24, 0x40	; 64
    1186:	c8 2e       	mov	r12, r24
    1188:	87 e0       	ldi	r24, 0x07	; 7
    118a:	d8 2e       	mov	r13, r24
    118c:	86 01       	movw	r16, r12
    118e:	00 54       	subi	r16, 0x40	; 64
    1190:	17 40       	sbci	r17, 0x07	; 7
    1192:	c8 01       	movw	r24, r16
    1194:	8f 56       	subi	r24, 0x6F	; 111
    1196:	98 4f       	sbci	r25, 0xF8	; 248
    1198:	7c 01       	movw	r14, r24
    119a:	e6 01       	movw	r28, r12
    119c:	2e 97       	sbiw	r28, 0x0e	; 14
    119e:	03 53       	subi	r16, 0x33	; 51
    11a0:	18 4f       	sbci	r17, 0xF8	; 248
    11a2:	f9 99       	sbic	0x1f, 1	; 31
    11a4:	fe cf       	rjmp	.-4      	; 0x11a2 <readCalValues+0x32>
    11a6:	ce 01       	movw	r24, r28
    11a8:	cc 96       	adiw	r24, 0x3c	; 60
    11aa:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    11ae:	a8 2e       	mov	r10, r24
    11b0:	b1 2c       	mov	r11, r1
    11b2:	f9 99       	sbic	0x1f, 1	; 31
    11b4:	fe cf       	rjmp	.-4      	; 0x11b2 <readCalValues+0x42>
    11b6:	ce 01       	movw	r24, r28
    11b8:	cd 96       	adiw	r24, 0x3d	; 61
    11ba:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    11be:	95 01       	movw	r18, r10
    11c0:	38 2b       	or	r19, r24
    11c2:	c9 01       	movw	r24, r18
    11c4:	8f 3f       	cpi	r24, 0xFF	; 255
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	93 07       	cpc	r25, r19
    11ca:	b9 f1       	breq	.+110    	; 0x123a <readCalValues+0xca>
    11cc:	f8 01       	movw	r30, r16
    11ce:	81 93       	st	Z+, r24
    11d0:	91 93       	st	Z+, r25
    11d2:	8f 01       	movw	r16, r30
    11d4:	f9 99       	sbic	0x1f, 1	; 31
    11d6:	fe cf       	rjmp	.-4      	; 0x11d4 <readCalValues+0x64>
    11d8:	ce 01       	movw	r24, r28
    11da:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    11de:	a8 2e       	mov	r10, r24
    11e0:	b1 2c       	mov	r11, r1
    11e2:	f9 99       	sbic	0x1f, 1	; 31
    11e4:	fe cf       	rjmp	.-4      	; 0x11e2 <readCalValues+0x72>
    11e6:	ce 01       	movw	r24, r28
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    11ee:	95 01       	movw	r18, r10
    11f0:	38 2b       	or	r19, r24
    11f2:	c9 01       	movw	r24, r18
    11f4:	8f 3f       	cpi	r24, 0xFF	; 255
    11f6:	3f ef       	ldi	r19, 0xFF	; 255
    11f8:	93 07       	cpc	r25, r19
    11fa:	e1 f0       	breq	.+56     	; 0x1234 <readCalValues+0xc4>
    11fc:	f7 01       	movw	r30, r14
    11fe:	81 93       	st	Z+, r24
    1200:	91 93       	st	Z+, r25
    1202:	7f 01       	movw	r14, r30
    1204:	22 96       	adiw	r28, 0x02	; 2
    1206:	cc 16       	cp	r12, r28
    1208:	dd 06       	cpc	r13, r29
    120a:	59 f6       	brne	.-106    	; 0x11a2 <readCalValues+0x32>
    120c:	fe e0       	ldi	r31, 0x0E	; 14
    120e:	cf 0e       	add	r12, r31
    1210:	d1 1c       	adc	r13, r1
    1212:	28 e7       	ldi	r18, 0x78	; 120
    1214:	c2 16       	cp	r12, r18
    1216:	27 e0       	ldi	r18, 0x07	; 7
    1218:	d2 06       	cpc	r13, r18
    121a:	09 f0       	breq	.+2      	; 0x121e <readCalValues+0xae>
    121c:	b7 cf       	rjmp	.-146    	; 0x118c <readCalValues+0x1c>
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	08 95       	ret
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	e1 cf       	rjmp	.-62     	; 0x11fc <readCalValues+0x8c>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	92 e0       	ldi	r25, 0x02	; 2
    123e:	c6 cf       	rjmp	.-116    	; 0x11cc <readCalValues+0x5c>

00001240 <applyCalibrationToData>:
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <getAveragedADCDataPtr>
    1248:	fc 01       	movw	r30, r24
    124a:	61 e9       	ldi	r22, 0x91	; 145
    124c:	77 e0       	ldi	r23, 0x07	; 7
    124e:	c9 ec       	ldi	r28, 0xC9	; 201
    1250:	d7 e0       	ldi	r29, 0x07	; 7
    1252:	af 01       	movw	r20, r30
    1254:	42 5f       	subi	r20, 0xF2	; 242
    1256:	5f 4f       	sbci	r21, 0xFF	; 255
    1258:	db 01       	movw	r26, r22
    125a:	05 c0       	rjmp	.+10     	; 0x1266 <applyCalibrationToData+0x26>
    125c:	21 93       	st	Z+, r18
    125e:	31 93       	st	Z+, r19
    1260:	4e 17       	cp	r20, r30
    1262:	5f 07       	cpc	r21, r31
    1264:	81 f0       	breq	.+32     	; 0x1286 <applyCalibrationToData+0x46>
    1266:	20 81       	ld	r18, Z
    1268:	31 81       	ldd	r19, Z+1	; 0x01
    126a:	8d 91       	ld	r24, X+
    126c:	9d 91       	ld	r25, X+
    126e:	28 1b       	sub	r18, r24
    1270:	39 0b       	sbc	r19, r25
    1272:	37 ff       	sbrs	r19, 7
    1274:	f3 cf       	rjmp	.-26     	; 0x125c <applyCalibrationToData+0x1c>
    1276:	31 95       	neg	r19
    1278:	21 95       	neg	r18
    127a:	31 09       	sbc	r19, r1
    127c:	21 93       	st	Z+, r18
    127e:	31 93       	st	Z+, r19
    1280:	4e 17       	cp	r20, r30
    1282:	5f 07       	cpc	r21, r31
    1284:	81 f7       	brne	.-32     	; 0x1266 <applyCalibrationToData+0x26>
    1286:	62 5f       	subi	r22, 0xF2	; 242
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	fa 01       	movw	r30, r20
    128c:	c6 17       	cp	r28, r22
    128e:	d7 07       	cpc	r29, r23
    1290:	01 f7       	brne	.-64     	; 0x1252 <applyCalibrationToData+0x12>
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <getMaxSensorDataIndex>:
    1298:	cf 93       	push	r28
    129a:	c8 2f       	mov	r28, r24
    129c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <getAveragedADCDataPtr>
    12a0:	fc 01       	movw	r30, r24
    12a2:	2e e0       	ldi	r18, 0x0E	; 14
    12a4:	c2 9f       	mul	r28, r18
    12a6:	e0 0d       	add	r30, r0
    12a8:	f1 1d       	adc	r31, r1
    12aa:	11 24       	eor	r1, r1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	21 91       	ld	r18, Z+
    12b6:	31 91       	ld	r19, Z+
    12b8:	42 17       	cp	r20, r18
    12ba:	53 07       	cpc	r21, r19
    12bc:	10 f4       	brcc	.+4      	; 0x12c2 <getMaxSensorDataIndex+0x2a>
    12be:	89 2f       	mov	r24, r25
    12c0:	a9 01       	movw	r20, r18
    12c2:	9f 5f       	subi	r25, 0xFF	; 255
    12c4:	97 30       	cpi	r25, 0x07	; 7
    12c6:	b1 f7       	brne	.-20     	; 0x12b4 <getMaxSensorDataIndex+0x1c>
    12c8:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <runNoMagnetDetection>
    12cc:	99 23       	and	r25, r25
    12ce:	59 f1       	breq	.+86     	; 0x1326 <getMaxSensorDataIndex+0x8e>
    12d0:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <noMagnetRowMask>
    12d4:	6c 2f       	mov	r22, r28
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	e2 2f       	mov	r30, r18
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	0c 2e       	mov	r0, r28
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <getMaxSensorDataIndex+0x4c>
    12e0:	f5 95       	asr	r31
    12e2:	e7 95       	ror	r30
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <getMaxSensorDataIndex+0x48>
    12e8:	e0 fd       	sbrc	r30, 0
    12ea:	3f c0       	rjmp	.+126    	; 0x136a <getMaxSensorDataIndex+0xd2>
    12ec:	fb 01       	movw	r30, r22
    12ee:	e1 57       	subi	r30, 0x71	; 113
    12f0:	fb 4f       	sbci	r31, 0xFB	; 251
    12f2:	10 82       	st	Z, r1
    12f4:	21 11       	cpse	r18, r1
    12f6:	24 c0       	rjmp	.+72     	; 0x1340 <getMaxSensorDataIndex+0xa8>
    12f8:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <runNoMagnetDetection>
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <noMagDetectionDone>
    1302:	4e 31       	cpi	r20, 0x1E	; 30
    1304:	51 05       	cpc	r21, r1
    1306:	08 f0       	brcs	.+2      	; 0x130a <getMaxSensorDataIndex+0x72>
    1308:	85 c0       	rjmp	.+266    	; 0x1414 <getMaxSensorDataIndex+0x17c>
    130a:	fb 01       	movw	r30, r22
    130c:	e7 53       	subi	r30, 0x37	; 55
    130e:	f8 4f       	sbci	r31, 0xF8	; 248
    1310:	80 81       	ld	r24, Z
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	80 83       	st	Z, r24
    1316:	8d 30       	cpi	r24, 0x0D	; 13
    1318:	08 f4       	brcc	.+2      	; 0x131c <getMaxSensorDataIndex+0x84>
    131a:	76 c0       	rjmp	.+236    	; 0x1408 <getMaxSensorDataIndex+0x170>
    131c:	8c e0       	ldi	r24, 0x0C	; 12
    131e:	80 83       	st	Z, r24
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret
    1326:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <noMagDetectionDone>
    132a:	99 23       	and	r25, r25
    132c:	c9 f1       	breq	.+114    	; 0x13a0 <getMaxSensorDataIndex+0x108>
    132e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <noMagPersistenceRow.2492>
    1332:	c9 17       	cp	r28, r25
    1334:	09 f4       	brne	.+2      	; 0x1338 <getMaxSensorDataIndex+0xa0>
    1336:	74 c0       	rjmp	.+232    	; 0x1420 <getMaxSensorDataIndex+0x188>
    1338:	6c 2f       	mov	r22, r28
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <noMagnetRowMask>
    1340:	4e 31       	cpi	r20, 0x1E	; 30
    1342:	51 05       	cpc	r21, r1
    1344:	08 f0       	brcs	.+2      	; 0x1348 <getMaxSensorDataIndex+0xb0>
    1346:	4e c0       	rjmp	.+156    	; 0x13e4 <getMaxSensorDataIndex+0x14c>
    1348:	82 2f       	mov	r24, r18
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	06 2e       	mov	r0, r22
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <getMaxSensorDataIndex+0xbc>
    1350:	95 95       	asr	r25
    1352:	87 95       	ror	r24
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <getMaxSensorDataIndex+0xb8>
    1358:	80 ff       	sbrs	r24, 0
    135a:	d7 cf       	rjmp	.-82     	; 0x130a <getMaxSensorDataIndex+0x72>
    135c:	fb 01       	movw	r30, r22
    135e:	e7 53       	subi	r30, 0x37	; 55
    1360:	f8 4f       	sbci	r31, 0xF8	; 248
    1362:	10 82       	st	Z, r1
    1364:	8f ef       	ldi	r24, 0xFF	; 255
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret
    136a:	48 33       	cpi	r20, 0x38	; 56
    136c:	51 05       	cpc	r21, r1
    136e:	08 f4       	brcc	.+2      	; 0x1372 <getMaxSensorDataIndex+0xda>
    1370:	bd cf       	rjmp	.-134    	; 0x12ec <getMaxSensorDataIndex+0x54>
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	08 f4       	brcc	.+2      	; 0x1378 <getMaxSensorDataIndex+0xe0>
    1376:	ba cf       	rjmp	.-140    	; 0x12ec <getMaxSensorDataIndex+0x54>
    1378:	fb 01       	movw	r30, r22
    137a:	e1 57       	subi	r30, 0x71	; 113
    137c:	fb 4f       	sbci	r31, 0xFB	; 251
    137e:	90 81       	ld	r25, Z
    1380:	9f 5f       	subi	r25, 0xFF	; 255
    1382:	90 83       	st	Z, r25
    1384:	93 30       	cpi	r25, 0x03	; 3
    1386:	08 f4       	brcc	.+2      	; 0x138a <getMaxSensorDataIndex+0xf2>
    1388:	b5 cf       	rjmp	.-150    	; 0x12f4 <getMaxSensorDataIndex+0x5c>
    138a:	e1 e0       	ldi	r30, 0x01	; 1
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <getMaxSensorDataIndex+0xfa>
    1390:	ee 0f       	add	r30, r30
    1392:	ca 95       	dec	r28
    1394:	ea f7       	brpl	.-6      	; 0x1390 <getMaxSensorDataIndex+0xf8>
    1396:	e0 95       	com	r30
    1398:	2e 23       	and	r18, r30
    139a:	20 93 97 04 	sts	0x0497, r18	; 0x800497 <noMagnetRowMask>
    139e:	aa cf       	rjmp	.-172    	; 0x12f4 <getMaxSensorDataIndex+0x5c>
    13a0:	48 33       	cpi	r20, 0x38	; 56
    13a2:	51 05       	cpc	r21, r1
    13a4:	20 f2       	brcs	.-120    	; 0x132e <getMaxSensorDataIndex+0x96>
    13a6:	82 30       	cpi	r24, 0x02	; 2
    13a8:	10 f2       	brcs	.-124    	; 0x132e <getMaxSensorDataIndex+0x96>
    13aa:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <noMagPersistenceRow.2492>
    13ae:	9f 3f       	cpi	r25, 0xFF	; 255
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <getMaxSensorDataIndex+0x11c>
    13b2:	3f c0       	rjmp	.+126    	; 0x1432 <getMaxSensorDataIndex+0x19a>
    13b4:	c9 17       	cp	r28, r25
    13b6:	b9 f1       	breq	.+110    	; 0x1426 <getMaxSensorDataIndex+0x18e>
    13b8:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <noMagPeristence.2491>
    13bc:	94 30       	cpi	r25, 0x04	; 4
    13be:	28 f0       	brcs	.+10     	; 0x13ca <getMaxSensorDataIndex+0x132>
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <runNoMagnetDetection>
    13c6:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <flowDetectedFlag>
    13ca:	6c 2f       	mov	r22, r28
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <noMagnetRowMask>
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <getMaxSensorDataIndex+0x142>
    13d6:	35 95       	asr	r19
    13d8:	27 95       	ror	r18
    13da:	ca 95       	dec	r28
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <getMaxSensorDataIndex+0x13e>
    13de:	21 70       	andi	r18, 0x01	; 1
    13e0:	33 27       	eor	r19, r19
    13e2:	09 c0       	rjmp	.+18     	; 0x13f6 <getMaxSensorDataIndex+0x15e>
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	06 2e       	mov	r0, r22
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <getMaxSensorDataIndex+0x156>
    13ea:	35 95       	asr	r19
    13ec:	27 95       	ror	r18
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <getMaxSensorDataIndex+0x152>
    13f2:	21 70       	andi	r18, 0x01	; 1
    13f4:	33 27       	eor	r19, r19
    13f6:	fb 01       	movw	r30, r22
    13f8:	e7 53       	subi	r30, 0x37	; 55
    13fa:	f8 4f       	sbci	r31, 0xF8	; 248
    13fc:	10 82       	st	Z, r1
    13fe:	23 2b       	or	r18, r19
    1400:	09 f0       	breq	.+2      	; 0x1404 <getMaxSensorDataIndex+0x16c>
    1402:	b0 cf       	rjmp	.-160    	; 0x1364 <getMaxSensorDataIndex+0xcc>
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret
    1408:	fb 01       	movw	r30, r22
    140a:	e8 56       	subi	r30, 0x68	; 104
    140c:	fb 4f       	sbci	r31, 0xFB	; 251
    140e:	80 81       	ld	r24, Z
    1410:	cf 91       	pop	r28
    1412:	08 95       	ret
    1414:	fb 01       	movw	r30, r22
    1416:	e7 53       	subi	r30, 0x37	; 55
    1418:	f8 4f       	sbci	r31, 0xF8	; 248
    141a:	10 82       	st	Z, r1
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret
    1420:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <noMagPeristence.2491>
    1424:	89 cf       	rjmp	.-238    	; 0x1338 <getMaxSensorDataIndex+0xa0>
    1426:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <noMagPeristence.2491>
    142a:	9f 5f       	subi	r25, 0xFF	; 255
    142c:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <noMagPeristence.2491>
    1430:	c5 cf       	rjmp	.-118    	; 0x13bc <getMaxSensorDataIndex+0x124>
    1432:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <noMagPersistenceRow.2492>
    1436:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <noMagPeristence.2491>
    143a:	9f 5f       	subi	r25, 0xFF	; 255
    143c:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <noMagPeristence.2491>
    1440:	bd cf       	rjmp	.-134    	; 0x13bc <getMaxSensorDataIndex+0x124>

00001442 <processBlockageData>:
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	0e 94 4c 09 	call	0x1298	; 0x1298 <getMaxSensorDataIndex>
    1448:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <rowLevel>
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	0e 94 4c 09 	call	0x1298	; 0x1298 <getMaxSensorDataIndex>
    1452:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <rowLevel+0x1>
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	0e 94 4c 09 	call	0x1298	; 0x1298 <getMaxSensorDataIndex>
    145c:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <rowLevel+0x2>
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	0e 94 4c 09 	call	0x1298	; 0x1298 <getMaxSensorDataIndex>
    1466:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <rowLevel+0x3>
    146a:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <enableDebugSensorData>
    146e:	88 23       	and	r24, r24
    1470:	11 f1       	breq	.+68     	; 0x14b6 <processBlockageData+0x74>
    1472:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <getAveragedADCDataPtr>
    1476:	0e 94 ef 0a 	call	0x15de	; 0x15de <sendCANRawADC>
    147a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <getAveragedADCDataPtr>
    147e:	08 96       	adiw	r24, 0x08	; 8
    1480:	0e 94 3a 0b 	call	0x1674	; 0x1674 <sendCANRawADC2>
    1484:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <getAveragedADCDataPtr>
    1488:	40 96       	adiw	r24, 0x10	; 16
    148a:	0e 94 85 0b 	call	0x170a	; 0x170a <sendCANRawADC3>
    148e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <getAveragedADCDataPtr>
    1492:	48 96       	adiw	r24, 0x18	; 24
    1494:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <sendCANRawADC4>
    1498:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <getAveragedADCDataPtr>
    149c:	80 96       	adiw	r24, 0x20	; 32
    149e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <sendCANRawADC5>
    14a2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <getAveragedADCDataPtr>
    14a6:	88 96       	adiw	r24, 0x28	; 40
    14a8:	0e 94 66 0c 	call	0x18cc	; 0x18cc <sendCANRawADC6>
    14ac:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <getAveragedADCDataPtr>
    14b0:	c0 96       	adiw	r24, 0x30	; 48
    14b2:	0e 94 b1 0c 	call	0x1962	; 0x1962 <sendCANRawADC7>
    14b6:	88 e9       	ldi	r24, 0x98	; 152
    14b8:	94 e0       	ldi	r25, 0x04	; 4
    14ba:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <sendASIPSensorDataMsg>

000014be <getSensorOORFlag>:
    14be:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <sensorOORFlag>
    14c2:	08 95       	ret

000014c4 <getNoMagnetRowMask>:
    14c4:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <noMagnetRowMask>
    14c8:	08 95       	ret

000014ca <getFlowDetectedFlag>:
// Returns the flag indicating whether liquid flow 
//  has been detected since power-up
BYTE getFlowDetectedFlag(void)
{
    return flowDetectedFlag;
}
    14ca:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <flowDetectedFlag>
    14ce:	08 95       	ret

000014d0 <setSensorDataDisableFlag>:

void setSensorDataDisableFlag(void)
{
    14d0:	08 95       	ret

000014d2 <clearSensorDataDisableFlag>:
    sensorDataDisableFlag = 1;
}

void clearSensorDataDisableFlag(void)
{
    14d2:	08 95       	ret

000014d4 <setEnableDebugFlag>:
    sensorDataDisableFlag = 0;
}

void setEnableDebugFlag(void)
{
    enableDebugSensorData = 1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <enableDebugSensorData>
    14da:	08 95       	ret

000014dc <clearEnableDebugFlag>:
}

void clearEnableDebugFlag(void)
{
    enableDebugSensorData = 0;
    14dc:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <enableDebugSensorData>
    14e0:	08 95       	ret

000014e2 <initCAN>:
}

BYTE * getActiveBlockageStartTimes(void)
{
    return activeBlockageStartTimes;
}
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    14e8:	8d e7       	ldi	r24, 0x7D	; 125
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 42 13 	call	0x2684	; 0x2684 <can_init>
    14f0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
    14f4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f00e5>
    14f8:	84 e2       	ldi	r24, 0x24	; 36
    14fa:	96 e0       	ldi	r25, 0x06	; 6
    14fc:	90 93 3f 06 	sts	0x063F, r25	; 0x80063f <scPeriodicCANTx+0x8>
    1500:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <scPeriodicCANTx+0x7>
    1504:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <scPeriodicCANTx+0x9>
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <scPeriodicCANTx+0x1>
    150e:	96 e0       	ldi	r25, 0x06	; 6
    1510:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <scPeriodicCANTx+0x6>
    1514:	2c e1       	ldi	r18, 0x1C	; 28
    1516:	36 e0       	ldi	r19, 0x06	; 6
    1518:	30 93 34 06 	sts	0x0634, r19	; 0x800634 <scRandomCANTx+0x8>
    151c:	20 93 33 06 	sts	0x0633, r18	; 0x800633 <scRandomCANTx+0x7>
    1520:	10 92 35 06 	sts	0x0635, r1	; 0x800635 <scRandomCANTx+0x9>
    1524:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <scRandomCANTx+0x1>
    1528:	88 e0       	ldi	r24, 0x08	; 8
    152a:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    152e:	0e 94 ca 1b 	call	0x3794	; 0x3794 <getSerialNumPtr>
    1532:	04 96       	adiw	r24, 0x04	; 4
    1534:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <serialNumPtr+0x1>
    1538:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <serialNumPtr>
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	98 2f       	mov	r25, r24
    1540:	92 95       	swap	r25
    1542:	90 7f       	andi	r25, 0xF0	; 240
    1544:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    1548:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    154c:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1550:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    1554:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    1558:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    155c:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    1560:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    1564:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    1568:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    156c:	98 60       	ori	r25, 0x08	; 8
    156e:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1572:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    1576:	90 68       	ori	r25, 0x80	; 128
    1578:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	86 30       	cpi	r24, 0x06	; 6
    1580:	f1 f6       	brne	.-68     	; 0x153e <initCAN+0x5c>
    1582:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    1586:	8c 63       	ori	r24, 0x3C	; 60
    1588:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7f00de>
    158c:	80 ea       	ldi	r24, 0xA0	; 160
    158e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f00db>
    1592:	10 92 0a 06 	sts	0x060A, r1	; 0x80060a <activeBlockageFlag>
    1596:	8f e0       	ldi	r24, 0x0F	; 15
    1598:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <activeBlockageRows>
    159c:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <CANDataRequestFlags>
    15a0:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <CANTrafficDetected>
    15a4:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <blockageDataBufferHead>
    15a8:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <blockageDataBufferTail>
    15ac:	0e 94 d6 07 	call	0xfac	; 0xfac <getFwDataPtr>
    15b0:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <calStatusBufferPtr+0x1>
    15b4:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <calStatusBufferPtr>
    15b8:	08 95       	ret

000015ba <fillBlockageDataBuffer>:
    15ba:	66 23       	and	r22, r22
    15bc:	79 f0       	breq	.+30     	; 0x15dc <fillBlockageDataBuffer+0x22>
    15be:	20 91 ff 04 	lds	r18, 0x04FF	; 0x8004ff <blockageDataBufferTail>
    15c2:	dc 01       	movw	r26, r24
    15c4:	62 0f       	add	r22, r18
    15c6:	8d 91       	ld	r24, X+
    15c8:	e2 2f       	mov	r30, r18
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	ef 5f       	subi	r30, 0xFF	; 255
    15ce:	fa 4f       	sbci	r31, 0xFA	; 250
    15d0:	80 83       	st	Z, r24
    15d2:	2f 5f       	subi	r18, 0xFF	; 255
    15d4:	26 13       	cpse	r18, r22
    15d6:	f7 cf       	rjmp	.-18     	; 0x15c6 <fillBlockageDataBuffer+0xc>
    15d8:	20 93 ff 04 	sts	0x04FF, r18	; 0x8004ff <blockageDataBufferTail>
    15dc:	08 95       	ret

000015de <sendCANRawADC>:
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	ec 01       	movw	r28, r24
    15e4:	88 ee       	ldi	r24, 0xE8	; 232
    15e6:	93 e0       	ldi	r25, 0x03	; 3
    15e8:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    15ec:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    15f0:	0b c0       	rjmp	.+22     	; 0x1608 <sendCANRawADC+0x2a>
    15f2:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    15f6:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	c1 f1       	breq	.+112    	; 0x166e <sendCANRawADC+0x90>
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1604:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1608:	87 e3       	ldi	r24, 0x37	; 55
    160a:	96 e0       	ldi	r25, 0x06	; 6
    160c:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	79 f3       	breq	.-34     	; 0x15f2 <sendCANRawADC+0x14>
    1614:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1618:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    161c:	89 2b       	or	r24, r25
    161e:	39 f1       	breq	.+78     	; 0x166e <sendCANRawADC+0x90>
    1620:	88 81       	ld	r24, Y
    1622:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    1638:	8c 81       	ldd	r24, Y+4	; 0x04
    163a:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    164a:	8f 81       	ldd	r24, Y+7	; 0x07
    164c:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    1650:	88 e0       	ldi	r24, 0x08	; 8
    1652:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    1656:	8a e5       	ldi	r24, 0x5A	; 90
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    165e:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    1662:	87 e3       	ldi	r24, 0x37	; 55
    1664:	96 e0       	ldi	r25, 0x06	; 6
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <can_cmd>
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	08 95       	ret

00001674 <sendCANRawADC2>:
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	ec 01       	movw	r28, r24
    167a:	88 ee       	ldi	r24, 0xE8	; 232
    167c:	93 e0       	ldi	r25, 0x03	; 3
    167e:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1682:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1686:	0b c0       	rjmp	.+22     	; 0x169e <sendCANRawADC2+0x2a>
    1688:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    168c:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	c1 f1       	breq	.+112    	; 0x1704 <sendCANRawADC2+0x90>
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    169a:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    169e:	87 e3       	ldi	r24, 0x37	; 55
    16a0:	96 e0       	ldi	r25, 0x06	; 6
    16a2:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	79 f3       	breq	.-34     	; 0x1688 <sendCANRawADC2+0x14>
    16aa:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    16ae:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    16b2:	89 2b       	or	r24, r25
    16b4:	39 f1       	breq	.+78     	; 0x1704 <sendCANRawADC2+0x90>
    16b6:	88 81       	ld	r24, Y
    16b8:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    16da:	8e 81       	ldd	r24, Y+6	; 0x06
    16dc:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    16e0:	8f 81       	ldd	r24, Y+7	; 0x07
    16e2:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    16e6:	88 e0       	ldi	r24, 0x08	; 8
    16e8:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    16ec:	8b e5       	ldi	r24, 0x5B	; 91
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    16f4:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    16f8:	87 e3       	ldi	r24, 0x37	; 55
    16fa:	96 e0       	ldi	r25, 0x06	; 6
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <can_cmd>
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <sendCANRawADC3>:
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	ec 01       	movw	r28, r24
    1710:	88 ee       	ldi	r24, 0xE8	; 232
    1712:	93 e0       	ldi	r25, 0x03	; 3
    1714:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1718:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    171c:	0b c0       	rjmp	.+22     	; 0x1734 <sendCANRawADC3+0x2a>
    171e:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1722:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	c1 f1       	breq	.+112    	; 0x179a <sendCANRawADC3+0x90>
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1730:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1734:	87 e3       	ldi	r24, 0x37	; 55
    1736:	96 e0       	ldi	r25, 0x06	; 6
    1738:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	79 f3       	breq	.-34     	; 0x171e <sendCANRawADC3+0x14>
    1740:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1744:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1748:	89 2b       	or	r24, r25
    174a:	39 f1       	breq	.+78     	; 0x179a <sendCANRawADC3+0x90>
    174c:	88 81       	ld	r24, Y
    174e:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    1770:	8e 81       	ldd	r24, Y+6	; 0x06
    1772:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    1776:	8f 81       	ldd	r24, Y+7	; 0x07
    1778:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    177c:	88 e0       	ldi	r24, 0x08	; 8
    177e:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    1782:	8c e5       	ldi	r24, 0x5C	; 92
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    178a:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    178e:	87 e3       	ldi	r24, 0x37	; 55
    1790:	96 e0       	ldi	r25, 0x06	; 6
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <can_cmd>
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	08 95       	ret

000017a0 <sendCANRawADC4>:
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	ec 01       	movw	r28, r24
    17a6:	88 ee       	ldi	r24, 0xE8	; 232
    17a8:	93 e0       	ldi	r25, 0x03	; 3
    17aa:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    17ae:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    17b2:	0b c0       	rjmp	.+22     	; 0x17ca <sendCANRawADC4+0x2a>
    17b4:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    17b8:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	c1 f1       	breq	.+112    	; 0x1830 <sendCANRawADC4+0x90>
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    17c6:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    17ca:	87 e3       	ldi	r24, 0x37	; 55
    17cc:	96 e0       	ldi	r25, 0x06	; 6
    17ce:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	79 f3       	breq	.-34     	; 0x17b4 <sendCANRawADC4+0x14>
    17d6:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    17da:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    17de:	89 2b       	or	r24, r25
    17e0:	39 f1       	breq	.+78     	; 0x1830 <sendCANRawADC4+0x90>
    17e2:	88 81       	ld	r24, Y
    17e4:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    1806:	8e 81       	ldd	r24, Y+6	; 0x06
    1808:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    180c:	8f 81       	ldd	r24, Y+7	; 0x07
    180e:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    1812:	88 e0       	ldi	r24, 0x08	; 8
    1814:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    1818:	8d e5       	ldi	r24, 0x5D	; 93
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    1820:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    1824:	87 e3       	ldi	r24, 0x37	; 55
    1826:	96 e0       	ldi	r25, 0x06	; 6
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <can_cmd>
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <sendCANRawADC5>:
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	ec 01       	movw	r28, r24
    183c:	88 ee       	ldi	r24, 0xE8	; 232
    183e:	93 e0       	ldi	r25, 0x03	; 3
    1840:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1844:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1848:	0b c0       	rjmp	.+22     	; 0x1860 <sendCANRawADC5+0x2a>
    184a:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    184e:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	c1 f1       	breq	.+112    	; 0x18c6 <sendCANRawADC5+0x90>
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    185c:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1860:	87 e3       	ldi	r24, 0x37	; 55
    1862:	96 e0       	ldi	r25, 0x06	; 6
    1864:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	79 f3       	breq	.-34     	; 0x184a <sendCANRawADC5+0x14>
    186c:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1870:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1874:	89 2b       	or	r24, r25
    1876:	39 f1       	breq	.+78     	; 0x18c6 <sendCANRawADC5+0x90>
    1878:	88 81       	ld	r24, Y
    187a:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    1890:	8c 81       	ldd	r24, Y+4	; 0x04
    1892:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    1896:	8d 81       	ldd	r24, Y+5	; 0x05
    1898:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    189c:	8e 81       	ldd	r24, Y+6	; 0x06
    189e:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    18a2:	8f 81       	ldd	r24, Y+7	; 0x07
    18a4:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    18a8:	88 e0       	ldi	r24, 0x08	; 8
    18aa:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    18ae:	8e e5       	ldi	r24, 0x5E	; 94
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    18b6:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    18ba:	87 e3       	ldi	r24, 0x37	; 55
    18bc:	96 e0       	ldi	r25, 0x06	; 6
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <can_cmd>
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	08 95       	ret

000018cc <sendCANRawADC6>:
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	ec 01       	movw	r28, r24
    18d2:	88 ee       	ldi	r24, 0xE8	; 232
    18d4:	93 e0       	ldi	r25, 0x03	; 3
    18d6:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    18da:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    18de:	0b c0       	rjmp	.+22     	; 0x18f6 <sendCANRawADC6+0x2a>
    18e0:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    18e4:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	c1 f1       	breq	.+112    	; 0x195c <sendCANRawADC6+0x90>
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    18f2:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    18f6:	87 e3       	ldi	r24, 0x37	; 55
    18f8:	96 e0       	ldi	r25, 0x06	; 6
    18fa:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	79 f3       	breq	.-34     	; 0x18e0 <sendCANRawADC6+0x14>
    1902:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1906:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    190a:	89 2b       	or	r24, r25
    190c:	39 f1       	breq	.+78     	; 0x195c <sendCANRawADC6+0x90>
    190e:	88 81       	ld	r24, Y
    1910:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    192c:	8d 81       	ldd	r24, Y+5	; 0x05
    192e:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    1932:	8e 81       	ldd	r24, Y+6	; 0x06
    1934:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    1938:	8f 81       	ldd	r24, Y+7	; 0x07
    193a:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    193e:	88 e0       	ldi	r24, 0x08	; 8
    1940:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    1944:	8f e5       	ldi	r24, 0x5F	; 95
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    194c:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    1950:	87 e3       	ldi	r24, 0x37	; 55
    1952:	96 e0       	ldi	r25, 0x06	; 6
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <can_cmd>
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	08 95       	ret

00001962 <sendCANRawADC7>:
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	ec 01       	movw	r28, r24
    1968:	88 ee       	ldi	r24, 0xE8	; 232
    196a:	93 e0       	ldi	r25, 0x03	; 3
    196c:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1970:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1974:	0b c0       	rjmp	.+22     	; 0x198c <sendCANRawADC7+0x2a>
    1976:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    197a:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	c1 f1       	breq	.+112    	; 0x19f2 <sendCANRawADC7+0x90>
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1988:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    198c:	87 e3       	ldi	r24, 0x37	; 55
    198e:	96 e0       	ldi	r25, 0x06	; 6
    1990:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	79 f3       	breq	.-34     	; 0x1976 <sendCANRawADC7+0x14>
    1998:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    199c:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    19a0:	89 2b       	or	r24, r25
    19a2:	39 f1       	breq	.+78     	; 0x19f2 <sendCANRawADC7+0x90>
    19a4:	88 81       	ld	r24, Y
    19a6:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <txCANMsgSensorData>
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <txCANMsgSensorData+0x1>
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <txCANMsgSensorData+0x2>
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <txCANMsgSensorData+0x3>
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    19be:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
    19c2:	8d 81       	ldd	r24, Y+5	; 0x05
    19c4:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <txCANMsgSensorData+0x5>
    19c8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ca:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <txCANMsgSensorData+0x6>
    19ce:	8f 81       	ldd	r24, Y+7	; 0x07
    19d0:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <txCANMsgSensorData+0x7>
    19d4:	88 e0       	ldi	r24, 0x08	; 8
    19d6:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
    19da:	80 e6       	ldi	r24, 0x60	; 96
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    19e2:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>
    19e6:	87 e3       	ldi	r24, 0x37	; 55
    19e8:	96 e0       	ldi	r25, 0x06	; 6
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <can_cmd>
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <sendCalStatusMsg>:
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	18 2f       	mov	r17, r24
    1a00:	d6 2f       	mov	r29, r22
    1a02:	c4 2f       	mov	r28, r20
    1a04:	8c e2       	ldi	r24, 0x2C	; 44
    1a06:	96 e0       	ldi	r25, 0x06	; 6
    1a08:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	d1 f3       	breq	.-12     	; 0x1a04 <sendCalStatusMsg+0xc>
    1a10:	10 93 1c 06 	sts	0x061C, r17	; 0x80061c <txCANMsgNonBlockageBuff>
    1a14:	d0 93 1d 06 	sts	0x061D, r29	; 0x80061d <txCANMsgNonBlockageBuff+0x1>
    1a18:	c0 93 1e 06 	sts	0x061E, r28	; 0x80061e <txCANMsgNonBlockageBuff+0x2>
    1a1c:	e0 91 01 06 	lds	r30, 0x0601	; 0x800601 <serialNumPtr>
    1a20:	f0 91 02 06 	lds	r31, 0x0602	; 0x800602 <serialNumPtr+0x1>
    1a24:	80 81       	ld	r24, Z
    1a26:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <txCANMsgNonBlockageBuff+0x3>
    1a2a:	81 81       	ldd	r24, Z+1	; 0x01
    1a2c:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <txCANMsgNonBlockageBuff+0x4>
    1a30:	82 81       	ldd	r24, Z+2	; 0x02
    1a32:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <txCANMsgNonBlockageBuff+0x5>
    1a36:	83 81       	ldd	r24, Z+3	; 0x03
    1a38:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <txCANMsgNonBlockageBuff+0x6>
    1a3c:	87 e0       	ldi	r24, 0x07	; 7
    1a3e:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1a42:	8a e2       	ldi	r24, 0x2A	; 42
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1a4a:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1a4e:	8c e2       	ldi	r24, 0x2C	; 44
    1a50:	96 e0       	ldi	r25, 0x06	; 6
    1a52:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1a56:	81 11       	cpse	r24, r1
    1a58:	fa cf       	rjmp	.-12     	; 0x1a4e <sendCalStatusMsg+0x56>
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	08 95       	ret

00001a62 <sendPingAllSensors>:
    1a62:	8c e2       	ldi	r24, 0x2C	; 44
    1a64:	96 e0       	ldi	r25, 0x06	; 6
    1a66:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	d1 f3       	breq	.-12     	; 0x1a62 <sendPingAllSensors>
    1a6e:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <scRandomCANTx+0x6>
    1a72:	8b e2       	ldi	r24, 0x2B	; 43
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1a7a:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1a7e:	8c e2       	ldi	r24, 0x2C	; 44
    1a80:	96 e0       	ldi	r25, 0x06	; 6
    1a82:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1a86:	81 11       	cpse	r24, r1
    1a88:	fa cf       	rjmp	.-12     	; 0x1a7e <sendPingAllSensors+0x1c>
    1a8a:	08 95       	ret

00001a8c <sendStartCalCommand>:
    1a8c:	8c e2       	ldi	r24, 0x2C	; 44
    1a8e:	96 e0       	ldi	r25, 0x06	; 6
    1a90:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	d1 f3       	breq	.-12     	; 0x1a8c <sendStartCalCommand>
    1a98:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <scRandomCANTx+0x6>
    1a9c:	89 e2       	ldi	r24, 0x29	; 41
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1aa4:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1aa8:	8c e2       	ldi	r24, 0x2C	; 44
    1aaa:	96 e0       	ldi	r25, 0x06	; 6
    1aac:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1ab0:	81 11       	cpse	r24, r1
    1ab2:	fa cf       	rjmp	.-12     	; 0x1aa8 <sendStartCalCommand+0x1c>
    1ab4:	08 95       	ret

00001ab6 <sendCANStartFwUpdateMsg>:
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	ec 01       	movw	r28, r24
    1abc:	8c e2       	ldi	r24, 0x2C	; 44
    1abe:	96 e0       	ldi	r25, 0x06	; 6
    1ac0:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	d1 f3       	breq	.-12     	; 0x1abc <sendCANStartFwUpdateMsg+0x6>
    1ac8:	88 81       	ld	r24, Y
    1aca:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <txCANMsgNonBlockageBuff>
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <txCANMsgNonBlockageBuff+0x1>
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <txCANMsgNonBlockageBuff+0x2>
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <txCANMsgNonBlockageBuff+0x3>
    1ae0:	84 e0       	ldi	r24, 0x04	; 4
    1ae2:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1ae6:	8e e1       	ldi	r24, 0x1E	; 30
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1aee:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1af2:	8c e2       	ldi	r24, 0x2C	; 44
    1af4:	96 e0       	ldi	r25, 0x06	; 6
    1af6:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1afa:	81 11       	cpse	r24, r1
    1afc:	fa cf       	rjmp	.-12     	; 0x1af2 <sendCANStartFwUpdateMsg+0x3c>
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	08 95       	ret

00001b04 <sendCANGetDeviceInfoBySerial>:
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	ec 01       	movw	r28, r24
    1b0a:	8c e2       	ldi	r24, 0x2C	; 44
    1b0c:	96 e0       	ldi	r25, 0x06	; 6
    1b0e:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	d1 f3       	breq	.-12     	; 0x1b0a <sendCANGetDeviceInfoBySerial+0x6>
    1b16:	88 81       	ld	r24, Y
    1b18:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <txCANMsgNonBlockageBuff>
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <txCANMsgNonBlockageBuff+0x1>
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <txCANMsgNonBlockageBuff+0x2>
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <txCANMsgNonBlockageBuff+0x3>
    1b2e:	84 e0       	ldi	r24, 0x04	; 4
    1b30:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1b34:	8d e2       	ldi	r24, 0x2D	; 45
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1b3c:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1b40:	8c e2       	ldi	r24, 0x2C	; 44
    1b42:	96 e0       	ldi	r25, 0x06	; 6
    1b44:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1b48:	81 11       	cpse	r24, r1
    1b4a:	fa cf       	rjmp	.-12     	; 0x1b40 <sendCANGetDeviceInfoBySerial+0x3c>
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	08 95       	ret

00001b52 <sendCANBitResultsMsg>:
    1b52:	cf 93       	push	r28
    1b54:	c8 2f       	mov	r28, r24
    1b56:	88 ee       	ldi	r24, 0xE8	; 232
    1b58:	93 e0       	ldi	r25, 0x03	; 3
    1b5a:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1b5e:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1b62:	0b c0       	rjmp	.+22     	; 0x1b7a <sendCANBitResultsMsg+0x28>
    1b64:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1b68:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	81 f1       	breq	.+96     	; 0x1bd0 <sendCANBitResultsMsg+0x7e>
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1b76:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
    1b7a:	87 e3       	ldi	r24, 0x37	; 55
    1b7c:	96 e0       	ldi	r25, 0x06	; 6
    1b7e:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	79 f3       	breq	.-34     	; 0x1b64 <sendCANBitResultsMsg+0x12>
    1b86:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1b8a:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1b8e:	89 2b       	or	r24, r25
    1b90:	f9 f0       	breq	.+62     	; 0x1bd0 <sendCANBitResultsMsg+0x7e>
    1b92:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <canRetryFailCount>
    1b96:	c0 93 1c 06 	sts	0x061C, r28	; 0x80061c <txCANMsgNonBlockageBuff>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1ba0:	87 e1       	ldi	r24, 0x17	; 23
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1ba8:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1bac:	87 e3       	ldi	r24, 0x37	; 55
    1bae:	96 e0       	ldi	r25, 0x06	; 6
    1bb0:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1bb4:	88 23       	and	r24, r24
    1bb6:	99 f0       	breq	.+38     	; 0x1bde <sendCANBitResultsMsg+0x8c>
    1bb8:	8c e0       	ldi	r24, 0x0C	; 12
    1bba:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <scPeriodicCANTx+0x1>
    1bbe:	87 e3       	ldi	r24, 0x37	; 55
    1bc0:	96 e0       	ldi	r25, 0x06	; 6
    1bc2:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <scPeriodicCANTx+0x1>
    1bcc:	cf 91       	pop	r28
    1bce:	08 95       	ret
    1bd0:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <canRetryFailCount>
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	83 33       	cpi	r24, 0x33	; 51
    1bd8:	20 f4       	brcc	.+8      	; 0x1be2 <sendCANBitResultsMsg+0x90>
    1bda:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <canRetryFailCount>
    1bde:	cf 91       	pop	r28
    1be0:	08 95       	ret
    1be2:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <canRetryFailCount>
    1be6:	cf 91       	pop	r28
    1be8:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <initCAN>

00001bec <sendDeviceInfoData>:
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	ec 01       	movw	r28, r24
    1bf2:	8c e2       	ldi	r24, 0x2C	; 44
    1bf4:	96 e0       	ldi	r25, 0x06	; 6
    1bf6:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	d1 f3       	breq	.-12     	; 0x1bf2 <sendDeviceInfoData+0x6>
    1bfe:	88 81       	ld	r24, Y
    1c00:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <txCANMsgNonBlockageBuff>
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <txCANMsgNonBlockageBuff+0x1>
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <txCANMsgNonBlockageBuff+0x2>
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <txCANMsgNonBlockageBuff+0x3>
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <txCANMsgNonBlockageBuff+0x4>
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <txCANMsgNonBlockageBuff+0x5>
    1c22:	8e 81       	ldd	r24, Y+6	; 0x06
    1c24:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <txCANMsgNonBlockageBuff+0x6>
    1c28:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2a:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <txCANMsgNonBlockageBuff+0x7>
    1c2e:	88 e0       	ldi	r24, 0x08	; 8
    1c30:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1c34:	81 e2       	ldi	r24, 0x21	; 33
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1c3c:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1c40:	8c e2       	ldi	r24, 0x2C	; 44
    1c42:	96 e0       	ldi	r25, 0x06	; 6
    1c44:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1c48:	81 11       	cpse	r24, r1
    1c4a:	fa cf       	rjmp	.-12     	; 0x1c40 <sendDeviceInfoData+0x54>
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	08 95       	ret

00001c52 <sendCANFwUpdateDataPacket>:
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	ec 01       	movw	r28, r24
    1c58:	8c e2       	ldi	r24, 0x2C	; 44
    1c5a:	96 e0       	ldi	r25, 0x06	; 6
    1c5c:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	d1 f3       	breq	.-12     	; 0x1c58 <sendCANFwUpdateDataPacket+0x6>
    1c64:	88 81       	ld	r24, Y
    1c66:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <txCANMsgNonBlockageBuff>
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <txCANMsgNonBlockageBuff+0x1>
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	80 93 1e 06 	sts	0x061E, r24	; 0x80061e <txCANMsgNonBlockageBuff+0x2>
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <txCANMsgNonBlockageBuff+0x3>
    1c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7e:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <txCANMsgNonBlockageBuff+0x4>
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <txCANMsgNonBlockageBuff+0x5>
    1c88:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8a:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <txCANMsgNonBlockageBuff+0x6>
    1c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c90:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <txCANMsgNonBlockageBuff+0x7>
    1c94:	88 e0       	ldi	r24, 0x08	; 8
    1c96:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
    1c9a:	8c e0       	ldi	r24, 0x0C	; 12
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1ca2:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1ca6:	8c e2       	ldi	r24, 0x2C	; 44
    1ca8:	96 e0       	ldi	r25, 0x06	; 6
    1caa:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1cae:	81 11       	cpse	r24, r1
    1cb0:	fa cf       	rjmp	.-12     	; 0x1ca6 <sendCANFwUpdateDataPacket+0x54>
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <sendCANFwUpdateShortDataPacket>:
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	18 2f       	mov	r17, r24
    1cc0:	d9 2f       	mov	r29, r25
    1cc2:	c6 2f       	mov	r28, r22
    1cc4:	8c e2       	ldi	r24, 0x2C	; 44
    1cc6:	96 e0       	ldi	r25, 0x06	; 6
    1cc8:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	d1 f3       	breq	.-12     	; 0x1cc4 <sendCANFwUpdateShortDataPacket+0xc>
    1cd0:	cc 23       	and	r28, r28
    1cd2:	81 f0       	breq	.+32     	; 0x1cf4 <sendCANFwUpdateShortDataPacket+0x3c>
    1cd4:	e1 2f       	mov	r30, r17
    1cd6:	fd 2f       	mov	r31, r29
    1cd8:	ac e1       	ldi	r26, 0x1C	; 28
    1cda:	b6 e0       	ldi	r27, 0x06	; 6
    1cdc:	2f ef       	ldi	r18, 0xFF	; 255
    1cde:	2c 0f       	add	r18, r28
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	2f 5f       	subi	r18, 0xFF	; 255
    1ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce6:	2e 0f       	add	r18, r30
    1ce8:	3f 1f       	adc	r19, r31
    1cea:	81 91       	ld	r24, Z+
    1cec:	8d 93       	st	X+, r24
    1cee:	e2 17       	cp	r30, r18
    1cf0:	f3 07       	cpc	r31, r19
    1cf2:	d9 f7       	brne	.-10     	; 0x1cea <sendCANFwUpdateShortDataPacket+0x32>
    1cf4:	c0 93 32 06 	sts	0x0632, r28	; 0x800632 <scRandomCANTx+0x6>
    1cf8:	8c e0       	ldi	r24, 0x0C	; 12
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1d00:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1d04:	8c e2       	ldi	r24, 0x2C	; 44
    1d06:	96 e0       	ldi	r25, 0x06	; 6
    1d08:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1d0c:	81 11       	cpse	r24, r1
    1d0e:	fa cf       	rjmp	.-12     	; 0x1d04 <sendCANFwUpdateShortDataPacket+0x4c>
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	08 95       	ret

00001d18 <sendCANSensorDataDisableMsg>:
    1d18:	8c e2       	ldi	r24, 0x2C	; 44
    1d1a:	96 e0       	ldi	r25, 0x06	; 6
    1d1c:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1d20:	81 30       	cpi	r24, 0x01	; 1
    1d22:	d1 f3       	breq	.-12     	; 0x1d18 <sendCANSensorDataDisableMsg>
    1d24:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <scRandomCANTx+0x6>
    1d28:	86 e2       	ldi	r24, 0x26	; 38
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1d30:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1d34:	8c e2       	ldi	r24, 0x2C	; 44
    1d36:	96 e0       	ldi	r25, 0x06	; 6
    1d38:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1d3c:	81 11       	cpse	r24, r1
    1d3e:	fa cf       	rjmp	.-12     	; 0x1d34 <sendCANSensorDataDisableMsg+0x1c>
    1d40:	08 95       	ret

00001d42 <sendCANSensorDataEnableMsg>:
    1d42:	8c e2       	ldi	r24, 0x2C	; 44
    1d44:	96 e0       	ldi	r25, 0x06	; 6
    1d46:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	d1 f3       	breq	.-12     	; 0x1d42 <sendCANSensorDataEnableMsg>
    1d4e:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <scRandomCANTx+0x6>
    1d52:	87 e2       	ldi	r24, 0x27	; 39
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1d5a:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1d5e:	8c e2       	ldi	r24, 0x2C	; 44
    1d60:	96 e0       	ldi	r25, 0x06	; 6
    1d62:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1d66:	81 11       	cpse	r24, r1
    1d68:	fa cf       	rjmp	.-12     	; 0x1d5e <sendCANSensorDataEnableMsg+0x1c>
    1d6a:	08 95       	ret

00001d6c <sendCANFwUpdateComplete>:
    1d6c:	8c e2       	ldi	r24, 0x2C	; 44
    1d6e:	96 e0       	ldi	r25, 0x06	; 6
    1d70:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	d1 f3       	breq	.-12     	; 0x1d6c <sendCANFwUpdateComplete>
    1d78:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <scRandomCANTx+0x6>
    1d7c:	88 e2       	ldi	r24, 0x28	; 40
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    1d84:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
    1d88:	8c e2       	ldi	r24, 0x2C	; 44
    1d8a:	96 e0       	ldi	r25, 0x06	; 6
    1d8c:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1d90:	81 11       	cpse	r24, r1
    1d92:	fa cf       	rjmp	.-12     	; 0x1d88 <sendCANFwUpdateComplete+0x1c>
    1d94:	08 95       	ret

00001d96 <getActiveBlockageFlag>:
    1d96:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <activeBlockageFlag>
    1d9a:	08 95       	ret

00001d9c <clearActiveBlockageFlag>:
    1d9c:	10 92 0a 06 	sts	0x060A, r1	; 0x80060a <activeBlockageFlag>
    1da0:	08 95       	ret

00001da2 <getActiveBlockageRows>:
    1da2:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <activeBlockageRows>
    1da6:	08 95       	ret

00001da8 <getCANDataRequestFlags>:

BYTE getCANDataRequestFlags(void)
{
    return CANDataRequestFlags;
}
    1da8:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <CANDataRequestFlags>
    1dac:	08 95       	ret

00001dae <setCANDataRequestFlags>:

void setCANDataRequestFlags(BYTE val)
{
    CANDataRequestFlags = val;
    1dae:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <CANDataRequestFlags>
    1db2:	08 95       	ret

00001db4 <compareSerialNums>:
}


BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    1db4:	fc 01       	movw	r30, r24
    1db6:	db 01       	movw	r26, r22
    1db8:	9c 01       	movw	r18, r24
    1dba:	2c 5f       	subi	r18, 0xFC	; 252
    1dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    1dbe:	91 91       	ld	r25, Z+
    1dc0:	8d 91       	ld	r24, X+
    1dc2:	98 13       	cpse	r25, r24
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <compareSerialNums+0x1c>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    1dc6:	e2 17       	cp	r30, r18
    1dc8:	f3 07       	cpc	r31, r19
    1dca:	c9 f7       	brne	.-14     	; 0x1dbe <compareSerialNums+0xa>
    {
        if((*(num1 + i)) == (*(num2 + i)))
        {
            result = 1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	08 95       	ret
        }
        else
        {
            result = 0;
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }   
    return result;
}
    1dd2:	08 95       	ret

00001dd4 <storeActiveBlockageData>:
void storeActiveBlockageData(BYTE blockageMask)
{
    BYTE timerVal = 0;
    static BYTE blockageStateChangeMask = 0;

    if(blockageMask)
    1dd4:	88 23       	and	r24, r24
    1dd6:	19 f0       	breq	.+6      	; 0x1dde <storeActiveBlockageData+0xa>
    {
        activeBlockageFlag = 1;
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	90 93 0a 06 	sts	0x060A, r25	; 0x80060a <activeBlockageFlag>
    }
    blockageStateChangeMask ^= blockageMask;
    1dde:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <blockageStateChangeMask.2758>
    1de2:	98 27       	eor	r25, r24
    1de4:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <blockageStateChangeMask.2758>
    activeBlockageRows = blockageMask; // Assume index 4 is the row bitmask
    1de8:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <activeBlockageRows>

    timerVal = get4HzTimer();
    1dec:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <get4HzTimer>

    if((activeBlockageRows & 0x01) && (blockageStateChangeMask & 0x01))
    1df0:	90 91 09 06 	lds	r25, 0x0609	; 0x800609 <activeBlockageRows>
    1df4:	90 ff       	sbrs	r25, 0
    1df6:	04 c0       	rjmp	.+8      	; 0x1e00 <storeActiveBlockageData+0x2c>
    1df8:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <blockageStateChangeMask.2758>
    1dfc:	20 fd       	sbrc	r18, 0
    1dfe:	1a c0       	rjmp	.+52     	; 0x1e34 <storeActiveBlockageData+0x60>
    {
        activeBlockageStartTimes[0] = timerVal;
    }

    if((activeBlockageRows & 0x02) && (blockageStateChangeMask & 0x02))
    1e00:	91 ff       	sbrs	r25, 1
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <storeActiveBlockageData+0x38>
    1e04:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <blockageStateChangeMask.2758>
    1e08:	21 fd       	sbrc	r18, 1
    1e0a:	11 c0       	rjmp	.+34     	; 0x1e2e <storeActiveBlockageData+0x5a>
    {
        activeBlockageStartTimes[1] = timerVal;
    }

    if((activeBlockageRows & 0x04) && (blockageStateChangeMask & 0x04))
    1e0c:	92 ff       	sbrs	r25, 2
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <storeActiveBlockageData+0x44>
    1e10:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <blockageStateChangeMask.2758>
    1e14:	22 fd       	sbrc	r18, 2
    1e16:	08 c0       	rjmp	.+16     	; 0x1e28 <storeActiveBlockageData+0x54>
    {
        activeBlockageStartTimes[2] = timerVal;
    }

    if((activeBlockageRows & 0x08) && (blockageStateChangeMask & 0x08))
    1e18:	93 ff       	sbrs	r25, 3
    1e1a:	05 c0       	rjmp	.+10     	; 0x1e26 <storeActiveBlockageData+0x52>
    1e1c:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <blockageStateChangeMask.2758>
    1e20:	93 fd       	sbrc	r25, 3
    {
        activeBlockageStartTimes[3] = timerVal;
    1e22:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <activeBlockageStartTimes+0x3>
    1e26:	08 95       	ret
        activeBlockageStartTimes[1] = timerVal;
    }

    if((activeBlockageRows & 0x04) && (blockageStateChangeMask & 0x04))
    {
        activeBlockageStartTimes[2] = timerVal;
    1e28:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <activeBlockageStartTimes+0x2>
    1e2c:	f5 cf       	rjmp	.-22     	; 0x1e18 <storeActiveBlockageData+0x44>
        activeBlockageStartTimes[0] = timerVal;
    }

    if((activeBlockageRows & 0x02) && (blockageStateChangeMask & 0x02))
    {
        activeBlockageStartTimes[1] = timerVal;
    1e2e:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <activeBlockageStartTimes+0x1>
    1e32:	ec cf       	rjmp	.-40     	; 0x1e0c <storeActiveBlockageData+0x38>

    timerVal = get4HzTimer();

    if((activeBlockageRows & 0x01) && (blockageStateChangeMask & 0x01))
    {
        activeBlockageStartTimes[0] = timerVal;
    1e34:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <activeBlockageStartTimes>
    1e38:	e3 cf       	rjmp	.-58     	; 0x1e00 <storeActiveBlockageData+0x2c>

00001e3a <retransmitBlockageData>:
}

void retransmitBlockageData(void)
{
    //cli();
    if(blockageDataBufferTail != blockageDataBufferHead)
    1e3a:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <blockageDataBufferHead>
    1e3e:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <blockageDataBufferTail>
    1e42:	8e 17       	cp	r24, r30
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <retransmitBlockageData+0xe>
    1e46:	3e c0       	rjmp	.+124    	; 0x1ec4 <retransmitBlockageData+0x8a>
    {
        if(compareSerialNums(&blockageDataBuffer[blockageDataBufferHead], serialNumPtr)) // SN matches this module
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	ef 5f       	subi	r30, 0xFF	; 255
    1e4c:	fa 4f       	sbci	r31, 0xFA	; 250
    1e4e:	a0 91 01 06 	lds	r26, 0x0601	; 0x800601 <serialNumPtr>
    1e52:	b0 91 02 06 	lds	r27, 0x0602	; 0x800602 <serialNumPtr+0x1>
    1e56:	9f 01       	movw	r18, r30
    1e58:	2c 5f       	subi	r18, 0xFC	; 252
    1e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    1e5c:	91 91       	ld	r25, Z+
    1e5e:	8d 91       	ld	r24, X+
    1e60:	98 13       	cpse	r25, r24
    1e62:	31 c0       	rjmp	.+98     	; 0x1ec6 <retransmitBlockageData+0x8c>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    1e64:	e2 17       	cp	r30, r18
    1e66:	f3 07       	cpc	r31, r19
    1e68:	c9 f7       	brne	.-14     	; 0x1e5c <retransmitBlockageData+0x22>
    //cli();
    if(blockageDataBufferTail != blockageDataBufferHead)
    {
        if(compareSerialNums(&blockageDataBuffer[blockageDataBufferHead], serialNumPtr)) // SN matches this module
        {
			cli(); // Prevent head/tail from being disrupted during pop operation
    1e6a:	f8 94       	cli

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1e6c:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <blockageDataBufferTail>
    1e70:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <blockageDataBufferHead>
    1e74:	98 17       	cp	r25, r24
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <retransmitBlockageData+0x40>
    1e78:	c2 c0       	rjmp	.+388    	; 0x1ffe <retransmitBlockageData+0x1c4>
    1e7a:	21 e0       	ldi	r18, 0x01	; 1
    1e7c:	28 0f       	add	r18, r24
    1e7e:	92 17       	cp	r25, r18
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <retransmitBlockageData+0x4a>
    1e82:	bb c0       	rjmp	.+374    	; 0x1ffa <retransmitBlockageData+0x1c0>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1e84:	22 e0       	ldi	r18, 0x02	; 2
    1e86:	28 0f       	add	r18, r24
    1e88:	20 93 00 05 	sts	0x0500, r18	; 0x800500 <blockageDataBufferHead>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1e8c:	92 17       	cp	r25, r18
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <retransmitBlockageData+0x58>
    1e90:	b6 c0       	rjmp	.+364    	; 0x1ffe <retransmitBlockageData+0x1c4>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1e92:	23 e0       	ldi	r18, 0x03	; 3
    1e94:	28 0f       	add	r18, r24
    1e96:	20 93 00 05 	sts	0x0500, r18	; 0x800500 <blockageDataBufferHead>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1e9a:	92 17       	cp	r25, r18
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <retransmitBlockageData+0x66>
    1e9e:	af c0       	rjmp	.+350    	; 0x1ffe <retransmitBlockageData+0x1c4>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1ea0:	e4 e0       	ldi	r30, 0x04	; 4
    1ea2:	e8 0f       	add	r30, r24
    1ea4:	e0 93 00 05 	sts	0x0500, r30	; 0x800500 <blockageDataBufferHead>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1ea8:	9e 17       	cp	r25, r30
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <retransmitBlockageData+0x74>
    1eac:	a8 c0       	rjmp	.+336    	; 0x1ffe <retransmitBlockageData+0x1c4>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1eae:	8b 5f       	subi	r24, 0xFB	; 251
    1eb0:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <blockageDataBufferHead>
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	ef 5f       	subi	r30, 0xFF	; 255
    1eb8:	fa 4f       	sbci	r31, 0xFA	; 250
    1eba:	80 81       	ld	r24, Z
			cli(); // Prevent head/tail from being disrupted during pop operation
            (void) popBlockageDataBuffer();
			(void) popBlockageDataBuffer();
			(void) popBlockageDataBuffer();
			(void) popBlockageDataBuffer();
			storeActiveBlockageData(popBlockageDataBuffer());
    1ebc:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <storeActiveBlockageData>
            sei();
    1ec0:	78 94       	sei
    1ec2:	08 95       	ret
    1ec4:	08 95       	ret
        }
        else
        {
 	        can_retry = CAN_RETRY_LIMIT;
    1ec6:	88 ee       	ldi	r24, 0xE8	; 232
    1ec8:	93 e0       	ldi	r25, 0x03	; 3
    1eca:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1ece:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
 	        while (can_get_status(&scPeriodicCANTx) == CAN_STATUS_NOT_COMPLETED && can_retry > 0)
    1ed2:	0c c0       	rjmp	.+24     	; 0x1eec <retransmitBlockageData+0xb2>
    1ed4:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1ed8:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <retransmitBlockageData+0xa8>
    1ee0:	76 c0       	rjmp	.+236    	; 0x1fce <retransmitBlockageData+0x194>
 	        {
     	        can_retry--;
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <can_retry+0x1>
    1ee8:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <can_retry>
            sei();
        }
        else
        {
 	        can_retry = CAN_RETRY_LIMIT;
 	        while (can_get_status(&scPeriodicCANTx) == CAN_STATUS_NOT_COMPLETED && can_retry > 0)
    1eec:	87 e3       	ldi	r24, 0x37	; 55
    1eee:	96 e0       	ldi	r25, 0x06	; 6
    1ef0:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	71 f3       	breq	.-36     	; 0x1ed4 <retransmitBlockageData+0x9a>
 	        {
     	        can_retry--;
 	        }
 	        if(can_retry == 0)
    1ef8:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <can_retry>
    1efc:	90 91 43 06 	lds	r25, 0x0643	; 0x800643 <can_retry+0x1>
    1f00:	89 2b       	or	r24, r25
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <retransmitBlockageData+0xcc>
    1f04:	64 c0       	rjmp	.+200    	; 0x1fce <retransmitBlockageData+0x194>
         	        canRetryFailCount = 0;
         	        initCAN();
     	        }
     	        return;
 	        }
 	        canRetryFailCount = 0;
    1f06:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <canRetryFailCount>
            // Fill the data bytes
            cli();
    1f0a:	f8 94       	cli

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1f0c:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <blockageDataBufferTail>
    1f10:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <blockageDataBufferHead>
    1f14:	98 17       	cp	r25, r24
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <retransmitBlockageData+0xe0>
    1f18:	66 c0       	rjmp	.+204    	; 0x1fe6 <retransmitBlockageData+0x1ac>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1f1a:	a1 e0       	ldi	r26, 0x01	; 1
    1f1c:	a8 0f       	add	r26, r24
    1f1e:	a0 93 00 05 	sts	0x0500, r26	; 0x800500 <blockageDataBufferHead>
    1f22:	e8 2f       	mov	r30, r24
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	ef 5f       	subi	r30, 0xFF	; 255
    1f28:	fa 4f       	sbci	r31, 0xFA	; 250
     	        return;
 	        }
 	        canRetryFailCount = 0;
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
    1f2a:	20 81       	ld	r18, Z
    1f2c:	20 93 24 06 	sts	0x0624, r18	; 0x800624 <txCANMsgSensorData>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1f30:	9a 17       	cp	r25, r26
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <retransmitBlockageData+0xfc>
    1f34:	66 c0       	rjmp	.+204    	; 0x2002 <retransmitBlockageData+0x1c8>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1f36:	e2 e0       	ldi	r30, 0x02	; 2
    1f38:	e8 0f       	add	r30, r24
    1f3a:	e0 93 00 05 	sts	0x0500, r30	; 0x800500 <blockageDataBufferHead>
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	af 5f       	subi	r26, 0xFF	; 255
    1f42:	ba 4f       	sbci	r27, 0xFA	; 250
 	        }
 	        canRetryFailCount = 0;
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
    1f44:	2c 91       	ld	r18, X
    1f46:	20 93 25 06 	sts	0x0625, r18	; 0x800625 <txCANMsgSensorData+0x1>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1f4a:	9e 17       	cp	r25, r30
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <retransmitBlockageData+0x116>
    1f4e:	4f c0       	rjmp	.+158    	; 0x1fee <retransmitBlockageData+0x1b4>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1f50:	a3 e0       	ldi	r26, 0x03	; 3
    1f52:	a8 0f       	add	r26, r24
    1f54:	a0 93 00 05 	sts	0x0500, r26	; 0x800500 <blockageDataBufferHead>
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	ef 5f       	subi	r30, 0xFF	; 255
    1f5c:	fa 4f       	sbci	r31, 0xFA	; 250
 	        canRetryFailCount = 0;
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
            txCANMsgSensorData[2] = popBlockageDataBuffer(); // Serial Num 
    1f5e:	20 81       	ld	r18, Z
    1f60:	20 93 26 06 	sts	0x0626, r18	; 0x800626 <txCANMsgSensorData+0x2>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1f64:	9a 17       	cp	r25, r26
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <retransmitBlockageData+0x130>
    1f68:	50 c0       	rjmp	.+160    	; 0x200a <retransmitBlockageData+0x1d0>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1f6a:	e4 e0       	ldi	r30, 0x04	; 4
    1f6c:	e8 0f       	add	r30, r24
    1f6e:	e0 93 00 05 	sts	0x0500, r30	; 0x800500 <blockageDataBufferHead>
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	af 5f       	subi	r26, 0xFF	; 255
    1f76:	ba 4f       	sbci	r27, 0xFA	; 250
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
            txCANMsgSensorData[2] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[3] = popBlockageDataBuffer(); // Serial Num 
    1f78:	2c 91       	ld	r18, X
    1f7a:	20 93 27 06 	sts	0x0627, r18	; 0x800627 <txCANMsgSensorData+0x3>

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
	
	if(blockageDataBufferTail != blockageDataBufferHead)
    1f7e:	9e 17       	cp	r25, r30
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <retransmitBlockageData+0x14a>
    1f82:	47 c0       	rjmp	.+142    	; 0x2012 <retransmitBlockageData+0x1d8>
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1f84:	8b 5f       	subi	r24, 0xFB	; 251
    1f86:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <blockageDataBufferHead>
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	ef 5f       	subi	r30, 0xFF	; 255
    1f8e:	fa 4f       	sbci	r31, 0xFA	; 250
    1f90:	80 81       	ld	r24, Z
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
            txCANMsgSensorData[2] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[3] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[4] = popBlockageDataBuffer();// Blockage data
    1f92:	80 93 28 06 	sts	0x0628, r24	; 0x800628 <txCANMsgSensorData+0x4>
            sei();
    1f96:	78 94       	sei
            scPeriodicCANTx.dlc = 5;
    1f98:	85 e0       	ldi	r24, 0x05	; 5
    1f9a:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <scPeriodicCANTx+0x6>
            scPeriodicCANTx.id.std = CANID_ACTIVE_BLOCKAGE;
    1f9e:	82 e0       	ldi	r24, 0x02	; 2
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <scPeriodicCANTx+0x3>
    1fa6:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <scPeriodicCANTx+0x2>

            if(can_cmd(&scPeriodicCANTx) != CAN_CMD_ACCEPTED)
    1faa:	87 e3       	ldi	r24, 0x37	; 55
    1fac:	96 e0       	ldi	r25, 0x06	; 6
    1fae:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    1fb2:	88 23       	and	r24, r24
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <retransmitBlockageData+0x17e>
    1fb6:	86 cf       	rjmp	.-244    	; 0x1ec4 <retransmitBlockageData+0x8a>
            {
                // Abort the TX request
                scPeriodicCANTx.cmd = CMD_ABORT;
    1fb8:	8c e0       	ldi	r24, 0x0C	; 12
    1fba:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <scPeriodicCANTx+0x1>
                can_cmd(&scPeriodicCANTx);
    1fbe:	87 e3       	ldi	r24, 0x37	; 55
    1fc0:	96 e0       	ldi	r25, 0x06	; 6
    1fc2:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
                scPeriodicCANTx.cmd = CMD_TX_DATA;
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <scPeriodicCANTx+0x1>
    1fcc:	08 95       	ret
 	        {
     	        can_retry--;
 	        }
 	        if(can_retry == 0)
 	        {
     	        canRetryFailCount++;
    1fce:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <canRetryFailCount>
    1fd2:	8f 5f       	subi	r24, 0xFF	; 255
     	        if(canRetryFailCount > 50)
    1fd4:	83 33       	cpi	r24, 0x33	; 51
    1fd6:	18 f4       	brcc	.+6      	; 0x1fde <retransmitBlockageData+0x1a4>
 	        {
     	        can_retry--;
 	        }
 	        if(can_retry == 0)
 	        {
     	        canRetryFailCount++;
    1fd8:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <canRetryFailCount>
    1fdc:	08 95       	ret
     	        if(canRetryFailCount > 50)
     	        {
         	        canRetryFailCount = 0;
    1fde:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <canRetryFailCount>
         	        initCAN();
    1fe2:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <initCAN>
     	        return;
 	        }
 	        canRetryFailCount = 0;
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
    1fe6:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <txCANMsgSensorData>
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
    1fea:	10 92 25 06 	sts	0x0625, r1	; 0x800625 <txCANMsgSensorData+0x1>
            txCANMsgSensorData[2] = popBlockageDataBuffer(); // Serial Num 
    1fee:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <txCANMsgSensorData+0x2>
            txCANMsgSensorData[3] = popBlockageDataBuffer(); // Serial Num 
    1ff2:	10 92 27 06 	sts	0x0627, r1	; 0x800627 <txCANMsgSensorData+0x3>
    //sei();
}

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	cc cf       	rjmp	.-104    	; 0x1f92 <retransmitBlockageData+0x158>
	
	if(blockageDataBufferTail != blockageDataBufferHead)
	{
		ret = blockageDataBuffer[blockageDataBufferHead++];
    1ffa:	90 93 00 05 	sts	0x0500, r25	; 0x800500 <blockageDataBufferHead>
    //sei();
}

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	5d cf       	rjmp	.-326    	; 0x1ebc <retransmitBlockageData+0x82>
 	        }
 	        canRetryFailCount = 0;
            // Fill the data bytes
            cli();
            txCANMsgSensorData[0] = popBlockageDataBuffer(); // Serial Num 
            txCANMsgSensorData[1] = popBlockageDataBuffer(); // Serial Num
    2002:	10 92 25 06 	sts	0x0625, r1	; 0x800625 <txCANMsgSensorData+0x1>
            txCANMsgSensorData[2] = popBlockageDataBuffer(); // Serial Num 
    2006:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <txCANMsgSensorData+0x2>
            txCANMsgSensorData[3] = popBlockageDataBuffer(); // Serial Num 
    200a:	10 92 27 06 	sts	0x0627, r1	; 0x800627 <txCANMsgSensorData+0x3>
    //sei();
}

static BYTE popBlockageDataBuffer(void)
{
	BYTE ret = 0x00;
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	c0 cf       	rjmp	.-128    	; 0x1f92 <retransmitBlockageData+0x158>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	be cf       	rjmp	.-132    	; 0x1f92 <retransmitBlockageData+0x158>

00002016 <__vector_18>:
	return ret;
}

// Interrupt handler for CAN module
ISR(CAN_INT_vect)
{
    2016:	1f 92       	push	r1
    2018:	0f 92       	push	r0
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	0f 92       	push	r0
    201e:	11 24       	eor	r1, r1
    2020:	2f 92       	push	r2
    2022:	3f 92       	push	r3
    2024:	4f 92       	push	r4
    2026:	5f 92       	push	r5
    2028:	6f 92       	push	r6
    202a:	7f 92       	push	r7
    202c:	8f 92       	push	r8
    202e:	af 92       	push	r10
    2030:	bf 92       	push	r11
    2032:	cf 92       	push	r12
    2034:	df 92       	push	r13
    2036:	ef 92       	push	r14
    2038:	ff 92       	push	r15
    203a:	1f 93       	push	r17
    203c:	2f 93       	push	r18
    203e:	3f 93       	push	r19
    2040:	4f 93       	push	r20
    2042:	5f 93       	push	r21
    2044:	6f 93       	push	r22
    2046:	7f 93       	push	r23
    2048:	8f 93       	push	r24
    204a:	9f 93       	push	r25
    204c:	af 93       	push	r26
    204e:	bf 93       	push	r27
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	ef 93       	push	r30
    2056:	ff 93       	push	r31
   unsigned int id;       /* can_data index */
   BYTE byI;
   BYTE byCtr;
   BYTE flags;

   BYTE pageSave = CANPAGE;
    2058:	70 90 ed 00 	lds	r7, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>

   for (byI = 2; byI <= 5; byI++)
    205c:	12 e0       	ldi	r17, 0x02	; 2
   {
	   CANPAGE = (byI << 4);    /*  select channel 2/3/4/5 to see if it is Rx interrupt */
	   if((CANSTMOB & MOB_RX_COMPLETED) == MOB_RX_COMPLETED)
	   {
	      CANTrafficDetected = 1;
    205e:	88 24       	eor	r8, r8
    2060:	83 94       	inc	r8
    2062:	c8 e1       	ldi	r28, 0x18	; 24
    2064:	d6 e0       	ldi	r29, 0x06	; 6
                    break;
                 
                 case CANID_PROG_DATA_ACK:
                    // Re-transmit to the display
                    CANDataRequestFlags |= 0x02;
                    TOGGLE_ROW3_LED;
    2066:	80 e1       	ldi	r24, 0x10	; 16
    2068:	58 2e       	mov	r5, r24
    206a:	91 e1       	ldi	r25, 0x11	; 17
    206c:	e9 2e       	mov	r14, r25
    206e:	96 e0       	ldi	r25, 0x06	; 6
    2070:	f9 2e       	mov	r15, r25
                case CANID_WRITE_HW_PART_NUM_2:
                    for (byCtr = 0; byCtr < 5; byCtr++)
                    {
                        scabyCANEeBuff[byCtr] = CANMSG;
                    }
                    sceCANEeWriteState = EE_WRITE_HW_PART_NUM_2;
    2072:	24 e0       	ldi	r18, 0x04	; 4
    2074:	62 2e       	mov	r6, r18
    2076:	34 e1       	ldi	r19, 0x14	; 20
    2078:	23 2e       	mov	r2, r19
    207a:	36 e0       	ldi	r19, 0x06	; 6
    207c:	33 2e       	mov	r3, r19
    207e:	4b e1       	ldi	r20, 0x1B	; 27
    2080:	a4 2e       	mov	r10, r20
    2082:	46 e0       	ldi	r20, 0x06	; 6
    2084:	b4 2e       	mov	r11, r20
    2086:	5c e1       	ldi	r21, 0x1C	; 28
    2088:	c5 2e       	mov	r12, r21
    208a:	56 e0       	ldi	r21, 0x06	; 6
    208c:	d5 2e       	mov	r13, r21

   BYTE pageSave = CANPAGE;

   for (byI = 2; byI <= 5; byI++)
   {
	   CANPAGE = (byI << 4);    /*  select channel 2/3/4/5 to see if it is Rx interrupt */
    208e:	81 2f       	mov	r24, r17
    2090:	82 95       	swap	r24
    2092:	80 7f       	andi	r24, 0xF0	; 240
    2094:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
	   if((CANSTMOB & MOB_RX_COMPLETED) == MOB_RX_COMPLETED)
    2098:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    209c:	85 ff       	sbrs	r24, 5
    209e:	17 c0       	rjmp	.+46     	; 0x20ce <__vector_18+0xb8>
	   {
	      CANTrafficDetected = 1;
    20a0:	80 92 07 06 	sts	0x0607, r8	; 0x800607 <CANTrafficDetected>
          
          id = (((int)(CANIDT2)) >> 5) + (((int)(CANIDT1)) << 3);       // V2.0 part A
    20a4:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    20a8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>

            //Now take appropriate action based on id and data received
			switch (id)
    20ac:	e2 95       	swap	r30
    20ae:	e6 95       	lsr	r30
    20b0:	e7 70       	andi	r30, 0x07	; 7
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	98 e0       	ldi	r25, 0x08	; 8
    20b6:	89 9f       	mul	r24, r25
    20b8:	e0 0d       	add	r30, r0
    20ba:	f1 1d       	adc	r31, r1
    20bc:	11 24       	eor	r1, r1
    20be:	32 97       	sbiw	r30, 0x02	; 2
    20c0:	ef 37       	cpi	r30, 0x7F	; 127
    20c2:	f1 05       	cpc	r31, r1
    20c4:	48 f4       	brcc	.+18     	; 0x20d8 <__vector_18+0xc2>
    20c6:	ea 5b       	subi	r30, 0xBA	; 186
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <__tablejump2__>
#endif				 
               default:	 				  
				   break;
		    }
	   }
	   else if (CANSTMOB & MOB_NOT_REACHED) //error in MOB 1
    20ce:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
    20d2:	8f 71       	andi	r24, 0x1F	; 31
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <__vector_18+0xc2>
	   {
		  _NOP();
    20d6:	00 00       	nop
	   }
	   CANSTMOB = 0x00;                             /* reset channel 0 status */
    20d8:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
	   CANCDMOB = DLC_MAX;                         /* receive 8 bytes */
    20dc:	88 e0       	ldi	r24, 0x08	; 8
    20de:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	   CANCDMOB |= CH_RxENA;                       /* reception enable */
    20e2:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    20e6:	80 68       	ori	r24, 0x80	; 128
    20e8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
	   CANGIT = CANGIT;                            /* reset all flags */
    20ec:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
    20f0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f00da>
   BYTE byCtr;
   BYTE flags;

   BYTE pageSave = CANPAGE;

   for (byI = 2; byI <= 5; byI++)
    20f4:	1f 5f       	subi	r17, 0xFF	; 255
    20f6:	16 30       	cpi	r17, 0x06	; 6
    20f8:	51 f6       	brne	.-108    	; 0x208e <__vector_18+0x78>
	   CANSTMOB = 0x00;                             /* reset channel 0 status */
	   CANCDMOB = DLC_MAX;                         /* receive 8 bytes */
	   CANCDMOB |= CH_RxENA;                       /* reception enable */
	   CANGIT = CANGIT;                            /* reset all flags */
   } 
   CANPAGE = pageSave;	   
    20fa:	70 92 ed 00 	sts	0x00ED, r7	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
}
    20fe:	ff 91       	pop	r31
    2100:	ef 91       	pop	r30
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	bf 91       	pop	r27
    2108:	af 91       	pop	r26
    210a:	9f 91       	pop	r25
    210c:	8f 91       	pop	r24
    210e:	7f 91       	pop	r23
    2110:	6f 91       	pop	r22
    2112:	5f 91       	pop	r21
    2114:	4f 91       	pop	r20
    2116:	3f 91       	pop	r19
    2118:	2f 91       	pop	r18
    211a:	1f 91       	pop	r17
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	8f 90       	pop	r8
    212a:	7f 90       	pop	r7
    212c:	6f 90       	pop	r6
    212e:	5f 90       	pop	r5
    2130:	4f 90       	pop	r4
    2132:	3f 90       	pop	r3
    2134:	2f 90       	pop	r2
    2136:	0f 90       	pop	r0
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	0f 90       	pop	r0
    213c:	1f 90       	pop	r1
    213e:	18 95       	reti
    2140:	e4 e1       	ldi	r30, 0x14	; 20
    2142:	f6 e0       	ldi	r31, 0x06	; 6
			{
			   case CANID_SENSOR_DATA:
                    // Collect sensor data and buffer for WiFi Tx
		            for (byCtr = 0; byCtr < 6; byCtr++)
		            {
    		            scabyCANRxBuff[byCtr] = CANMSG;
    2144:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2148:	81 93       	st	Z+, r24
            //Now take appropriate action based on id and data received
			switch (id)
			{
			   case CANID_SENSOR_DATA:
                    // Collect sensor data and buffer for WiFi Tx
		            for (byCtr = 0; byCtr < 6; byCtr++)
    214a:	86 e0       	ldi	r24, 0x06	; 6
    214c:	ea 31       	cpi	r30, 0x1A	; 26
    214e:	f8 07       	cpc	r31, r24
    2150:	c9 f7       	brne	.-14     	; 0x2144 <__vector_18+0x12e>
		            {
    		            scabyCANRxBuff[byCtr] = CANMSG;
		            }                       
					addFlowRateMessage(scabyCANRxBuff);
    2152:	84 e1       	ldi	r24, 0x14	; 20
    2154:	96 e0       	ldi	r25, 0x06	; 6
    2156:	0e 94 03 06 	call	0xc06	; 0xc06 <addFlowRateMessage>
                    break;
    215a:	be cf       	rjmp	.-132    	; 0x20d8 <__vector_18+0xc2>
    215c:	a4 e1       	ldi	r26, 0x14	; 20
    215e:	b6 e0       	ldi	r27, 0x06	; 6
	      CANTrafficDetected = 1;
          
          id = (((int)(CANIDT2)) >> 5) + (((int)(CANIDT1)) << 3);       // V2.0 part A

            //Now take appropriate action based on id and data received
			switch (id)
    2160:	fd 01       	movw	r30, r26
                
               case CANID_ACTIVE_BLOCKAGE:
                // Check module ID and handle active blockage here...
		            for (byCtr = 0; byCtr < 5; byCtr++)
		            {
    		            scabyCANRxBuff[byCtr] = CANMSG;
    2162:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2166:	81 93       	st	Z+, r24
					addFlowRateMessage(scabyCANRxBuff);
                    break;
                
               case CANID_ACTIVE_BLOCKAGE:
                // Check module ID and handle active blockage here...
		            for (byCtr = 0; byCtr < 5; byCtr++)
    2168:	96 e0       	ldi	r25, 0x06	; 6
    216a:	e9 31       	cpi	r30, 0x19	; 25
    216c:	f9 07       	cpc	r31, r25
    216e:	c9 f7       	brne	.-14     	; 0x2162 <__vector_18+0x14c>
    2170:	e0 91 01 06 	lds	r30, 0x0601	; 0x800601 <serialNumPtr>
    2174:	f0 91 02 06 	lds	r31, 0x0602	; 0x800602 <serialNumPtr+0x1>
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    2178:	8d 91       	ld	r24, X+
    217a:	91 91       	ld	r25, Z+
    217c:	98 13       	cpse	r25, r24
    217e:	ac cf       	rjmp	.-168    	; 0x20d8 <__vector_18+0xc2>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    2180:	ca 17       	cp	r28, r26
    2182:	db 07       	cpc	r29, r27
    2184:	c9 f7       	brne	.-14     	; 0x2178 <__vector_18+0x162>
    		            scabyCANRxBuff[byCtr] = CANMSG;
		            }
                    // Check if the blockage is on this module
                    if(compareSerialNums(scabyCANRxBuff, serialNumPtr))
                    {
                        storeActiveBlockageData(scabyCANRxBuff[4]);
    2186:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <scabyCANRxBuff+0x4>
    218a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <storeActiveBlockageData>
    218e:	a4 cf       	rjmp	.-184    	; 0x20d8 <__vector_18+0xc2>
                    SET_WIFI_RESET_LOW;
                    break;

                case CANID_ENABLE_WIFI:
                    // Turn on wifi module      
                    SET_WIFI_RESET_HIGH;                 
    2190:	59 98       	cbi	0x0b, 1	; 11
                    break;
    2192:	a2 cf       	rjmp	.-188    	; 0x20d8 <__vector_18+0xc2>
                    }                   
                    break;
                    
               case CANID_DISABLE_WIFI:
                    // Shut off wifi module
                    SET_WIFI_RESET_LOW;
    2194:	59 9a       	sbi	0x0b, 1	; 11
                    break;
    2196:	a0 cf       	rjmp	.-192    	; 0x20d8 <__vector_18+0xc2>
                    sceCANEeWriteState = EE_WRITE_HW_PART_NUM_2;
                    break;
                 
                 case CANID_PROG_DATA_ACK:
                    // Re-transmit to the display
                    CANDataRequestFlags |= 0x02;
    2198:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <CANDataRequestFlags>
    219c:	82 60       	ori	r24, 0x02	; 2
    219e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <CANDataRequestFlags>
                    TOGGLE_ROW3_LED;
    21a2:	85 b1       	in	r24, 0x05	; 5
    21a4:	85 25       	eor	r24, r5
    21a6:	85 b9       	out	0x05, r24	; 5
                    break;
    21a8:	97 cf       	rjmp	.-210    	; 0x20d8 <__vector_18+0xc2>
    return CANDataRequestFlags;
}

void setCANDataRequestFlags(BYTE val)
{
    CANDataRequestFlags = val;
    21aa:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <CANDataRequestFlags>
    21ae:	80 64       	ori	r24, 0x40	; 64
    21b0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <CANDataRequestFlags>
                    break;

                 case CANID_SENSOR_INVALID_PROG:
                    flags = getCANDataRequestFlags();				 
                    setCANDataRequestFlags(flags | BIT_DATA_RX_BITMASK);
                    setLastActiveBIT(2); // BIT id '2'
    21b4:	82 e0       	ldi	r24, 0x02	; 2
    21b6:	0e 94 9e 08 	call	0x113c	; 0x113c <setLastActiveBIT>
                    break;
    21ba:	8e cf       	rjmp	.-228    	; 0x20d8 <__vector_18+0xc2>
    21bc:	e4 e1       	ldi	r30, 0x14	; 20
    21be:	f6 e0       	ldi	r31, 0x06	; 6
                    break;
                    
               case CANID_EE_DATA:
		           for (byCtr = 0; byCtr < 8; byCtr++)
		           {
				     scabyCANRxBuff[byCtr] = CANMSG;
    21c0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    21c4:	81 93       	st	Z+, r24
                    // Turn on wifi module      
                    SET_WIFI_RESET_HIGH;                 
                    break;
                    
               case CANID_EE_DATA:
		           for (byCtr = 0; byCtr < 8; byCtr++)
    21c6:	ce 16       	cp	r12, r30
    21c8:	df 06       	cpc	r13, r31
    21ca:	d1 f7       	brne	.-12     	; 0x21c0 <__vector_18+0x1aa>
    21cc:	85 cf       	rjmp	.-246    	; 0x20d8 <__vector_18+0xc2>
                    }                    
                    storeConnectedSensor(&scabyCANRxBuff[0]);
                    break;

                 case CANID_SENSOR_BIT_RESULT:
                    scabyCANRxBuff[0] = CANMSG;
    21ce:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    21d2:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <scabyCANRxBuff>
    return CANDataRequestFlags;
}

void setCANDataRequestFlags(BYTE val)
{
    CANDataRequestFlags = val;
    21d6:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <CANDataRequestFlags>
    21da:	90 64       	ori	r25, 0x40	; 64
    21dc:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <CANDataRequestFlags>

                 case CANID_SENSOR_BIT_RESULT:
                    scabyCANRxBuff[0] = CANMSG;
                    flags = getCANDataRequestFlags();					
                    setCANDataRequestFlags(flags | BIT_DATA_RX_BITMASK);
                    setLastActiveBIT(scabyCANRxBuff[0]);
    21e0:	0e 94 9e 08 	call	0x113c	; 0x113c <setLastActiveBIT>
                    break;
    21e4:	79 cf       	rjmp	.-270    	; 0x20d8 <__vector_18+0xc2>
                        jumpToBootloader();
                    }         
                    break;

                case CANID_REQ_SENSOR_VERSIONS:
                    CANDataRequestFlags |= 0x01;
    21e6:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <CANDataRequestFlags>
    21ea:	81 60       	ori	r24, 0x01	; 1
    21ec:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <CANDataRequestFlags>
                    break;
    21f0:	73 cf       	rjmp	.-282    	; 0x20d8 <__vector_18+0xc2>

               case CANID_START_SENSOR_FW_UPDATE:
                    // Check module Serial Num and prep for update here...
                    for (byCtr = 0; byCtr < 4; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    21f2:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    21f6:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <scabyCANRxBuff>
    21fa:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    21fe:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <scabyCANRxBuff+0x1>
    2202:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2206:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <scabyCANRxBuff+0x2>
    220a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    220e:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <scabyCANRxBuff+0x3>
    2212:	e4 e1       	ldi	r30, 0x14	; 20
    2214:	f6 e0       	ldi	r31, 0x06	; 6
    2216:	a0 91 01 06 	lds	r26, 0x0601	; 0x800601 <serialNumPtr>
    221a:	b0 91 02 06 	lds	r27, 0x0602	; 0x800602 <serialNumPtr+0x1>
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    221e:	91 91       	ld	r25, Z+
    2220:	8d 91       	ld	r24, X+
    2222:	98 13       	cpse	r25, r24
    2224:	59 cf       	rjmp	.-334    	; 0x20d8 <__vector_18+0xc2>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    2226:	ce 17       	cp	r28, r30
    2228:	df 07       	cpc	r29, r31
    222a:	c9 f7       	brne	.-14     	; 0x221e <__vector_18+0x208>
                        scabyCANRxBuff[byCtr] = CANMSG;
                    }

                    if(compareSerialNums(scabyCANRxBuff, serialNumPtr))
                    {          
                        _CLI();
    222c:	f8 94       	cli
                        // jump to bootloader...
						eeprom_busy_wait();
    222e:	f9 99       	sbic	0x1f, 1	; 31
    2230:	fe cf       	rjmp	.-4      	; 0x222e <__vector_18+0x218>
						while(eeprom_read_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC) != 0x01)
    2232:	8a e6       	ldi	r24, 0x6A	; 106
    2234:	97 e0       	ldi	r25, 0x07	; 7
    2236:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	09 f4       	brne	.+2      	; 0x2240 <__vector_18+0x22a>
    223e:	0b c1       	rjmp	.+534    	; 0x2456 <__vector_18+0x440>
						{
							eeprom_busy_wait();
    2240:	f9 99       	sbic	0x1f, 1	; 31
    2242:	fe cf       	rjmp	.-4      	; 0x2240 <__vector_18+0x22a>
							eeprom_write_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC, 0x01);
    2244:	61 e0       	ldi	r22, 0x01	; 1
    2246:	8a e6       	ldi	r24, 0x6A	; 106
    2248:	97 e0       	ldi	r25, 0x07	; 7
    224a:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
							eeprom_busy_wait();
    224e:	f9 99       	sbic	0x1f, 1	; 31
    2250:	fe cf       	rjmp	.-4      	; 0x224e <__vector_18+0x238>
    2252:	ef cf       	rjmp	.-34     	; 0x2232 <__vector_18+0x21c>
    return CANDataRequestFlags;
}

void setCANDataRequestFlags(BYTE val)
{
    CANDataRequestFlags = val;
    2254:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <CANDataRequestFlags>
    2258:	84 60       	ori	r24, 0x04	; 4
    225a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <CANDataRequestFlags>
    225e:	3c cf       	rjmp	.-392    	; 0x20d8 <__vector_18+0xc2>
    2260:	e4 e1       	ldi	r30, 0x14	; 20
    2262:	f6 e0       	ldi	r31, 0x06	; 6
                    break;

                case CANID_DEVICE_INFO:
                    for (byCtr = 0; byCtr < 8; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    2264:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2268:	81 93       	st	Z+, r24
                    }
                    sceCANEeWriteState = EE_WRITE_SERIAL;
                    break;

                case CANID_DEVICE_INFO:
                    for (byCtr = 0; byCtr < 8; byCtr++)
    226a:	96 e0       	ldi	r25, 0x06	; 6
    226c:	ec 31       	cpi	r30, 0x1C	; 28
    226e:	f9 07       	cpc	r31, r25
    2270:	c9 f7       	brne	.-14     	; 0x2264 <__vector_18+0x24e>
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
                    }                    
                    storeDeviceInfoData(&scabyCANRxBuff[0]);
    2272:	84 e1       	ldi	r24, 0x14	; 20
    2274:	96 e0       	ldi	r25, 0x06	; 6
    2276:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <storeDeviceInfoData>
                    break;
    227a:	2e cf       	rjmp	.-420    	; 0x20d8 <__vector_18+0xc2>
    227c:	ec e0       	ldi	r30, 0x0C	; 12
    227e:	f6 e0       	ldi	r31, 0x06	; 6
                    break;

                case CANID_WRITE_SERIAL_NUM:
                    for (byCtr = 0; byCtr < 8; byCtr++)
                    {
	                    scabyCANEeBuff[byCtr] = CANMSG;
    2280:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2284:	81 93       	st	Z+, r24
                    copyCalStatusDataToTxBuffer(scabyCANRxBuff);
                    calStatusResponseCount++;
                    break;

                case CANID_WRITE_SERIAL_NUM:
                    for (byCtr = 0; byCtr < 8; byCtr++)
    2286:	2e 16       	cp	r2, r30
    2288:	3f 06       	cpc	r3, r31
    228a:	d1 f7       	brne	.-12     	; 0x2280 <__vector_18+0x26a>
                    {
	                    scabyCANEeBuff[byCtr] = CANMSG;
                    }
                    sceCANEeWriteState = EE_WRITE_SERIAL;
    228c:	80 92 0b 06 	sts	0x060B, r8	; 0x80060b <sceCANEeWriteState>
                    break;
    2290:	23 cf       	rjmp	.-442    	; 0x20d8 <__vector_18+0xc2>
    2292:	ec e0       	ldi	r30, 0x0C	; 12
    2294:	f6 e0       	ldi	r31, 0x06	; 6
                    break;

                case CANID_WRITE_HW_VERSION:
                    for (byCtr = 0; byCtr < 5; byCtr++)
                    {
	                    scabyCANEeBuff[byCtr] = CANMSG;
    2296:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    229a:	81 93       	st	Z+, r24
                    }                    
                    storeDeviceInfoData(&scabyCANRxBuff[0]);
                    break;

                case CANID_WRITE_HW_VERSION:
                    for (byCtr = 0; byCtr < 5; byCtr++)
    229c:	ee 16       	cp	r14, r30
    229e:	ff 06       	cpc	r15, r31
    22a0:	d1 f7       	brne	.-12     	; 0x2296 <__vector_18+0x280>
                    {
	                    scabyCANEeBuff[byCtr] = CANMSG;
                    }
                    sceCANEeWriteState = EE_WRITE_HW_VER;              
    22a2:	82 e0       	ldi	r24, 0x02	; 2
    22a4:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <sceCANEeWriteState>
                    break;
    22a8:	17 cf       	rjmp	.-466    	; 0x20d8 <__vector_18+0xc2>
                    CANDataRequestFlags |= 0x02;
                    TOGGLE_ROW3_LED;
                    break;

                 case CANID_DISABLE_SENSOR_DATA:
                    setSensorDataDisableFlag();
    22aa:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <setSensorDataDisableFlag>
                    break;
    22ae:	14 cf       	rjmp	.-472    	; 0x20d8 <__vector_18+0xc2>

                 case CANID_ENABLE_SENSOR_DATA:
                    clearSensorDataDisableFlag();
    22b0:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <clearSensorDataDisableFlag>
                    break;   
    22b4:	11 cf       	rjmp	.-478    	; 0x20d8 <__vector_18+0xc2>
                case CANID_REQ_SENSOR_VERSIONS:
                    CANDataRequestFlags |= 0x01;
                    break;

                case CANID_START_CAL:
                    startSensorCalibration();
    22b6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <startSensorCalibration>
                    break;
    22ba:	0e cf       	rjmp	.-484    	; 0x20d8 <__vector_18+0xc2>
    22bc:	e4 e1       	ldi	r30, 0x14	; 20
    22be:	f6 e0       	ldi	r31, 0x06	; 6
	      CANTrafficDetected = 1;
          
          id = (((int)(CANIDT2)) >> 5) + (((int)(CANIDT1)) << 3);       // V2.0 part A

            //Now take appropriate action based on id and data received
			switch (id)
    22c0:	df 01       	movw	r26, r30

                case CANID_CAL_STATUS:
                    // Store all status data to retransmit to display 
                    for (byCtr = 0; byCtr < 7; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    22c2:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    22c6:	8d 93       	st	X+, r24
                    startSensorCalibration();
                    break;

                case CANID_CAL_STATUS:
                    // Store all status data to retransmit to display 
                    for (byCtr = 0; byCtr < 7; byCtr++)
    22c8:	86 e0       	ldi	r24, 0x06	; 6
    22ca:	ab 31       	cpi	r26, 0x1B	; 27
    22cc:	b8 07       	cpc	r27, r24
    22ce:	c9 f7       	brne	.-14     	; 0x22c2 <__vector_18+0x2ac>
void copyCalStatusDataToTxBuffer(BYTE* newDataPtr)
{
    BYTE i;
    BYTE* txBufferPtr;

    txBufferPtr = (calStatusBufferPtr + calStatusBufferIndex);
    22d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <calStatusBufferIndex>
    22d4:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <calStatusBufferPtr>
    22d8:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <calStatusBufferPtr+0x1>
    22dc:	a9 0f       	add	r26, r25
    22de:	b1 1d       	adc	r27, r1

    for(i = 0; i < 7; i++)
    {
        *(txBufferPtr + i) = *(newDataPtr + i);
    22e0:	81 91       	ld	r24, Z+
    22e2:	8d 93       	st	X+, r24
    BYTE i;
    BYTE* txBufferPtr;

    txBufferPtr = (calStatusBufferPtr + calStatusBufferIndex);

    for(i = 0; i < 7; i++)
    22e4:	ae 16       	cp	r10, r30
    22e6:	bf 06       	cpc	r11, r31
    22e8:	d9 f7       	brne	.-10     	; 0x22e0 <__vector_18+0x2ca>
    {
        *(txBufferPtr + i) = *(newDataPtr + i);
    }

    calStatusBufferIndex += 7;
    22ea:	99 5f       	subi	r25, 0xF9	; 249
    22ec:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <calStatusBufferIndex>
                    for (byCtr = 0; byCtr < 7; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
                    }
                    copyCalStatusDataToTxBuffer(scabyCANRxBuff);
                    calStatusResponseCount++;
    22f0:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <calStatusResponseCount>
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <calStatusResponseCount>
                    break;
    22fa:	ee ce       	rjmp	.-548    	; 0x20d8 <__vector_18+0xc2>
                    break;

                 case CANID_PING_RESPONSE:
                    for (byCtr = 0; byCtr < 4; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    22fc:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2300:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <scabyCANRxBuff>
    2304:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2308:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <scabyCANRxBuff+0x1>
    230c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2310:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <scabyCANRxBuff+0x2>
    2314:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2318:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <scabyCANRxBuff+0x3>
{
    BYTE i;
    BYTE matchFound = 0;
    BYTE nextIndex;

    for(i = 0; i < connectedSensorCount; i++)
    231c:	40 90 a1 04 	lds	r4, 0x04A1	; 0x8004a1 <connectedSensorCount>
    2320:	44 20       	and	r4, r4
    2322:	09 f4       	brne	.+2      	; 0x2326 <__vector_18+0x310>
    2324:	9b c0       	rjmp	.+310    	; 0x245c <__vector_18+0x446>
    2326:	22 ea       	ldi	r18, 0xA2	; 162
    2328:	34 e0       	ldi	r19, 0x04	; 4
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	e4 e1       	ldi	r30, 0x14	; 20
    232e:	f6 e0       	ldi	r31, 0x06	; 6
    2330:	d9 01       	movw	r26, r18
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    2332:	91 91       	ld	r25, Z+
    2334:	8d 91       	ld	r24, X+
    2336:	98 13       	cpse	r25, r24
    2338:	08 c0       	rjmp	.+16     	; 0x234a <__vector_18+0x334>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    233a:	ce 17       	cp	r28, r30
    233c:	df 07       	cpc	r29, r31
    233e:	09 f4       	brne	.+2      	; 0x2342 <__vector_18+0x32c>
    2340:	cb ce       	rjmp	.-618    	; 0x20d8 <__vector_18+0xc2>
    {
        if((*(num1 + i)) == (*(num2 + i)))
    2342:	91 91       	ld	r25, Z+
    2344:	8d 91       	ld	r24, X+
    2346:	98 17       	cp	r25, r24
    2348:	c1 f3       	breq	.-16     	; 0x233a <__vector_18+0x324>
{
    BYTE i;
    BYTE matchFound = 0;
    BYTE nextIndex;

    for(i = 0; i < connectedSensorCount; i++)
    234a:	4f 5f       	subi	r20, 0xFF	; 255
    234c:	2c 5f       	subi	r18, 0xFC	; 252
    234e:	3f 4f       	sbci	r19, 0xFF	; 255
    2350:	44 12       	cpse	r4, r20
    2352:	ec cf       	rjmp	.-40     	; 0x232c <__vector_18+0x316>
    2354:	84 2d       	mov	r24, r4
    2356:	88 0f       	add	r24, r24
    2358:	88 0f       	add	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	bc 01       	movw	r22, r24
    235e:	6f 5f       	subi	r22, 0xFF	; 255
    2360:	7f 4f       	sbci	r23, 0xFF	; 255
    2362:	ac 01       	movw	r20, r24
    2364:	4e 5f       	subi	r20, 0xFE	; 254
    2366:	5f 4f       	sbci	r21, 0xFF	; 255
    2368:	9c 01       	movw	r18, r24
    236a:	2d 5f       	subi	r18, 0xFD	; 253
    236c:	3f 4f       	sbci	r19, 0xFF	; 255
    236e:	f1 e0       	ldi	r31, 0x01	; 1
    2370:	f4 0d       	add	r31, r4
        }
    }
    if(!matchFound)
    {
        nextIndex = connectedSensorCount * 4;
        connectedSensorSerialNums[nextIndex] = *serialNumPtr;
    2372:	dc 01       	movw	r26, r24
    2374:	ae 55       	subi	r26, 0x5E	; 94
    2376:	bb 4f       	sbci	r27, 0xFB	; 251
    2378:	e0 91 14 06 	lds	r30, 0x0614	; 0x800614 <scabyCANRxBuff>
    237c:	ec 93       	st	X, r30
        connectedSensorSerialNums[nextIndex + 1] = *(serialNumPtr + 1);
    237e:	db 01       	movw	r26, r22
    2380:	ae 55       	subi	r26, 0x5E	; 94
    2382:	bb 4f       	sbci	r27, 0xFB	; 251
    2384:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <scabyCANRxBuff+0x1>
    2388:	8c 93       	st	X, r24
        connectedSensorSerialNums[nextIndex + 2] = *(serialNumPtr + 2);
    238a:	da 01       	movw	r26, r20
    238c:	ae 55       	subi	r26, 0x5E	; 94
    238e:	bb 4f       	sbci	r27, 0xFB	; 251
    2390:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <scabyCANRxBuff+0x2>
    2394:	8c 93       	st	X, r24
        connectedSensorSerialNums[nextIndex + 3] = *(serialNumPtr + 3);
    2396:	d9 01       	movw	r26, r18
    2398:	ae 55       	subi	r26, 0x5E	; 94
    239a:	bb 4f       	sbci	r27, 0xFB	; 251
    239c:	80 91 17 06 	lds	r24, 0x0617	; 0x800617 <scabyCANRxBuff+0x3>
    23a0:	8c 93       	st	X, r24

        connectedSensorCount++;
    23a2:	f0 93 a1 04 	sts	0x04A1, r31	; 0x8004a1 <connectedSensorCount>
    23a6:	98 ce       	rjmp	.-720    	; 0x20d8 <__vector_18+0xc2>
    23a8:	ec e0       	ldi	r30, 0x0C	; 12
    23aa:	f6 e0       	ldi	r31, 0x06	; 6
                    break;

                case CANID_WRITE_HW_PART_NUM_1:
                    for (byCtr = 0; byCtr < 8; byCtr++)
                    {
                        scabyCANEeBuff[byCtr] = CANMSG;
    23ac:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    23b0:	81 93       	st	Z+, r24
                    }
                    sceCANEeWriteState = EE_WRITE_HW_VER;              
                    break;

                case CANID_WRITE_HW_PART_NUM_1:
                    for (byCtr = 0; byCtr < 8; byCtr++)
    23b2:	2e 16       	cp	r2, r30
    23b4:	3f 06       	cpc	r3, r31
    23b6:	d1 f7       	brne	.-12     	; 0x23ac <__vector_18+0x396>
                    {
                        scabyCANEeBuff[byCtr] = CANMSG;
                    }
                    sceCANEeWriteState = EE_WRITE_HW_PART_NUM_1;
    23b8:	83 e0       	ldi	r24, 0x03	; 3
    23ba:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <sceCANEeWriteState>
                    break;
    23be:	8c ce       	rjmp	.-744    	; 0x20d8 <__vector_18+0xc2>
                    break;

                 case CANID_ENABLE_DEBUG_DATA:
                    for (byCtr = 0; byCtr < 4; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    23c0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    23c4:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <scabyCANRxBuff>
    23c8:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    23cc:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <scabyCANRxBuff+0x1>
    23d0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    23d4:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <scabyCANRxBuff+0x2>
    23d8:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    23dc:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <scabyCANRxBuff+0x3>
    23e0:	e4 e1       	ldi	r30, 0x14	; 20
    23e2:	f6 e0       	ldi	r31, 0x06	; 6
    23e4:	a0 91 01 06 	lds	r26, 0x0601	; 0x800601 <serialNumPtr>
    23e8:	b0 91 02 06 	lds	r27, 0x0602	; 0x800602 <serialNumPtr+0x1>
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    23ec:	91 91       	ld	r25, Z+
    23ee:	8d 91       	ld	r24, X+
    23f0:	98 13       	cpse	r25, r24
    23f2:	72 ce       	rjmp	.-796    	; 0x20d8 <__vector_18+0xc2>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    23f4:	ce 17       	cp	r28, r30
    23f6:	df 07       	cpc	r29, r31
    23f8:	c9 f7       	brne	.-14     	; 0x23ec <__vector_18+0x3d6>
                        scabyCANRxBuff[byCtr] = CANMSG;
                    }

                    if(compareSerialNums(scabyCANRxBuff, serialNumPtr))
                    {
                        setEnableDebugFlag();
    23fa:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <setEnableDebugFlag>
    23fe:	6c ce       	rjmp	.-808    	; 0x20d8 <__vector_18+0xc2>
                    break;

                case CANID_DISABLE_DEBUG_DATA:
                    for (byCtr = 0; byCtr < 4; byCtr++)
                    {
                        scabyCANRxBuff[byCtr] = CANMSG;
    2400:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2404:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <scabyCANRxBuff>
    2408:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    240c:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <scabyCANRxBuff+0x1>
    2410:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2414:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <scabyCANRxBuff+0x2>
    2418:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    241c:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <scabyCANRxBuff+0x3>
    2420:	e4 e1       	ldi	r30, 0x14	; 20
    2422:	f6 e0       	ldi	r31, 0x06	; 6
    2424:	a0 91 01 06 	lds	r26, 0x0601	; 0x800601 <serialNumPtr>
    2428:	b0 91 02 06 	lds	r27, 0x0602	; 0x800602 <serialNumPtr+0x1>
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    {
        if((*(num1 + i)) == (*(num2 + i)))
    242c:	91 91       	ld	r25, Z+
    242e:	8d 91       	ld	r24, X+
    2430:	98 13       	cpse	r25, r24
    2432:	52 ce       	rjmp	.-860    	; 0x20d8 <__vector_18+0xc2>
BYTE compareSerialNums(BYTE * num1, BYTE * num2)
{
    BYTE i;
    BYTE result = 0;
    
    for(i = 0; i < 4; i++)
    2434:	ce 17       	cp	r28, r30
    2436:	df 07       	cpc	r29, r31
    2438:	c9 f7       	brne	.-14     	; 0x242c <__vector_18+0x416>
                        scabyCANRxBuff[byCtr] = CANMSG;
                    }

                    if(compareSerialNums(scabyCANRxBuff, serialNumPtr))
                    {
                        clearEnableDebugFlag();
    243a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <clearEnableDebugFlag>
    243e:	4c ce       	rjmp	.-872    	; 0x20d8 <__vector_18+0xc2>
    2440:	ec e0       	ldi	r30, 0x0C	; 12
    2442:	f6 e0       	ldi	r31, 0x06	; 6
                    break;
                
                case CANID_WRITE_HW_PART_NUM_2:
                    for (byCtr = 0; byCtr < 5; byCtr++)
                    {
                        scabyCANEeBuff[byCtr] = CANMSG;
    2444:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2448:	81 93       	st	Z+, r24
                    }
                    sceCANEeWriteState = EE_WRITE_HW_PART_NUM_1;
                    break;
                
                case CANID_WRITE_HW_PART_NUM_2:
                    for (byCtr = 0; byCtr < 5; byCtr++)
    244a:	ee 16       	cp	r14, r30
    244c:	ff 06       	cpc	r15, r31
    244e:	d1 f7       	brne	.-12     	; 0x2444 <__vector_18+0x42e>
                    {
                        scabyCANEeBuff[byCtr] = CANMSG;
                    }
                    sceCANEeWriteState = EE_WRITE_HW_PART_NUM_2;
    2450:	60 92 0b 06 	sts	0x060B, r6	; 0x80060b <sceCANEeWriteState>
                    break;
    2454:	41 ce       	rjmp	.-894    	; 0x20d8 <__vector_18+0xc2>
						{
							eeprom_busy_wait();
							eeprom_write_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC, 0x01);
							eeprom_busy_wait();
						}
                        jumpToBootloader();
    2456:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <jumpToBootloader>
    245a:	3e ce       	rjmp	.-900    	; 0x20d8 <__vector_18+0xc2>
{
    BYTE i;
    BYTE matchFound = 0;
    BYTE nextIndex;

    for(i = 0; i < connectedSensorCount; i++)
    245c:	f1 e0       	ldi	r31, 0x01	; 1
    245e:	23 e0       	ldi	r18, 0x03	; 3
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	42 e0       	ldi	r20, 0x02	; 2
    2464:	50 e0       	ldi	r21, 0x00	; 0
    2466:	61 e0       	ldi	r22, 0x01	; 1
    2468:	70 e0       	ldi	r23, 0x00	; 0
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	81 cf       	rjmp	.-254    	; 0x2372 <__vector_18+0x35c>

00002470 <getCANTrafficDetected>:
// Returns flag that indicates whether any CAN
//  packets have been received since power-up.
BYTE getCANTrafficDetected(void)
{
    return CANTrafficDetected;
}
    2470:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <CANTrafficDetected>
    2474:	08 95       	ret

00002476 <resetConnectedSensors>:

// Clears counters associated with tracking
//  CAN bus-connected sensors.
void resetConnectedSensors(void)
{
    connectedSensorCount = 0;
    2476:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <connectedSensorCount>
    connectedSensorIndex = 0;
    247a:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <connectedSensorIndex>
    247e:	08 95       	ret

00002480 <sendNextTargetedDeviceInfoReq>:
// Sends a device info request to the next detected wired sensor
BYTE sendNextTargetedDeviceInfoReq(void)
{
    BYTE txCount = 0;
	
	if(connectedSensorIndex < connectedSensorCount)
    2480:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <connectedSensorIndex>
    2484:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <connectedSensorCount>
    2488:	92 17       	cp	r25, r18
    248a:	e8 f4       	brcc	.+58     	; 0x24c6 <sendNextTargetedDeviceInfoReq+0x46>
        // Note that wireless sensor's info is sent separately and is not included 
		//   in the connectedSensorIndex or connectedSensorCount

        for(txCount = 0; txCount < 2; txCount++)
		{
			sendCANGetDeviceInfoBySerial(&connectedSensorSerialNums[connectedSensorIndex * 4]);
    248c:	89 2f       	mov	r24, r25
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	8e 55       	subi	r24, 0x5E	; 94
    249a:	9b 4f       	sbci	r25, 0xFB	; 251
    249c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <sendCANGetDeviceInfoBySerial>
    24a0:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <connectedSensorIndex>
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	8e 55       	subi	r24, 0x5E	; 94
    24b0:	9b 4f       	sbci	r25, 0xFB	; 251
    24b2:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <sendCANGetDeviceInfoBySerial>
		}        
		connectedSensorIndex++;
    24b6:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <connectedSensorIndex>
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	98 0f       	add	r25, r24
    24be:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <connectedSensorIndex>
    24c2:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <connectedSensorCount>
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	92 17       	cp	r25, r18
    24ca:	08 f4       	brcc	.+2      	; 0x24ce <sendNextTargetedDeviceInfoReq+0x4e>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    24ce:	08 95       	ret

000024d0 <resendLastTargetedDeviceInfoReq>:

void resendLastTargetedDeviceInfoReq(void)
{
	BYTE txCount = 0;
	
	if(connectedSensorIndex > 0)
    24d0:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <connectedSensorIndex>
    24d4:	88 23       	and	r24, r24
    24d6:	a1 f0       	breq	.+40     	; 0x2500 <resendLastTargetedDeviceInfoReq+0x30>
	{
        for(txCount = 0; txCount < 2; txCount++)
        {
	        sendCANGetDeviceInfoBySerial(&connectedSensorSerialNums[(connectedSensorIndex - 1) * 4]);
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	82 56       	subi	r24, 0x62	; 98
    24e4:	9b 4f       	sbci	r25, 0xFB	; 251
    24e6:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <sendCANGetDeviceInfoBySerial>
    24ea:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <connectedSensorIndex>
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	82 56       	subi	r24, 0x62	; 98
    24fa:	9b 4f       	sbci	r25, 0xFB	; 251
    24fc:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <sendCANGetDeviceInfoBySerial>
    2500:	08 95       	ret

00002502 <getConnectedSensorCount>:
//  sensor modules as determined by a previous
//  ping request.
BYTE getConnectedSensorCount(void)
{
    return connectedSensorCount;
}
    2502:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <connectedSensorCount>
    2506:	08 95       	ret

00002508 <getCalStatusResponseCount>:
// Returns the number of calibration results
//  data packets received from the CAN bus. 
BYTE getCalStatusResponseCount(void)
{
    return calStatusResponseCount;
}
    2508:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <calStatusResponseCount>
    250c:	08 95       	ret

0000250e <clearCalStatusResponseCount>:

// Resets the calibration results counter and
//  corresponding results buffer index.
void clearCalStatusResponseCount(void)
{
    calStatusResponseCount = 0;
    250e:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <calStatusResponseCount>
    calStatusBufferIndex = 1; // Reserve the 1st byte for sensor count
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <calStatusBufferIndex>
    2518:	08 95       	ret

0000251a <copyCalStatusDataToTxBuffer>:
void copyCalStatusDataToTxBuffer(BYTE* newDataPtr)
{
    BYTE i;
    BYTE* txBufferPtr;

    txBufferPtr = (calStatusBufferPtr + calStatusBufferIndex);
    251a:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <calStatusBufferIndex>
    251e:	fc 01       	movw	r30, r24
    2520:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <calStatusBufferPtr>
    2524:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <calStatusBufferPtr+0x1>
    2528:	a4 0f       	add	r26, r20
    252a:	b1 1d       	adc	r27, r1
    252c:	9c 01       	movw	r18, r24
    252e:	29 5f       	subi	r18, 0xF9	; 249
    2530:	3f 4f       	sbci	r19, 0xFF	; 255

    for(i = 0; i < 7; i++)
    {
        *(txBufferPtr + i) = *(newDataPtr + i);
    2532:	81 91       	ld	r24, Z+
    2534:	8d 93       	st	X+, r24
    BYTE i;
    BYTE* txBufferPtr;

    txBufferPtr = (calStatusBufferPtr + calStatusBufferIndex);

    for(i = 0; i < 7; i++)
    2536:	e2 17       	cp	r30, r18
    2538:	f3 07       	cpc	r31, r19
    253a:	d9 f7       	brne	.-10     	; 0x2532 <copyCalStatusDataToTxBuffer+0x18>
    {
        *(txBufferPtr + i) = *(newDataPtr + i);
    }

    calStatusBufferIndex += 7;
    253c:	49 5f       	subi	r20, 0xF9	; 249
    253e:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <calStatusBufferIndex>
    2542:	08 95       	ret

00002544 <sendSensorCount>:
}

void sendSensorCount(BYTE count)
{
    2544:	cf 93       	push	r28
    2546:	c8 2f       	mov	r28, r24
	while (can_get_status(&scRandomCANTx) == CAN_STATUS_NOT_COMPLETED);
    2548:	8c e2       	ldi	r24, 0x2C	; 44
    254a:	96 e0       	ldi	r25, 0x06	; 6
    254c:	0e 94 43 18 	call	0x3086	; 0x3086 <can_get_status>
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	d1 f3       	breq	.-12     	; 0x2548 <sendSensorCount+0x4>

	// Fill the data bytes
	txCANMsgNonBlockageBuff[0] = count;
    2554:	c0 93 1c 06 	sts	0x061C, r28	; 0x80061c <txCANMsgNonBlockageBuff>

	scRandomCANTx.dlc = 1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <scRandomCANTx+0x6>
	scRandomCANTx.id.std = 0x50;
    255e:	80 e5       	ldi	r24, 0x50	; 80
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <scRandomCANTx+0x3>
    2566:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <scRandomCANTx+0x2>
	while (can_cmd(&scRandomCANTx) != CAN_CMD_ACCEPTED);
    256a:	8c e2       	ldi	r24, 0x2C	; 44
    256c:	96 e0       	ldi	r25, 0x06	; 6
    256e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <can_cmd>
    2572:	81 11       	cpse	r24, r1
    2574:	fa cf       	rjmp	.-12     	; 0x256a <sendSensorCount+0x26>
}
    2576:	cf 91       	pop	r28
    2578:	08 95       	ret

0000257a <stepEEUpdateTask>:
// Checks if a CAN request has been received
//  to write EEPROM data and executes the
//  write based on the state/data type.
void stepEEUpdateTask(void)
{	
	switch(sceCANEeWriteState)
    257a:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <sceCANEeWriteState>
    257e:	82 30       	cpi	r24, 0x02	; 2
    2580:	f1 f0       	breq	.+60     	; 0x25be <stepEEUpdateTask+0x44>
    2582:	a0 f0       	brcs	.+40     	; 0x25ac <stepEEUpdateTask+0x32>
    2584:	83 30       	cpi	r24, 0x03	; 3
    2586:	51 f0       	breq	.+20     	; 0x259c <stepEEUpdateTask+0x22>
    2588:	84 30       	cpi	r24, 0x04	; 4
    258a:	01 f5       	brne	.+64     	; 0x25cc <stepEEUpdateTask+0x52>
            writeHwPartNumToEeprom(&scabyCANEeBuff[0], 0);
            sceCANEeWriteState = EE_NO_WRITE; 	// Reset flag
            break;

        case EE_WRITE_HW_PART_NUM_2:
            writeHwPartNumToEeprom(&scabyCANEeBuff[0], 1);
    258c:	61 e0       	ldi	r22, 0x01	; 1
    258e:	8c e0       	ldi	r24, 0x0C	; 12
    2590:	96 e0       	ldi	r25, 0x06	; 6
    2592:	0e 94 b4 1a 	call	0x3568	; 0x3568 <writeHwPartNumToEeprom>
            sceCANEeWriteState = EE_NO_WRITE; 	// Reset flag
    2596:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <sceCANEeWriteState>
    259a:	08 95       	ret
		    writeHwVersionToEeprom(&scabyCANEeBuff[0]);
		    sceCANEeWriteState = EE_NO_WRITE; 	// Reset flag
		    break;

        case EE_WRITE_HW_PART_NUM_1:
            writeHwPartNumToEeprom(&scabyCANEeBuff[0], 0);
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	8c e0       	ldi	r24, 0x0C	; 12
    25a0:	96 e0       	ldi	r25, 0x06	; 6
    25a2:	0e 94 b4 1a 	call	0x3568	; 0x3568 <writeHwPartNumToEeprom>
            sceCANEeWriteState = EE_NO_WRITE; 	// Reset flag
    25a6:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <sceCANEeWriteState>
            break;
    25aa:	08 95       	ret
// Checks if a CAN request has been received
//  to write EEPROM data and executes the
//  write based on the state/data type.
void stepEEUpdateTask(void)
{	
	switch(sceCANEeWriteState)
    25ac:	81 30       	cpi	r24, 0x01	; 1
    25ae:	79 f4       	brne	.+30     	; 0x25ce <stepEEUpdateTask+0x54>
	{
		case EE_NO_WRITE:
		    break;
		
		case EE_WRITE_SERIAL:
		    writeSerialNumToEeprom(&scabyCANEeBuff[0]);
    25b0:	8c e0       	ldi	r24, 0x0C	; 12
    25b2:	96 e0       	ldi	r25, 0x06	; 6
    25b4:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <writeSerialNumToEeprom>
		    sceCANEeWriteState = EE_NO_WRITE;	// Reset flag
    25b8:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <sceCANEeWriteState>
		    break;
    25bc:	08 95       	ret
		
		case EE_WRITE_HW_VER:
		    writeHwVersionToEeprom(&scabyCANEeBuff[0]);
    25be:	8c e0       	ldi	r24, 0x0C	; 12
    25c0:	96 e0       	ldi	r25, 0x06	; 6
    25c2:	0e 94 92 1a 	call	0x3524	; 0x3524 <writeHwVersionToEeprom>
		    sceCANEeWriteState = EE_NO_WRITE; 	// Reset flag
    25c6:	10 92 0b 06 	sts	0x060B, r1	; 0x80060b <sceCANEeWriteState>
		    break;
    25ca:	08 95       	ret
    25cc:	08 95       	ret
    25ce:	08 95       	ret

000025d0 <can_clear_all_mob>:
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
    25d2:	98 2f       	mov	r25, r24
    25d4:	92 95       	swap	r25
    25d6:	90 7f       	andi	r25, 0xF0	; 240
    25d8:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
        Can_clear_mob();                //! All MOb Registers=0
    25dc:	ee ee       	ldi	r30, 0xEE	; 238
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	11 92       	st	Z+, r1
    25e2:	e8 3f       	cpi	r30, 0xF8	; 248
    25e4:	f1 05       	cpc	r31, r1
    25e6:	e1 f7       	brne	.-8      	; 0x25e0 <can_clear_all_mob+0x10>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	86 30       	cpi	r24, 0x06	; 6
    25ec:	91 f7       	brne	.-28     	; 0x25d2 <can_clear_all_mob+0x2>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    25ee:	08 95       	ret

000025f0 <can_get_mob_free>:
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    25f0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(mob_number);
    25f6:	98 2f       	mov	r25, r24
    25f8:	92 95       	swap	r25
    25fa:	90 7f       	andi	r25, 0xF0	; 240
    25fc:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    2600:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2604:	90 7c       	andi	r25, 0xC0	; 192
    2606:	39 f0       	breq	.+14     	; 0x2616 <can_get_mob_free+0x26>
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    2608:	8f 5f       	subi	r24, 0xFF	; 255
    260a:	86 30       	cpi	r24, 0x06	; 6
    260c:	a1 f7       	brne	.-24     	; 0x25f6 <can_get_mob_free+0x6>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    260e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    return (NO_MOB);
    2612:	8f ef       	ldi	r24, 0xFF	; 255
}
    2614:	08 95       	ret
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
        {
            CANPAGE = page_saved;
    2616:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
            return (mob_number);
    261a:	08 95       	ret

0000261c <can_get_mob_status>:
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    261c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2620:	80 7c       	andi	r24, 0xC0	; 192
    2622:	11 f4       	brne	.+4      	; 0x2628 <can_get_mob_status+0xc>
    2624:	8f ef       	ldi	r24, 0xFF	; 255
    mob_status = canstmob_copy & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR));
    if (mob_status != 0) {return(mob_status);}

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    2626:	08 95       	ret
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}

    canstmob_copy = CANSTMOB; // Copy for test integrity
    2628:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    262c:	98 2f       	mov	r25, r24
    262e:	90 7e       	andi	r25, 0xE0	; 224
    if (mob_status != 0) {return(mob_status);}
    2630:	d1 f3       	breq	.-12     	; 0x2626 <can_get_mob_status+0xa>
    2632:	89 2f       	mov	r24, r25
    2634:	08 95       	ret

00002636 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    2636:	bc 01       	movw	r22, r24
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    2638:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    263c:	8f 70       	andi	r24, 0x0F	; 15
    263e:	99 f0       	breq	.+38     	; 0x2666 <can_get_data+0x30>
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	50 e0       	ldi	r21, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
    2646:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    264a:	fb 01       	movw	r30, r22
    264c:	e4 0f       	add	r30, r20
    264e:	f5 1f       	adc	r31, r21
    2650:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    2652:	9f 5f       	subi	r25, 0xFF	; 255
    2654:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2658:	49 2f       	mov	r20, r25
    265a:	50 e0       	ldi	r21, 0x00	; 0
    265c:	2f 70       	andi	r18, 0x0F	; 15
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	42 17       	cp	r20, r18
    2662:	53 07       	cpc	r21, r19
    2664:	84 f3       	brlt	.-32     	; 0x2646 <can_get_data+0x10>
    2666:	08 95       	ret

00002668 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U16 mode)
{
    Can_reset();
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    Can_conf_bt();
    266e:	8e e0       	ldi	r24, 0x0E	; 14
    2670:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f00e2>
    2674:	8c e0       	ldi	r24, 0x0C	; 12
    2676:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f00e3>
    267a:	87 e3       	ldi	r24, 0x37	; 55
    267c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f00e4>
    return 1;
}
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	08 95       	ret

00002684 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U16 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    2684:	0e 94 34 13 	call	0x2668	; 0x2668 <can_fixed_baudrate>
    2688:	81 11       	cpse	r24, r1
    268a:	01 c0       	rjmp	.+2      	; 0x268e <can_init+0xa>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
    268c:	08 95       	ret
//!
//------------------------------------------------------------------------------
U8 can_init(U16 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    268e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
    2692:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    2696:	82 60       	ori	r24, 0x02	; 2
    2698:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f00d8>
    return (1);
    269c:	81 e0       	ldi	r24, 0x01	; 1
}
    269e:	08 95       	ret

000026a0 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <can_cmd+0xa>
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <can_cmd+0xc>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	fc 01       	movw	r30, r24
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
    26b2:	81 81       	ldd	r24, Z+1	; 0x01
    26b4:	8c 30       	cpi	r24, 0x0C	; 12
    26b6:	89 f1       	breq	.+98     	; 0x271a <can_cmd+0x7a>
    26b8:	8f 01       	movw	r16, r30
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
    26ba:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <can_get_mob_free>
    if (mob_handle!= NO_MOB)
    26be:	8f 3f       	cpi	r24, 0xFF	; 255
    26c0:	f1 f0       	breq	.+60     	; 0x26fe <can_cmd+0x5e>
    {
      cmd->status = MOB_PENDING; 
    26c2:	90 e6       	ldi	r25, 0x60	; 96
    26c4:	d8 01       	movw	r26, r16
    26c6:	19 96       	adiw	r26, 0x09	; 9
    26c8:	9c 93       	st	X, r25
    26ca:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
    26cc:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
    26ce:	82 95       	swap	r24
    26d0:	80 7f       	andi	r24, 0xF0	; 240
    26d2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
      Can_clear_mob();
    26d6:	ee ee       	ldi	r30, 0xEE	; 238
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	11 92       	st	Z+, r1
    26dc:	e8 3f       	cpi	r30, 0xF8	; 248
    26de:	f1 05       	cpc	r31, r1
    26e0:	e1 f7       	brne	.-8      	; 0x26da <can_cmd+0x3a>
          
      switch (cmd->cmd)
    26e2:	d8 01       	movw	r26, r16
    26e4:	11 96       	adiw	r26, 0x01	; 1
    26e6:	ec 91       	ld	r30, X
    26e8:	8e 2f       	mov	r24, r30
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	fc 01       	movw	r30, r24
    26ee:	31 97       	sbiw	r30, 0x01	; 1
    26f0:	eb 30       	cpi	r30, 0x0B	; 11
    26f2:	f1 05       	cpc	r31, r1
    26f4:	28 f1       	brcs	.+74     	; 0x2740 <can_cmd+0xa0>
          Can_config_rx();       
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    26f6:	f8 01       	movw	r30, r16
    26f8:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    26fa:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    26fc:	05 c0       	rjmp	.+10     	; 0x2708 <can_cmd+0x68>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    26fe:	8f e1       	ldi	r24, 0x1F	; 31
    2700:	d8 01       	movw	r26, r16
    2702:	19 96       	adiw	r26, 0x09	; 9
    2704:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    2706:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	08 95       	ret
  U8 mob_handle, cpt;
  U32 u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
  {
    if (cmd->status == MOB_PENDING)
    271a:	81 85       	ldd	r24, Z+9	; 0x09
    271c:	80 36       	cpi	r24, 0x60	; 96
    271e:	61 f7       	brne	.-40     	; 0x26f8 <can_cmd+0x58>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
    2720:	80 81       	ld	r24, Z
    2722:	82 95       	swap	r24
    2724:	80 7f       	andi	r24, 0xF0	; 240
    2726:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
      Can_mob_abort();
    272a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    272e:	8f 73       	andi	r24, 0x3F	; 63
    2730:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
      Can_clear_status_mob();       // To be sure !
    2734:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
      cmd->handle = 0;
    2738:	10 82       	st	Z, r1
          Can_config_rx();       
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    273a:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	e4 cf       	rjmp	.-56     	; 0x2708 <can_cmd+0x68>
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
          
      switch (cmd->cmd)
    2740:	eb 53       	subi	r30, 0x3B	; 59
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2748:	f8 01       	movw	r30, r16
    274a:	86 81       	ldd	r24, Z+6	; 0x06
    274c:	88 23       	and	r24, r24
    274e:	81 f0       	breq	.+32     	; 0x2770 <can_cmd+0xd0>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	d8 01       	movw	r26, r16
    2754:	17 96       	adiw	r26, 0x07	; 7
    2756:	ed 91       	ld	r30, X+
    2758:	fc 91       	ld	r31, X
    275a:	18 97       	sbiw	r26, 0x08	; 8
    275c:	e8 0f       	add	r30, r24
    275e:	f1 1d       	adc	r31, r1
    2760:	90 81       	ld	r25, Z
    2762:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2766:	8f 5f       	subi	r24, 0xFF	; 255
    2768:	16 96       	adiw	r26, 0x06	; 6
    276a:	9c 91       	ld	r25, X
    276c:	89 17       	cp	r24, r25
    276e:	88 f3       	brcs	.-30     	; 0x2752 <can_cmd+0xb2>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    2770:	19 82       	std	Y+1, r1	; 0x01
    2772:	1a 82       	std	Y+2, r1	; 0x02
    2774:	1b 82       	std	Y+3, r1	; 0x03
    2776:	1c 82       	std	Y+4, r1	; 0x04
    2778:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	98 2f       	mov	r25, r24
    2780:	99 0f       	add	r25, r25
    2782:	99 0f       	add	r25, r25
    2784:	99 0f       	add	r25, r25
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	82 95       	swap	r24
    278a:	86 95       	lsr	r24
    278c:	87 70       	andi	r24, 0x07	; 7
    278e:	89 0f       	add	r24, r25
    2790:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	98 2f       	mov	r25, r24
    2798:	99 0f       	add	r25, r25
    279a:	99 0f       	add	r25, r25
    279c:	99 0f       	add	r25, r25
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	82 95       	swap	r24
    27a2:	86 95       	lsr	r24
    27a4:	87 70       	andi	r24, 0x07	; 7
    27a6:	89 0f       	add	r24, r25
    27a8:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	88 0f       	add	r24, r24
    27b0:	88 0f       	add	r24, r24
    27b2:	88 0f       	add	r24, r24
    27b4:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    27b8:	d8 01       	movw	r26, r16
    27ba:	1a 96       	adiw	r26, 0x0a	; 10
    27bc:	8c 91       	ld	r24, X
    27be:	1a 97       	sbiw	r26, 0x0a	; 10
    27c0:	81 60       	ori	r24, 0x01	; 1
    27c2:	1a 96       	adiw	r26, 0x0a	; 10
    27c4:	8c 93       	st	X, r24
    27c6:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    27ca:	84 60       	ori	r24, 0x04	; 4
    27cc:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    27d0:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    27d4:	84 60       	ori	r24, 0x04	; 4
    27d6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_set_rplv();
    27da:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    27de:	80 62       	ori	r24, 0x20	; 32
    27e0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
    27e4:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    27e8:	8e 7f       	andi	r24, 0xFE	; 254
    27ea:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          Can_config_rx();       
    27ee:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    27f2:	8f 73       	andi	r24, 0x3F	; 63
    27f4:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    27f8:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    27fc:	80 68       	ori	r24, 0x80	; 128
    27fe:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    2802:	80 e0       	ldi	r24, 0x00	; 0
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    2804:	81 cf       	rjmp	.-254    	; 0x2708 <can_cmd+0x68>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2806:	d8 01       	movw	r26, r16
    2808:	1a 96       	adiw	r26, 0x0a	; 10
    280a:	8c 91       	ld	r24, X
    280c:	1a 97       	sbiw	r26, 0x0a	; 10
    280e:	81 ff       	sbrs	r24, 1
    2810:	b8 c3       	rjmp	.+1904   	; 0x2f82 <can_cmd+0x8e2>
    2812:	15 96       	adiw	r26, 0x05	; 5
    2814:	8c 91       	ld	r24, X
    2816:	15 97       	sbiw	r26, 0x05	; 5
    2818:	98 2f       	mov	r25, r24
    281a:	99 0f       	add	r25, r25
    281c:	99 0f       	add	r25, r25
    281e:	99 0f       	add	r25, r25
    2820:	14 96       	adiw	r26, 0x04	; 4
    2822:	8c 91       	ld	r24, X
    2824:	14 97       	sbiw	r26, 0x04	; 4
    2826:	82 95       	swap	r24
    2828:	86 95       	lsr	r24
    282a:	87 70       	andi	r24, 0x07	; 7
    282c:	89 0f       	add	r24, r25
    282e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2832:	14 96       	adiw	r26, 0x04	; 4
    2834:	8c 91       	ld	r24, X
    2836:	14 97       	sbiw	r26, 0x04	; 4
    2838:	98 2f       	mov	r25, r24
    283a:	99 0f       	add	r25, r25
    283c:	99 0f       	add	r25, r25
    283e:	99 0f       	add	r25, r25
    2840:	13 96       	adiw	r26, 0x03	; 3
    2842:	8c 91       	ld	r24, X
    2844:	13 97       	sbiw	r26, 0x03	; 3
    2846:	82 95       	swap	r24
    2848:	86 95       	lsr	r24
    284a:	87 70       	andi	r24, 0x07	; 7
    284c:	89 0f       	add	r24, r25
    284e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2852:	13 96       	adiw	r26, 0x03	; 3
    2854:	8c 91       	ld	r24, X
    2856:	13 97       	sbiw	r26, 0x03	; 3
    2858:	98 2f       	mov	r25, r24
    285a:	99 0f       	add	r25, r25
    285c:	99 0f       	add	r25, r25
    285e:	99 0f       	add	r25, r25
    2860:	12 96       	adiw	r26, 0x02	; 2
    2862:	8c 91       	ld	r24, X
    2864:	12 97       	sbiw	r26, 0x02	; 2
    2866:	82 95       	swap	r24
    2868:	86 95       	lsr	r24
    286a:	87 70       	andi	r24, 0x07	; 7
    286c:	89 0f       	add	r24, r25
    286e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2872:	12 96       	adiw	r26, 0x02	; 2
    2874:	8c 91       	ld	r24, X
    2876:	88 0f       	add	r24, r24
    2878:	88 0f       	add	r24, r24
    287a:	88 0f       	add	r24, r24
    287c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2880:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2884:	80 61       	ori	r24, 0x10	; 16
    2886:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    288a:	8f ef       	ldi	r24, 0xFF	; 255
    288c:	9f ef       	ldi	r25, 0xFF	; 255
    288e:	dc 01       	movw	r26, r24
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	ab 83       	std	Y+3, r26	; 0x03
    2896:	bc 83       	std	Y+4, r27	; 0x04
    2898:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	98 2f       	mov	r25, r24
    28a0:	99 0f       	add	r25, r25
    28a2:	99 0f       	add	r25, r25
    28a4:	99 0f       	add	r25, r25
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	82 95       	swap	r24
    28aa:	86 95       	lsr	r24
    28ac:	87 70       	andi	r24, 0x07	; 7
    28ae:	89 0f       	add	r24, r25
    28b0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	98 2f       	mov	r25, r24
    28b8:	99 0f       	add	r25, r25
    28ba:	99 0f       	add	r25, r25
    28bc:	99 0f       	add	r25, r25
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	82 95       	swap	r24
    28c2:	86 95       	lsr	r24
    28c4:	87 70       	andi	r24, 0x07	; 7
    28c6:	89 0f       	add	r24, r25
    28c8:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	88 0f       	add	r24, r24
    28d0:	88 0f       	add	r24, r24
    28d2:	88 0f       	add	r24, r24
    28d4:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    28d8:	f8 01       	movw	r30, r16
    28da:	82 85       	ldd	r24, Z+10	; 0x0a
    28dc:	81 60       	ori	r24, 0x01	; 1
    28de:	82 87       	std	Z+10, r24	; 0x0a
    28e0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    28e4:	84 60       	ori	r24, 0x04	; 4
    28e6:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    28ea:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    28ee:	84 60       	ori	r24, 0x04	; 4
    28f0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_clear_rplv();
    28f4:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    28f8:	8f 7d       	andi	r24, 0xDF	; 223
    28fa:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          Can_set_idemsk();
    28fe:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2902:	81 60       	ori	r24, 0x01	; 1
    2904:	72 cf       	rjmp	.-284    	; 0x27ea <can_cmd+0x14a>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2906:	d8 01       	movw	r26, r16
    2908:	1a 96       	adiw	r26, 0x0a	; 10
    290a:	8c 91       	ld	r24, X
    290c:	1a 97       	sbiw	r26, 0x0a	; 10
    290e:	81 ff       	sbrs	r24, 1
    2910:	58 c3       	rjmp	.+1712   	; 0x2fc2 <can_cmd+0x922>
    2912:	15 96       	adiw	r26, 0x05	; 5
    2914:	8c 91       	ld	r24, X
    2916:	15 97       	sbiw	r26, 0x05	; 5
    2918:	98 2f       	mov	r25, r24
    291a:	99 0f       	add	r25, r25
    291c:	99 0f       	add	r25, r25
    291e:	99 0f       	add	r25, r25
    2920:	14 96       	adiw	r26, 0x04	; 4
    2922:	8c 91       	ld	r24, X
    2924:	14 97       	sbiw	r26, 0x04	; 4
    2926:	82 95       	swap	r24
    2928:	86 95       	lsr	r24
    292a:	87 70       	andi	r24, 0x07	; 7
    292c:	89 0f       	add	r24, r25
    292e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2932:	14 96       	adiw	r26, 0x04	; 4
    2934:	8c 91       	ld	r24, X
    2936:	14 97       	sbiw	r26, 0x04	; 4
    2938:	98 2f       	mov	r25, r24
    293a:	99 0f       	add	r25, r25
    293c:	99 0f       	add	r25, r25
    293e:	99 0f       	add	r25, r25
    2940:	13 96       	adiw	r26, 0x03	; 3
    2942:	8c 91       	ld	r24, X
    2944:	13 97       	sbiw	r26, 0x03	; 3
    2946:	82 95       	swap	r24
    2948:	86 95       	lsr	r24
    294a:	87 70       	andi	r24, 0x07	; 7
    294c:	89 0f       	add	r24, r25
    294e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2952:	13 96       	adiw	r26, 0x03	; 3
    2954:	8c 91       	ld	r24, X
    2956:	13 97       	sbiw	r26, 0x03	; 3
    2958:	98 2f       	mov	r25, r24
    295a:	99 0f       	add	r25, r25
    295c:	99 0f       	add	r25, r25
    295e:	99 0f       	add	r25, r25
    2960:	12 96       	adiw	r26, 0x02	; 2
    2962:	8c 91       	ld	r24, X
    2964:	12 97       	sbiw	r26, 0x02	; 2
    2966:	82 95       	swap	r24
    2968:	86 95       	lsr	r24
    296a:	87 70       	andi	r24, 0x07	; 7
    296c:	89 0f       	add	r24, r25
    296e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2972:	12 96       	adiw	r26, 0x02	; 2
    2974:	8c 91       	ld	r24, X
    2976:	88 0f       	add	r24, r24
    2978:	88 0f       	add	r24, r24
    297a:	88 0f       	add	r24, r24
    297c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2980:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2984:	80 61       	ori	r24, 0x10	; 16
    2986:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    298a:	8f ef       	ldi	r24, 0xFF	; 255
    298c:	9f ef       	ldi	r25, 0xFF	; 255
    298e:	dc 01       	movw	r26, r24
    2990:	89 83       	std	Y+1, r24	; 0x01
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	ab 83       	std	Y+3, r26	; 0x03
    2996:	bc 83       	std	Y+4, r27	; 0x04
    2998:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	98 2f       	mov	r25, r24
    29a0:	99 0f       	add	r25, r25
    29a2:	99 0f       	add	r25, r25
    29a4:	99 0f       	add	r25, r25
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	82 95       	swap	r24
    29aa:	86 95       	lsr	r24
    29ac:	87 70       	andi	r24, 0x07	; 7
    29ae:	89 0f       	add	r24, r25
    29b0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	98 2f       	mov	r25, r24
    29b8:	99 0f       	add	r25, r25
    29ba:	99 0f       	add	r25, r25
    29bc:	99 0f       	add	r25, r25
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	82 95       	swap	r24
    29c2:	86 95       	lsr	r24
    29c4:	87 70       	andi	r24, 0x07	; 7
    29c6:	89 0f       	add	r24, r25
    29c8:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	88 0f       	add	r24, r24
    29d0:	88 0f       	add	r24, r24
    29d2:	88 0f       	add	r24, r24
    29d4:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    29d8:	f8 01       	movw	r30, r16
    29da:	82 85       	ldd	r24, Z+10	; 0x0a
    29dc:	8e 7f       	andi	r24, 0xFE	; 254
    29de:	82 87       	std	Z+10, r24	; 0x0a
    29e0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    29e4:	84 60       	ori	r24, 0x04	; 4
    29e6:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    29ea:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    29ee:	8b 7f       	andi	r24, 0xFB	; 251
    29f0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_set_idemsk();
    29f4:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    29f8:	81 60       	ori	r24, 0x01	; 1
    29fa:	f7 ce       	rjmp	.-530    	; 0x27ea <can_cmd+0x14a>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    29fc:	f8 01       	movw	r30, r16
    29fe:	82 85       	ldd	r24, Z+10	; 0x0a
    2a00:	81 ff       	sbrs	r24, 1
    2a02:	a7 c2       	rjmp	.+1358   	; 0x2f52 <can_cmd+0x8b2>
    2a04:	85 81       	ldd	r24, Z+5	; 0x05
    2a06:	98 2f       	mov	r25, r24
    2a08:	99 0f       	add	r25, r25
    2a0a:	99 0f       	add	r25, r25
    2a0c:	99 0f       	add	r25, r25
    2a0e:	84 81       	ldd	r24, Z+4	; 0x04
    2a10:	82 95       	swap	r24
    2a12:	86 95       	lsr	r24
    2a14:	87 70       	andi	r24, 0x07	; 7
    2a16:	89 0f       	add	r24, r25
    2a18:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2a1c:	84 81       	ldd	r24, Z+4	; 0x04
    2a1e:	98 2f       	mov	r25, r24
    2a20:	99 0f       	add	r25, r25
    2a22:	99 0f       	add	r25, r25
    2a24:	99 0f       	add	r25, r25
    2a26:	83 81       	ldd	r24, Z+3	; 0x03
    2a28:	82 95       	swap	r24
    2a2a:	86 95       	lsr	r24
    2a2c:	87 70       	andi	r24, 0x07	; 7
    2a2e:	89 0f       	add	r24, r25
    2a30:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2a34:	83 81       	ldd	r24, Z+3	; 0x03
    2a36:	98 2f       	mov	r25, r24
    2a38:	99 0f       	add	r25, r25
    2a3a:	99 0f       	add	r25, r25
    2a3c:	99 0f       	add	r25, r25
    2a3e:	82 81       	ldd	r24, Z+2	; 0x02
    2a40:	82 95       	swap	r24
    2a42:	86 95       	lsr	r24
    2a44:	87 70       	andi	r24, 0x07	; 7
    2a46:	89 0f       	add	r24, r25
    2a48:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	88 0f       	add	r24, r24
    2a50:	88 0f       	add	r24, r24
    2a52:	88 0f       	add	r24, r24
    2a54:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2a58:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2a5c:	80 61       	ori	r24, 0x10	; 16
    2a5e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    2a62:	8f ef       	ldi	r24, 0xFF	; 255
    2a64:	9f ef       	ldi	r25, 0xFF	; 255
    2a66:	dc 01       	movw	r26, r24
    2a68:	89 83       	std	Y+1, r24	; 0x01
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	ab 83       	std	Y+3, r26	; 0x03
    2a6e:	bc 83       	std	Y+4, r27	; 0x04
    2a70:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	98 2f       	mov	r25, r24
    2a78:	99 0f       	add	r25, r25
    2a7a:	99 0f       	add	r25, r25
    2a7c:	99 0f       	add	r25, r25
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	82 95       	swap	r24
    2a82:	86 95       	lsr	r24
    2a84:	87 70       	andi	r24, 0x07	; 7
    2a86:	89 0f       	add	r24, r25
    2a88:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	98 2f       	mov	r25, r24
    2a90:	99 0f       	add	r25, r25
    2a92:	99 0f       	add	r25, r25
    2a94:	99 0f       	add	r25, r25
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	82 95       	swap	r24
    2a9a:	86 95       	lsr	r24
    2a9c:	87 70       	andi	r24, 0x07	; 7
    2a9e:	89 0f       	add	r24, r25
    2aa0:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	88 0f       	add	r24, r24
    2aa8:	88 0f       	add	r24, r24
    2aaa:	88 0f       	add	r24, r24
    2aac:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          Can_clear_rtrmsk();
    2ab0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2ab4:	8b 7f       	andi	r24, 0xFB	; 251
    2ab6:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          Can_set_idemsk();
    2aba:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2abe:	81 60       	ori	r24, 0x01	; 1
    2ac0:	94 ce       	rjmp	.-728    	; 0x27ea <can_cmd+0x14a>
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2ac2:	f8 01       	movw	r30, r16
    2ac4:	82 85       	ldd	r24, Z+10	; 0x0a
    2ac6:	81 ff       	sbrs	r24, 1
    2ac8:	96 c2       	rjmp	.+1324   	; 0x2ff6 <can_cmd+0x956>
    2aca:	85 81       	ldd	r24, Z+5	; 0x05
    2acc:	98 2f       	mov	r25, r24
    2ace:	99 0f       	add	r25, r25
    2ad0:	99 0f       	add	r25, r25
    2ad2:	99 0f       	add	r25, r25
    2ad4:	84 81       	ldd	r24, Z+4	; 0x04
    2ad6:	82 95       	swap	r24
    2ad8:	86 95       	lsr	r24
    2ada:	87 70       	andi	r24, 0x07	; 7
    2adc:	89 0f       	add	r24, r25
    2ade:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2ae2:	84 81       	ldd	r24, Z+4	; 0x04
    2ae4:	98 2f       	mov	r25, r24
    2ae6:	99 0f       	add	r25, r25
    2ae8:	99 0f       	add	r25, r25
    2aea:	99 0f       	add	r25, r25
    2aec:	83 81       	ldd	r24, Z+3	; 0x03
    2aee:	82 95       	swap	r24
    2af0:	86 95       	lsr	r24
    2af2:	87 70       	andi	r24, 0x07	; 7
    2af4:	89 0f       	add	r24, r25
    2af6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2afa:	83 81       	ldd	r24, Z+3	; 0x03
    2afc:	98 2f       	mov	r25, r24
    2afe:	99 0f       	add	r25, r25
    2b00:	99 0f       	add	r25, r25
    2b02:	99 0f       	add	r25, r25
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	82 95       	swap	r24
    2b08:	86 95       	lsr	r24
    2b0a:	87 70       	andi	r24, 0x07	; 7
    2b0c:	89 0f       	add	r24, r25
    2b0e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2b12:	82 81       	ldd	r24, Z+2	; 0x02
    2b14:	88 0f       	add	r24, r24
    2b16:	88 0f       	add	r24, r24
    2b18:	88 0f       	add	r24, r24
    2b1a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2b1e:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2b22:	80 61       	ori	r24, 0x10	; 16
    2b24:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
    2b28:	d8 01       	movw	r26, r16
    2b2a:	1a 96       	adiw	r26, 0x0a	; 10
    2b2c:	8c 91       	ld	r24, X
    2b2e:	1a 97       	sbiw	r26, 0x0a	; 10
    2b30:	81 60       	ori	r24, 0x01	; 1
    2b32:	1a 96       	adiw	r26, 0x0a	; 10
    2b34:	8c 93       	st	X, r24
    2b36:	1a 97       	sbiw	r26, 0x0a	; 10
    2b38:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2b3c:	84 60       	ori	r24, 0x04	; 4
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          if(cmd->dlc > 8) cmd->dlc = 8;
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
    2b3e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_set_dlc(cmd->dlc);
    2b42:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2b46:	16 96       	adiw	r26, 0x06	; 6
    2b48:	8c 91       	ld	r24, X
    2b4a:	89 2b       	or	r24, r25
    2b4c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          Can_config_tx();
    2b50:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2b54:	8f 73       	andi	r24, 0x3F	; 63
    2b56:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2b5a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2b5e:	80 64       	ori	r24, 0x40	; 64
    2b60:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    2b64:	80 e0       	ldi	r24, 0x00	; 0
          if(cmd->dlc > 8) cmd->dlc = 8;
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
    2b66:	d0 cd       	rjmp	.-1120   	; 0x2708 <can_cmd+0x68>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    2b68:	19 82       	std	Y+1, r1	; 0x01
    2b6a:	1a 82       	std	Y+2, r1	; 0x02
    2b6c:	1b 82       	std	Y+3, r1	; 0x03
    2b6e:	1c 82       	std	Y+4, r1	; 0x04
    2b70:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	98 2f       	mov	r25, r24
    2b78:	99 0f       	add	r25, r25
    2b7a:	99 0f       	add	r25, r25
    2b7c:	99 0f       	add	r25, r25
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	82 95       	swap	r24
    2b82:	86 95       	lsr	r24
    2b84:	87 70       	andi	r24, 0x07	; 7
    2b86:	89 0f       	add	r24, r25
    2b88:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	98 2f       	mov	r25, r24
    2b90:	99 0f       	add	r25, r25
    2b92:	99 0f       	add	r25, r25
    2b94:	99 0f       	add	r25, r25
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	82 95       	swap	r24
    2b9a:	86 95       	lsr	r24
    2b9c:	87 70       	andi	r24, 0x07	; 7
    2b9e:	89 0f       	add	r24, r25
    2ba0:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	88 0f       	add	r24, r24
    2ba8:	88 0f       	add	r24, r24
    2baa:	88 0f       	add	r24, r24
    2bac:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    2bb0:	f8 01       	movw	r30, r16
    2bb2:	82 85       	ldd	r24, Z+10	; 0x0a
    2bb4:	8e 7f       	andi	r24, 0xFE	; 254
    2bb6:	82 87       	std	Z+10, r24	; 0x0a
    2bb8:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2bbc:	84 60       	ori	r24, 0x04	; 4
    2bbe:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2bc2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2bc6:	8b 7f       	andi	r24, 0xFB	; 251
    2bc8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2bcc:	0b ce       	rjmp	.-1002   	; 0x27e4 <can_cmd+0x144>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2bce:	f8 01       	movw	r30, r16
    2bd0:	82 85       	ldd	r24, Z+10	; 0x0a
    2bd2:	81 ff       	sbrs	r24, 1
    2bd4:	40 c2       	rjmp	.+1152   	; 0x3056 <can_cmd+0x9b6>
    2bd6:	85 81       	ldd	r24, Z+5	; 0x05
    2bd8:	98 2f       	mov	r25, r24
    2bda:	99 0f       	add	r25, r25
    2bdc:	99 0f       	add	r25, r25
    2bde:	99 0f       	add	r25, r25
    2be0:	84 81       	ldd	r24, Z+4	; 0x04
    2be2:	82 95       	swap	r24
    2be4:	86 95       	lsr	r24
    2be6:	87 70       	andi	r24, 0x07	; 7
    2be8:	89 0f       	add	r24, r25
    2bea:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2bee:	84 81       	ldd	r24, Z+4	; 0x04
    2bf0:	98 2f       	mov	r25, r24
    2bf2:	99 0f       	add	r25, r25
    2bf4:	99 0f       	add	r25, r25
    2bf6:	99 0f       	add	r25, r25
    2bf8:	83 81       	ldd	r24, Z+3	; 0x03
    2bfa:	82 95       	swap	r24
    2bfc:	86 95       	lsr	r24
    2bfe:	87 70       	andi	r24, 0x07	; 7
    2c00:	89 0f       	add	r24, r25
    2c02:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2c06:	83 81       	ldd	r24, Z+3	; 0x03
    2c08:	98 2f       	mov	r25, r24
    2c0a:	99 0f       	add	r25, r25
    2c0c:	99 0f       	add	r25, r25
    2c0e:	99 0f       	add	r25, r25
    2c10:	82 81       	ldd	r24, Z+2	; 0x02
    2c12:	82 95       	swap	r24
    2c14:	86 95       	lsr	r24
    2c16:	87 70       	andi	r24, 0x07	; 7
    2c18:	89 0f       	add	r24, r25
    2c1a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2c1e:	82 81       	ldd	r24, Z+2	; 0x02
    2c20:	88 0f       	add	r24, r24
    2c22:	88 0f       	add	r24, r24
    2c24:	88 0f       	add	r24, r24
    2c26:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2c2a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2c2e:	80 61       	ori	r24, 0x10	; 16
    2c30:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2c34:	d8 01       	movw	r26, r16
    2c36:	16 96       	adiw	r26, 0x06	; 6
    2c38:	8c 91       	ld	r24, X
    2c3a:	88 23       	and	r24, r24
    2c3c:	81 f0       	breq	.+32     	; 0x2c5e <can_cmd+0x5be>
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	d8 01       	movw	r26, r16
    2c42:	17 96       	adiw	r26, 0x07	; 7
    2c44:	ed 91       	ld	r30, X+
    2c46:	fc 91       	ld	r31, X
    2c48:	18 97       	sbiw	r26, 0x08	; 8
    2c4a:	e8 0f       	add	r30, r24
    2c4c:	f1 1d       	adc	r31, r1
    2c4e:	90 81       	ld	r25, Z
    2c50:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2c54:	8f 5f       	subi	r24, 0xFF	; 255
    2c56:	16 96       	adiw	r26, 0x06	; 6
    2c58:	9c 91       	ld	r25, X
    2c5a:	89 17       	cp	r24, r25
    2c5c:	88 f3       	brcs	.-30     	; 0x2c40 <can_cmd+0x5a0>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
    2c5e:	f8 01       	movw	r30, r16
    2c60:	82 85       	ldd	r24, Z+10	; 0x0a
    2c62:	80 ff       	sbrs	r24, 0
    2c64:	a8 c1       	rjmp	.+848    	; 0x2fb6 <can_cmd+0x916>
    2c66:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2c6a:	84 60       	ori	r24, 0x04	; 4
    2c6c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
    2c70:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2c74:	f8 01       	movw	r30, r16
    2c76:	86 81       	ldd	r24, Z+6	; 0x06
    2c78:	68 cf       	rjmp	.-304    	; 0x2b4a <can_cmd+0x4aa>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2c7a:	f8 01       	movw	r30, r16
    2c7c:	82 85       	ldd	r24, Z+10	; 0x0a
    2c7e:	81 ff       	sbrs	r24, 1
    2c80:	d2 c1       	rjmp	.+932    	; 0x3026 <can_cmd+0x986>
    2c82:	85 81       	ldd	r24, Z+5	; 0x05
    2c84:	98 2f       	mov	r25, r24
    2c86:	99 0f       	add	r25, r25
    2c88:	99 0f       	add	r25, r25
    2c8a:	99 0f       	add	r25, r25
    2c8c:	84 81       	ldd	r24, Z+4	; 0x04
    2c8e:	82 95       	swap	r24
    2c90:	86 95       	lsr	r24
    2c92:	87 70       	andi	r24, 0x07	; 7
    2c94:	89 0f       	add	r24, r25
    2c96:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2c9a:	84 81       	ldd	r24, Z+4	; 0x04
    2c9c:	98 2f       	mov	r25, r24
    2c9e:	99 0f       	add	r25, r25
    2ca0:	99 0f       	add	r25, r25
    2ca2:	99 0f       	add	r25, r25
    2ca4:	83 81       	ldd	r24, Z+3	; 0x03
    2ca6:	82 95       	swap	r24
    2ca8:	86 95       	lsr	r24
    2caa:	87 70       	andi	r24, 0x07	; 7
    2cac:	89 0f       	add	r24, r25
    2cae:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2cb2:	83 81       	ldd	r24, Z+3	; 0x03
    2cb4:	98 2f       	mov	r25, r24
    2cb6:	99 0f       	add	r25, r25
    2cb8:	99 0f       	add	r25, r25
    2cba:	99 0f       	add	r25, r25
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	82 95       	swap	r24
    2cc0:	86 95       	lsr	r24
    2cc2:	87 70       	andi	r24, 0x07	; 7
    2cc4:	89 0f       	add	r24, r25
    2cc6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2cca:	82 81       	ldd	r24, Z+2	; 0x02
    2ccc:	88 0f       	add	r24, r24
    2cce:	88 0f       	add	r24, r24
    2cd0:	88 0f       	add	r24, r24
    2cd2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2cd6:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2cda:	80 61       	ori	r24, 0x10	; 16
    2cdc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2ce0:	d8 01       	movw	r26, r16
    2ce2:	16 96       	adiw	r26, 0x06	; 6
    2ce4:	8c 91       	ld	r24, X
    2ce6:	88 23       	and	r24, r24
    2ce8:	81 f0       	breq	.+32     	; 0x2d0a <can_cmd+0x66a>
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	d8 01       	movw	r26, r16
    2cee:	17 96       	adiw	r26, 0x07	; 7
    2cf0:	ed 91       	ld	r30, X+
    2cf2:	fc 91       	ld	r31, X
    2cf4:	18 97       	sbiw	r26, 0x08	; 8
    2cf6:	e8 0f       	add	r30, r24
    2cf8:	f1 1d       	adc	r31, r1
    2cfa:	90 81       	ld	r25, Z
    2cfc:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	16 96       	adiw	r26, 0x06	; 6
    2d04:	9c 91       	ld	r25, X
    2d06:	89 17       	cp	r24, r25
    2d08:	88 f3       	brcs	.-30     	; 0x2cec <can_cmd+0x64c>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    2d0a:	8f ef       	ldi	r24, 0xFF	; 255
    2d0c:	9f ef       	ldi	r25, 0xFF	; 255
    2d0e:	dc 01       	movw	r26, r24
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	9a 83       	std	Y+2, r25	; 0x02
    2d14:	ab 83       	std	Y+3, r26	; 0x03
    2d16:	bc 83       	std	Y+4, r27	; 0x04
    2d18:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	98 2f       	mov	r25, r24
    2d20:	99 0f       	add	r25, r25
    2d22:	99 0f       	add	r25, r25
    2d24:	99 0f       	add	r25, r25
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	82 95       	swap	r24
    2d2a:	86 95       	lsr	r24
    2d2c:	87 70       	andi	r24, 0x07	; 7
    2d2e:	89 0f       	add	r24, r25
    2d30:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	98 2f       	mov	r25, r24
    2d38:	99 0f       	add	r25, r25
    2d3a:	99 0f       	add	r25, r25
    2d3c:	99 0f       	add	r25, r25
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	82 95       	swap	r24
    2d42:	86 95       	lsr	r24
    2d44:	87 70       	andi	r24, 0x07	; 7
    2d46:	89 0f       	add	r24, r25
    2d48:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	88 0f       	add	r24, r24
    2d50:	88 0f       	add	r24, r24
    2d52:	88 0f       	add	r24, r24
    2d54:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    2d58:	f8 01       	movw	r30, r16
    2d5a:	82 85       	ldd	r24, Z+10	; 0x0a
    2d5c:	81 60       	ori	r24, 0x01	; 1
    2d5e:	82 87       	std	Z+10, r24	; 0x0a
    2d60:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2d64:	84 60       	ori	r24, 0x04	; 4
    2d66:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2d6a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2d6e:	84 60       	ori	r24, 0x04	; 4
    2d70:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_set_rplv();
    2d74:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2d78:	80 62       	ori	r24, 0x20	; 32
    2d7a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          Can_set_idemsk();
    2d7e:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2d82:	81 60       	ori	r24, 0x01	; 1
    2d84:	32 cd       	rjmp	.-1436   	; 0x27ea <can_cmd+0x14a>
          Can_clear_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    2d86:	19 82       	std	Y+1, r1	; 0x01
    2d88:	1a 82       	std	Y+2, r1	; 0x02
    2d8a:	1b 82       	std	Y+3, r1	; 0x03
    2d8c:	1c 82       	std	Y+4, r1	; 0x04
    2d8e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    2d92:	8b 81       	ldd	r24, Y+3	; 0x03
    2d94:	98 2f       	mov	r25, r24
    2d96:	99 0f       	add	r25, r25
    2d98:	99 0f       	add	r25, r25
    2d9a:	99 0f       	add	r25, r25
    2d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9e:	82 95       	swap	r24
    2da0:	86 95       	lsr	r24
    2da2:	87 70       	andi	r24, 0x07	; 7
    2da4:	89 0f       	add	r24, r25
    2da6:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	98 2f       	mov	r25, r24
    2dae:	99 0f       	add	r25, r25
    2db0:	99 0f       	add	r25, r25
    2db2:	99 0f       	add	r25, r25
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	82 95       	swap	r24
    2db8:	86 95       	lsr	r24
    2dba:	87 70       	andi	r24, 0x07	; 7
    2dbc:	89 0f       	add	r24, r25
    2dbe:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	88 0f       	add	r24, r24
    2dc6:	88 0f       	add	r24, r24
    2dc8:	88 0f       	add	r24, r24
    2dca:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    2dce:	d8 01       	movw	r26, r16
    2dd0:	1a 96       	adiw	r26, 0x0a	; 10
    2dd2:	8c 91       	ld	r24, X
    2dd4:	1a 97       	sbiw	r26, 0x0a	; 10
    2dd6:	81 60       	ori	r24, 0x01	; 1
    2dd8:	1a 96       	adiw	r26, 0x0a	; 10
    2dda:	8c 93       	st	X, r24
    2ddc:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2de0:	84 60       	ori	r24, 0x04	; 4
    2de2:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2de6:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2dea:	84 60       	ori	r24, 0x04	; 4
    2dec:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
          Can_clear_rplv();
    2df0:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2df4:	8f 7d       	andi	r24, 0xDF	; 223
    2df6:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2dfa:	f4 cc       	rjmp	.-1560   	; 0x27e4 <can_cmd+0x144>
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
    2dfc:	19 82       	std	Y+1, r1	; 0x01
    2dfe:	1a 82       	std	Y+2, r1	; 0x02
    2e00:	1b 82       	std	Y+3, r1	; 0x03
    2e02:	1c 82       	std	Y+4, r1	; 0x04
    2e04:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f00f7>
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	98 2f       	mov	r25, r24
    2e0c:	99 0f       	add	r25, r25
    2e0e:	99 0f       	add	r25, r25
    2e10:	99 0f       	add	r25, r25
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	82 95       	swap	r24
    2e16:	86 95       	lsr	r24
    2e18:	87 70       	andi	r24, 0x07	; 7
    2e1a:	89 0f       	add	r24, r25
    2e1c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f00f6>
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	98 2f       	mov	r25, r24
    2e24:	99 0f       	add	r25, r25
    2e26:	99 0f       	add	r25, r25
    2e28:	99 0f       	add	r25, r25
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	82 95       	swap	r24
    2e2e:	86 95       	lsr	r24
    2e30:	87 70       	andi	r24, 0x07	; 7
    2e32:	89 0f       	add	r24, r25
    2e34:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f00f5>
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	88 0f       	add	r24, r24
    2e3c:	88 0f       	add	r24, r24
    2e3e:	88 0f       	add	r24, r24
    2e40:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
          Can_clear_rtrmsk();
    2e44:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2e48:	8b 7f       	andi	r24, 0xFB	; 251
    2e4a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f00f4>
    2e4e:	ca cc       	rjmp	.-1644   	; 0x27e4 <can_cmd+0x144>
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    2e50:	d8 01       	movw	r26, r16
    2e52:	1a 96       	adiw	r26, 0x0a	; 10
    2e54:	8c 91       	ld	r24, X
    2e56:	1a 97       	sbiw	r26, 0x0a	; 10
    2e58:	81 ff       	sbrs	r24, 1
    2e5a:	61 c0       	rjmp	.+194    	; 0x2f1e <can_cmd+0x87e>
    2e5c:	15 96       	adiw	r26, 0x05	; 5
    2e5e:	8c 91       	ld	r24, X
    2e60:	15 97       	sbiw	r26, 0x05	; 5
    2e62:	98 2f       	mov	r25, r24
    2e64:	99 0f       	add	r25, r25
    2e66:	99 0f       	add	r25, r25
    2e68:	99 0f       	add	r25, r25
    2e6a:	14 96       	adiw	r26, 0x04	; 4
    2e6c:	8c 91       	ld	r24, X
    2e6e:	14 97       	sbiw	r26, 0x04	; 4
    2e70:	82 95       	swap	r24
    2e72:	86 95       	lsr	r24
    2e74:	87 70       	andi	r24, 0x07	; 7
    2e76:	89 0f       	add	r24, r25
    2e78:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2e7c:	14 96       	adiw	r26, 0x04	; 4
    2e7e:	8c 91       	ld	r24, X
    2e80:	14 97       	sbiw	r26, 0x04	; 4
    2e82:	98 2f       	mov	r25, r24
    2e84:	99 0f       	add	r25, r25
    2e86:	99 0f       	add	r25, r25
    2e88:	99 0f       	add	r25, r25
    2e8a:	13 96       	adiw	r26, 0x03	; 3
    2e8c:	8c 91       	ld	r24, X
    2e8e:	13 97       	sbiw	r26, 0x03	; 3
    2e90:	82 95       	swap	r24
    2e92:	86 95       	lsr	r24
    2e94:	87 70       	andi	r24, 0x07	; 7
    2e96:	89 0f       	add	r24, r25
    2e98:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2e9c:	13 96       	adiw	r26, 0x03	; 3
    2e9e:	8c 91       	ld	r24, X
    2ea0:	13 97       	sbiw	r26, 0x03	; 3
    2ea2:	98 2f       	mov	r25, r24
    2ea4:	99 0f       	add	r25, r25
    2ea6:	99 0f       	add	r25, r25
    2ea8:	99 0f       	add	r25, r25
    2eaa:	12 96       	adiw	r26, 0x02	; 2
    2eac:	8c 91       	ld	r24, X
    2eae:	12 97       	sbiw	r26, 0x02	; 2
    2eb0:	82 95       	swap	r24
    2eb2:	86 95       	lsr	r24
    2eb4:	87 70       	andi	r24, 0x07	; 7
    2eb6:	89 0f       	add	r24, r25
    2eb8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    2ebc:	12 96       	adiw	r26, 0x02	; 2
    2ebe:	8c 91       	ld	r24, X
    2ec0:	88 0f       	add	r24, r24
    2ec2:	88 0f       	add	r24, r24
    2ec4:	88 0f       	add	r24, r24
    2ec6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2eca:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2ece:	80 61       	ori	r24, 0x10	; 16
    2ed0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
          else              { Can_set_std_id(cmd->id.std);}
          if(cmd->dlc > 8) cmd->dlc = 8;
    2ed4:	f8 01       	movw	r30, r16
    2ed6:	86 81       	ldd	r24, Z+6	; 0x06
    2ed8:	89 30       	cpi	r24, 0x09	; 9
    2eda:	f0 f0       	brcs	.+60     	; 0x2f18 <can_cmd+0x878>
    2edc:	88 e0       	ldi	r24, 0x08	; 8
    2ede:	86 83       	std	Z+6, r24	; 0x06
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          if(cmd->dlc > 8) cmd->dlc = 8;
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2ee2:	d8 01       	movw	r26, r16
    2ee4:	17 96       	adiw	r26, 0x07	; 7
    2ee6:	ed 91       	ld	r30, X+
    2ee8:	fc 91       	ld	r31, X
    2eea:	18 97       	sbiw	r26, 0x08	; 8
    2eec:	e8 0f       	add	r30, r24
    2eee:	f1 1d       	adc	r31, r1
    2ef0:	90 81       	ld	r25, Z
    2ef2:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f00fa>
    2ef6:	8f 5f       	subi	r24, 0xFF	; 255
    2ef8:	16 96       	adiw	r26, 0x06	; 6
    2efa:	9c 91       	ld	r25, X
    2efc:	89 17       	cp	r24, r25
    2efe:	88 f3       	brcs	.-30     	; 0x2ee2 <can_cmd+0x842>
          cmd->ctrl.rtr=0; Can_clear_rtr();
    2f00:	d8 01       	movw	r26, r16
    2f02:	1a 96       	adiw	r26, 0x0a	; 10
    2f04:	8c 91       	ld	r24, X
    2f06:	1a 97       	sbiw	r26, 0x0a	; 10
    2f08:	8e 7f       	andi	r24, 0xFE	; 254
    2f0a:	1a 96       	adiw	r26, 0x0a	; 10
    2f0c:	8c 93       	st	X, r24
    2f0e:	1a 97       	sbiw	r26, 0x0a	; 10
    2f10:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2f14:	8b 7f       	andi	r24, 0xFB	; 251
    2f16:	13 ce       	rjmp	.-986    	; 0x2b3e <can_cmd+0x49e>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          if(cmd->dlc > 8) cmd->dlc = 8;
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    2f18:	81 11       	cpse	r24, r1
    2f1a:	e2 cf       	rjmp	.-60     	; 0x2ee0 <can_cmd+0x840>
    2f1c:	f1 cf       	rjmp	.-30     	; 0x2f00 <can_cmd+0x860>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    2f1e:	f8 01       	movw	r30, r16
    2f20:	93 81       	ldd	r25, Z+3	; 0x03
    2f22:	82 81       	ldd	r24, Z+2	; 0x02
    2f24:	86 95       	lsr	r24
    2f26:	86 95       	lsr	r24
    2f28:	86 95       	lsr	r24
    2f2a:	f0 e2       	ldi	r31, 0x20	; 32
    2f2c:	9f 9f       	mul	r25, r31
    2f2e:	80 0d       	add	r24, r0
    2f30:	11 24       	eor	r1, r1
    2f32:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2f36:	d8 01       	movw	r26, r16
    2f38:	12 96       	adiw	r26, 0x02	; 2
    2f3a:	8c 91       	ld	r24, X
    2f3c:	82 95       	swap	r24
    2f3e:	88 0f       	add	r24, r24
    2f40:	80 7e       	andi	r24, 0xE0	; 224
    2f42:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2f46:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2f4a:	8f 7e       	andi	r24, 0xEF	; 239
    2f4c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2f50:	c1 cf       	rjmp	.-126    	; 0x2ed4 <can_cmd+0x834>
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    2f52:	93 81       	ldd	r25, Z+3	; 0x03
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	86 95       	lsr	r24
    2f58:	86 95       	lsr	r24
    2f5a:	86 95       	lsr	r24
    2f5c:	b0 e2       	ldi	r27, 0x20	; 32
    2f5e:	9b 9f       	mul	r25, r27
    2f60:	80 0d       	add	r24, r0
    2f62:	11 24       	eor	r1, r1
    2f64:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2f68:	f8 01       	movw	r30, r16
    2f6a:	82 81       	ldd	r24, Z+2	; 0x02
    2f6c:	82 95       	swap	r24
    2f6e:	88 0f       	add	r24, r24
    2f70:	80 7e       	andi	r24, 0xE0	; 224
    2f72:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2f76:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2f7a:	8f 7e       	andi	r24, 0xEF	; 239
    2f7c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2f80:	70 cd       	rjmp	.-1312   	; 0x2a62 <can_cmd+0x3c2>
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    2f82:	f8 01       	movw	r30, r16
    2f84:	93 81       	ldd	r25, Z+3	; 0x03
    2f86:	82 81       	ldd	r24, Z+2	; 0x02
    2f88:	86 95       	lsr	r24
    2f8a:	86 95       	lsr	r24
    2f8c:	86 95       	lsr	r24
    2f8e:	f0 e2       	ldi	r31, 0x20	; 32
    2f90:	9f 9f       	mul	r25, r31
    2f92:	80 0d       	add	r24, r0
    2f94:	11 24       	eor	r1, r1
    2f96:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2f9a:	d8 01       	movw	r26, r16
    2f9c:	12 96       	adiw	r26, 0x02	; 2
    2f9e:	8c 91       	ld	r24, X
    2fa0:	82 95       	swap	r24
    2fa2:	88 0f       	add	r24, r24
    2fa4:	80 7e       	andi	r24, 0xE0	; 224
    2fa6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2faa:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2fae:	8f 7e       	andi	r24, 0xEF	; 239
    2fb0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2fb4:	6a cc       	rjmp	.-1836   	; 0x288a <can_cmd+0x1ea>
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
    2fb6:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2fba:	8b 7f       	andi	r24, 0xFB	; 251
    2fbc:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    2fc0:	57 ce       	rjmp	.-850    	; 0x2c70 <can_cmd+0x5d0>
          Can_config_rx();       
          break;
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    2fc2:	f8 01       	movw	r30, r16
    2fc4:	93 81       	ldd	r25, Z+3	; 0x03
    2fc6:	82 81       	ldd	r24, Z+2	; 0x02
    2fc8:	86 95       	lsr	r24
    2fca:	86 95       	lsr	r24
    2fcc:	86 95       	lsr	r24
    2fce:	f0 e2       	ldi	r31, 0x20	; 32
    2fd0:	9f 9f       	mul	r25, r31
    2fd2:	80 0d       	add	r24, r0
    2fd4:	11 24       	eor	r1, r1
    2fd6:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    2fda:	d8 01       	movw	r26, r16
    2fdc:	12 96       	adiw	r26, 0x02	; 2
    2fde:	8c 91       	ld	r24, X
    2fe0:	82 95       	swap	r24
    2fe2:	88 0f       	add	r24, r24
    2fe4:	80 7e       	andi	r24, 0xE0	; 224
    2fe6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    2fea:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2fee:	8f 7e       	andi	r24, 0xEF	; 239
    2ff0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    2ff4:	ca cc       	rjmp	.-1644   	; 0x298a <can_cmd+0x2ea>
          Can_config_tx();
          break;
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    2ff6:	93 81       	ldd	r25, Z+3	; 0x03
    2ff8:	82 81       	ldd	r24, Z+2	; 0x02
    2ffa:	86 95       	lsr	r24
    2ffc:	86 95       	lsr	r24
    2ffe:	86 95       	lsr	r24
    3000:	b0 e2       	ldi	r27, 0x20	; 32
    3002:	9b 9f       	mul	r25, r27
    3004:	80 0d       	add	r24, r0
    3006:	11 24       	eor	r1, r1
    3008:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    300c:	f8 01       	movw	r30, r16
    300e:	82 81       	ldd	r24, Z+2	; 0x02
    3010:	82 95       	swap	r24
    3012:	88 0f       	add	r24, r24
    3014:	80 7e       	andi	r24, 0xE0	; 224
    3016:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    301a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    301e:	8f 7e       	andi	r24, 0xEF	; 239
    3020:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3024:	81 cd       	rjmp	.-1278   	; 0x2b28 <can_cmd+0x488>
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	86 95       	lsr	r24
    302c:	86 95       	lsr	r24
    302e:	86 95       	lsr	r24
    3030:	b0 e2       	ldi	r27, 0x20	; 32
    3032:	9b 9f       	mul	r25, r27
    3034:	80 0d       	add	r24, r0
    3036:	11 24       	eor	r1, r1
    3038:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    303c:	f8 01       	movw	r30, r16
    303e:	82 81       	ldd	r24, Z+2	; 0x02
    3040:	82 95       	swap	r24
    3042:	88 0f       	add	r24, r24
    3044:	80 7e       	andi	r24, 0xE0	; 224
    3046:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    304a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    304e:	8f 7e       	andi	r24, 0xEF	; 239
    3050:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3054:	45 ce       	rjmp	.-886    	; 0x2ce0 <can_cmd+0x640>
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	82 81       	ldd	r24, Z+2	; 0x02
    305a:	86 95       	lsr	r24
    305c:	86 95       	lsr	r24
    305e:	86 95       	lsr	r24
    3060:	b0 e2       	ldi	r27, 0x20	; 32
    3062:	9b 9f       	mul	r25, r27
    3064:	80 0d       	add	r24, r0
    3066:	11 24       	eor	r1, r1
    3068:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    306c:	f8 01       	movw	r30, r16
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	82 95       	swap	r24
    3072:	88 0f       	add	r24, r24
    3074:	80 7e       	andi	r24, 0xE0	; 224
    3076:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    307a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    307e:	8f 7e       	andi	r24, 0xEF	; 239
    3080:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3084:	d7 cd       	rjmp	.-1106   	; 0x2c34 <can_cmd+0x594>

00003086 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    3086:	1f 93       	push	r17
    3088:	cf 93       	push	r28
    308a:	df 93       	push	r29
    308c:	fc 01       	movw	r30, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    308e:	91 85       	ldd	r25, Z+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    3090:	91 11       	cpse	r25, r1
    3092:	05 c0       	rjmp	.+10     	; 0x309e <can_get_status+0x18>
    {
        return CAN_STATUS_ERROR;
    3094:	82 e0       	ldi	r24, 0x02	; 2
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	08 95       	ret
U8 can_get_status (st_cmd_t* cmd)
{
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    309e:	9f 31       	cpi	r25, 0x1F	; 31
    30a0:	c9 f3       	breq	.-14     	; 0x3094 <can_get_status+0xe>
    30a2:	9f 3f       	cpi	r25, 0xFF	; 255
    30a4:	b9 f3       	breq	.-18     	; 0x3094 <can_get_status+0xe>
    30a6:	ef 01       	movw	r28, r30
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    30a8:	80 81       	ld	r24, Z
    30aa:	82 95       	swap	r24
    30ac:	80 7f       	andi	r24, 0xF0	; 240
    30ae:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f00ed>
    a_status = can_get_mob_status();
    30b2:	0e 94 0e 13 	call	0x261c	; 0x261c <can_get_mob_status>
    30b6:	18 2f       	mov	r17, r24
    
    switch (a_status)
    30b8:	80 32       	cpi	r24, 0x20	; 32
    30ba:	41 f0       	breq	.+16     	; 0x30cc <can_get_status+0x46>
    30bc:	08 f4       	brcc	.+2      	; 0x30c0 <can_get_status+0x3a>
    30be:	51 c0       	rjmp	.+162    	; 0x3162 <can_get_status+0xdc>
    30c0:	80 34       	cpi	r24, 0x40	; 64
    30c2:	09 f4       	brne	.+2      	; 0x30c6 <can_get_status+0x40>
    30c4:	44 c0       	rjmp	.+136    	; 0x314e <can_get_status+0xc8>
    30c6:	80 3a       	cpi	r24, 0xA0	; 160
    30c8:	09 f0       	breq	.+2      	; 0x30cc <can_get_status+0x46>
    30ca:	4f c0       	rjmp	.+158    	; 0x316a <can_get_status+0xe4>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    30cc:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    30d0:	8f 70       	andi	r24, 0x0F	; 15
    30d2:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
    30d4:	8f 81       	ldd	r24, Y+7	; 0x07
    30d6:	98 85       	ldd	r25, Y+8	; 0x08
    30d8:	0e 94 1b 13 	call	0x2636	; 0x2636 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    30dc:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    30e0:	92 fb       	bst	r25, 2
    30e2:	99 27       	eor	r25, r25
    30e4:	90 f9       	bld	r25, 0
    30e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30e8:	90 fb       	bst	r25, 0
    30ea:	80 f9       	bld	r24, 0
    30ec:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    30ee:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    30f2:	94 ff       	sbrs	r25, 4
    30f4:	44 c0       	rjmp	.+136    	; 0x317e <can_get_status+0xf8>
            {
                cmd->ctrl.ide = 1; // extended frame
    30f6:	82 60       	ori	r24, 0x02	; 2
    30f8:	8a 87       	std	Y+10, r24	; 0x0a
                Can_get_ext_id(cmd->id.ext);
    30fa:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    30fe:	86 95       	lsr	r24
    3100:	86 95       	lsr	r24
    3102:	86 95       	lsr	r24
    3104:	8d 83       	std	Y+5, r24	; 0x05
    3106:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    310a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    310e:	86 95       	lsr	r24
    3110:	86 95       	lsr	r24
    3112:	86 95       	lsr	r24
    3114:	20 e2       	ldi	r18, 0x20	; 32
    3116:	92 9f       	mul	r25, r18
    3118:	80 0d       	add	r24, r0
    311a:	11 24       	eor	r1, r1
    311c:	8c 83       	std	Y+4, r24	; 0x04
    311e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    3122:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    3126:	86 95       	lsr	r24
    3128:	86 95       	lsr	r24
    312a:	86 95       	lsr	r24
    312c:	20 e2       	ldi	r18, 0x20	; 32
    312e:	92 9f       	mul	r25, r18
    3130:	80 0d       	add	r24, r0
    3132:	11 24       	eor	r1, r1
    3134:	8b 83       	std	Y+3, r24	; 0x03
    3136:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f00f0>
    313a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f00f1>
    313e:	86 95       	lsr	r24
    3140:	86 95       	lsr	r24
    3142:	86 95       	lsr	r24
    3144:	20 e2       	ldi	r18, 0x20	; 32
    3146:	92 9f       	mul	r25, r18
    3148:	80 0d       	add	r24, r0
    314a:	11 24       	eor	r1, r1
    314c:	8a 83       	std	Y+2, r24	; 0x02
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    314e:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    3150:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3154:	8f 73       	andi	r24, 0x3F	; 63
    3156:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
            Can_clear_status_mob(); //   and reset MOb status
    315a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
            rtn_val = CAN_STATUS_COMPLETED;
    315e:	80 e0       	ldi	r24, 0x00	; 0
            break;
    3160:	9a cf       	rjmp	.-204    	; 0x3096 <can_get_status+0x10>
    }

    Can_set_mob(cmd->handle);
    a_status = can_get_mob_status();
    
    switch (a_status)
    3162:	81 11       	cpse	r24, r1
    3164:	02 c0       	rjmp	.+4      	; 0x316a <can_get_status+0xe4>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	96 cf       	rjmp	.-212    	; 0x3096 <can_get_status+0x10>
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    316a:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    316c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
    3170:	8f 73       	andi	r24, 0x3F	; 63
    3172:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f00ef>
            Can_clear_status_mob(); //   and reset MOb status
    3176:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f00ee>
            rtn_val = CAN_STATUS_ERROR;
    317a:	82 e0       	ldi	r24, 0x02	; 2
            break;
    317c:	8c cf       	rjmp	.-232    	; 0x3096 <can_get_status+0x10>
                cmd->ctrl.ide = 1; // extended frame
                Can_get_ext_id(cmd->id.ext);
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    317e:	8d 7f       	andi	r24, 0xFD	; 253
    3180:	8a 87       	std	Y+10, r24	; 0x0a
                    Can_get_std_id(cmd->id.std);
    3182:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    3186:	82 95       	swap	r24
    3188:	86 95       	lsr	r24
    318a:	87 70       	andi	r24, 0x07	; 7
    318c:	8b 83       	std	Y+3, r24	; 0x03
    318e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f00f2>
    3192:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f00f3>
    3196:	92 95       	swap	r25
    3198:	96 95       	lsr	r25
    319a:	97 70       	andi	r25, 0x07	; 7
    319c:	88 0f       	add	r24, r24
    319e:	88 0f       	add	r24, r24
    31a0:	88 0f       	add	r24, r24
    31a2:	89 0f       	add	r24, r25
    31a4:	8a 83       	std	Y+2, r24	; 0x02
    31a6:	d3 cf       	rjmp	.-90     	; 0x314e <can_get_status+0xc8>

000031a8 <initDAC>:
const WORD DAC_OUTPUT_2_5V = 512;


void initDAC(void)
{
    DACON = 0;
    31a8:	a0 e9       	ldi	r26, 0x90	; 144
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	1c 92       	st	X, r1
       ADMUX |= _BV(REFS0);
    31ae:	ec e7       	ldi	r30, 0x7C	; 124
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	80 64       	ori	r24, 0x40	; 64
    31b6:	80 83       	st	Z, r24
       ADMUX &= ~_BV(REFS1);
    31b8:	80 81       	ld	r24, Z
    31ba:	8f 77       	andi	r24, 0x7F	; 127
    31bc:	80 83       	st	Z, r24
       ADCSRB |= _BV(AREFEN);
    31be:	eb e7       	ldi	r30, 0x7B	; 123
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	80 81       	ld	r24, Z
    31c4:	80 62       	ori	r24, 0x20	; 32
    31c6:	80 83       	st	Z, r24

// Configures the output voltage to the specified 10-bit value
// Vout = DAC * Vref/1023
void setDAC(WORD vout)
{
    DACL = (BYTE)(vout & 0xFF);
    31c8:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f0091>
    DACH = (BYTE)((vout & 0x0300) >> 8);
    31cc:	82 e0       	ldi	r24, 0x02	; 2
    31ce:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__TEXT_REGION_LENGTH__+0x7f0092>
       ADCSRB |= _BV(AREFEN);
    // Config the output voltage value    
    setDAC(DAC_OUTPUT_2_5V);
    
    // Enable the DAC module and activate the output
    DACON |= (_BV(DAEN) | _BV(DAOE));        
    31d2:	8c 91       	ld	r24, X
    31d4:	83 60       	ori	r24, 0x03	; 3
    31d6:	8c 93       	st	X, r24
    31d8:	08 95       	ret

000031da <setDAC>:

// Configures the output voltage to the specified 10-bit value
// Vout = DAC * Vref/1023
void setDAC(WORD vout)
{
    DACL = (BYTE)(vout & 0xFF);
    31da:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f0091>
    DACH = (BYTE)((vout & 0x0300) >> 8);
    31de:	88 27       	eor	r24, r24
    31e0:	93 70       	andi	r25, 0x03	; 3
    31e2:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <__TEXT_REGION_LENGTH__+0x7f0092>
    31e6:	08 95       	ret

000031e8 <getDAC>:
// Returns the present output voltage of the DAC as a 10-bit value
WORD getDAC(void)
{
    WORD vout = 0;
    
    vout = DACL;
    31e8:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f0091>
    vout |= ((WORD)(DACH & 0x03) << 8); 
    31ec:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <__TEXT_REGION_LENGTH__+0x7f0092>
    
    return vout;
    31f0:	23 70       	andi	r18, 0x03	; 3
    31f2:	90 e0       	ldi	r25, 0x00	; 0
}
    31f4:	92 2b       	or	r25, r18
    31f6:	08 95       	ret

000031f8 <initLEDStateMachine>:

// Variable initialization for the 
//  LED state machine
void initLEDStateMachine(void)
{
    LEDState = LED_STATE_POST;
    31f8:	83 e0       	ldi	r24, 0x03	; 3
    31fa:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <LEDState>
    LEDBlinkStartTime = 0;
    31fe:	10 92 49 06 	sts	0x0649, r1	; 0x800649 <LEDBlinkStartTime>
    clear4HzTimer();
    3202:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <clear4HzTimer>
}

// Resets the counters for LED toggling
static void clearFlashCounters(void)
{
    flashCounter[0] = 0;
    3206:	e5 e4       	ldi	r30, 0x45	; 69
    3208:	f6 e0       	ldi	r31, 0x06	; 6
    320a:	10 82       	st	Z, r1
    flashCounter[1] = 0;
    320c:	11 82       	std	Z+1, r1	; 0x01
    flashCounter[2] = 0;
    320e:	12 82       	std	Z+2, r1	; 0x02
    flashCounter[3] = 0;
    3210:	13 82       	std	Z+3, r1	; 0x03
    LEDState = LED_STATE_POST;
    LEDBlinkStartTime = 0;
    clear4HzTimer();
    clearFlashCounters();

    timerPostStart = get4HzTimer();
    3212:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <get4HzTimer>
    3216:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <timerPostStart>
    321a:	08 95       	ret

0000321c <turnOnAllLEDs>:

// Turns on all row LEDs except those with no magnets
void turnOnAllLEDs(void)
{
    BYTE rowMask;    
    rowMask = getNoMagnetRowMask();
    321c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <getNoMagnetRowMask>

    rowMask = ~(rowMask); // Find the rows with magnets
    3220:	80 95       	com	r24

    // First turn off all LEDS 
    PORTB &= ~(_BV(PB1) | _BV(PB3) | _BV(PB4));
    3222:	95 b1       	in	r25, 0x05	; 5
    3224:	95 7e       	andi	r25, 0xE5	; 229
    3226:	95 b9       	out	0x05, r25	; 5
    PORTC &= ~(_BV(PC6));
    3228:	46 98       	cbi	0x08, 6	; 8

    if(rowMask & 0x01)
    322a:	80 fd       	sbrc	r24, 0
    {
        PORTB |= (_BV(PB1));
    322c:	29 9a       	sbi	0x05, 1	; 5
    }

    if(rowMask & 0x02)
    322e:	81 fd       	sbrc	r24, 1
    {
        PORTC |= (_BV(PC6));
    3230:	46 9a       	sbi	0x08, 6	; 8
    }

    if(rowMask & 0x04)
    3232:	82 fd       	sbrc	r24, 2
    {
        PORTB |= (_BV(PB4));
    3234:	2c 9a       	sbi	0x05, 4	; 5
    }

    if(rowMask & 0x08)
    3236:	83 fd       	sbrc	r24, 3
    {
        PORTB |= (_BV(PB3));
    3238:	2b 9a       	sbi	0x05, 3	; 5
    323a:	08 95       	ret

0000323c <stepLEDStateMachine>:
}

// Updates the system/LED state machine
// based on latest system status
void stepLEDStateMachine(void)
{
    323c:	1f 93       	push	r17
    323e:	cf 93       	push	r28
    3240:	df 93       	push	r29
    BYTE blockedRows = 0;
    BYTE timerVal;
    BYTE noMagMask = 0;
	

    timerVal = get4HzTimer();
    3242:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <get4HzTimer>
    3246:	d8 2f       	mov	r29, r24
    noMagMask = getNoMagnetRowMask();
    3248:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <getNoMagnetRowMask>
    324c:	18 2f       	mov	r17, r24

    switch(LEDState)
    324e:	c0 91 4a 06 	lds	r28, 0x064A	; 0x80064a <LEDState>
    3252:	c2 30       	cpi	r28, 0x02	; 2
    3254:	09 f4       	brne	.+2      	; 0x3258 <stepLEDStateMachine+0x1c>
    3256:	51 c0       	rjmp	.+162    	; 0x32fa <stepLEDStateMachine+0xbe>
    3258:	e0 f4       	brcc	.+56     	; 0x3292 <stepLEDStateMachine+0x56>
    325a:	cc 23       	and	r28, r28
    325c:	81 f1       	breq	.+96     	; 0x32be <stepLEDStateMachine+0x82>
    325e:	c1 30       	cpi	r28, 0x01	; 1
    3260:	a1 f4       	brne	.+40     	; 0x328a <stepLEDStateMachine+0x4e>
            }
                       
            break;
        
        case LED_STATE_ERROR:
            if(!getActiveSystemError())
    3262:	0e 94 97 08 	call	0x112e	; 0x112e <getActiveSystemError>
    3266:	88 23       	and	r24, r24
    3268:	09 f4       	brne	.+2      	; 0x326c <stepLEDStateMachine+0x30>
    326a:	81 c0       	rjmp	.+258    	; 0x336e <stepLEDStateMachine+0x132>
            {
                LEDState = LED_STATE_NORMAL; 
            }
            else
            {
                if(timerVal >= (BYTE)(LEDBlinkStartTime + FAST_BLINK_TICK_COUNT)) // timer count > fast blink count
    326c:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <LEDBlinkStartTime>
    3270:	8f 5f       	subi	r24, 0xFF	; 255
    3272:	d8 17       	cp	r29, r24
    3274:	50 f0       	brcs	.+20     	; 0x328a <stepLEDStateMachine+0x4e>
}

// Toggles all row LEDs
void toggleAllLEDs(void)
{
    PORTB ^= (_BV(PB1) | _BV(PB3) | _BV(PB4));
    3276:	95 b1       	in	r25, 0x05	; 5
    3278:	8a e1       	ldi	r24, 0x1A	; 26
    327a:	89 27       	eor	r24, r25
    327c:	85 b9       	out	0x05, r24	; 5
    PORTC ^= (_BV(PC6));
    327e:	98 b1       	in	r25, 0x08	; 8
    3280:	80 e4       	ldi	r24, 0x40	; 64
    3282:	89 27       	eor	r24, r25
    3284:	88 b9       	out	0x08, r24	; 8
            else
            {
                if(timerVal >= (BYTE)(LEDBlinkStartTime + FAST_BLINK_TICK_COUNT)) // timer count > fast blink count
                {
                    toggleAllLEDs();
                    LEDBlinkStartTime = timerVal;
    3286:	d0 93 49 06 	sts	0x0649, r29	; 0x800649 <LEDBlinkStartTime>
            break;
        
        default:
            break;
    }
}
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	1f 91       	pop	r17
    3290:	08 95       	ret
	

    timerVal = get4HzTimer();
    noMagMask = getNoMagnetRowMask();

    switch(LEDState)
    3292:	c3 30       	cpi	r28, 0x03	; 3
    3294:	29 f1       	breq	.+74     	; 0x32e0 <stepLEDStateMachine+0xa4>
    3296:	c4 30       	cpi	r28, 0x04	; 4
    3298:	c1 f7       	brne	.-16     	; 0x328a <stepLEDStateMachine+0x4e>
                LEDState = LED_STATE_INIT_NO_FLOW;
            }       
            break;

        case LED_STATE_INIT_NO_FLOW:
            if(getActiveSystemError())
    329a:	0e 94 97 08 	call	0x112e	; 0x112e <getActiveSystemError>
    329e:	88 23       	and	r24, r24
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <stepLEDStateMachine+0x68>
    32a2:	68 c0       	rjmp	.+208    	; 0x3374 <stepLEDStateMachine+0x138>
            break;
        
        case LED_STATE_BLOCKAGE:
            if(getActiveSystemError())
            {
                LEDState = LED_STATE_ERROR;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <LEDState>
}

// Forces all row LEDs to off
void turnOffAllLEDs(void)
{
    PORTB &= ~(_BV(PB1) | _BV(PB3) | _BV(PB4));
    32aa:	85 b1       	in	r24, 0x05	; 5
    32ac:	85 7e       	andi	r24, 0xE5	; 229
    32ae:	85 b9       	out	0x05, r24	; 5
    PORTC &= ~(_BV(PC6));
    32b0:	46 98       	cbi	0x08, 6	; 8
        case LED_STATE_BLOCKAGE:
            if(getActiveSystemError())
            {
                LEDState = LED_STATE_ERROR;
                turnOffAllLEDs();
                LEDBlinkStartTime = timerVal;
    32b2:	d0 93 49 06 	sts	0x0649, r29	; 0x800649 <LEDBlinkStartTime>
            break;
        
        default:
            break;
    }
}
    32b6:	df 91       	pop	r29
    32b8:	cf 91       	pop	r28
    32ba:	1f 91       	pop	r17
    32bc:	08 95       	ret
            }

            break;
            
        case LED_STATE_NORMAL:
            if(getActiveSystemError())
    32be:	0e 94 97 08 	call	0x112e	; 0x112e <getActiveSystemError>
    32c2:	81 11       	cpse	r24, r1
    32c4:	ef cf       	rjmp	.-34     	; 0x32a4 <stepLEDStateMachine+0x68>
            {
                LEDState = LED_STATE_ERROR;
                turnOffAllLEDs();
                LEDBlinkStartTime = timerVal;
            }
            else if(getActiveBlockageFlag()) //blockage message received
    32c6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <getActiveBlockageFlag>
    32ca:	88 23       	and	r24, r24
    32cc:	09 f4       	brne	.+2      	; 0x32d0 <stepLEDStateMachine+0x94>
    32ce:	78 c0       	rjmp	.+240    	; 0x33c0 <stepLEDStateMachine+0x184>
            {
                LEDState = LED_STATE_BLOCKAGE; 
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <LEDState>
                turnOnAllLEDs();
    32d6:	0e 94 0e 19 	call	0x321c	; 0x321c <turnOnAllLEDs>
                LEDBlinkStartTime = timerVal;
    32da:	d0 93 49 06 	sts	0x0649, r29	; 0x800649 <LEDBlinkStartTime>
    32de:	d5 cf       	rjmp	.-86     	; 0x328a <stepLEDStateMachine+0x4e>

// Turns on all row LEDs 
//  and ignores the unused row mask
static void forceOnAllLEDs(void)
{   
    PORTB |= (_BV(PB4));
    32e0:	2c 9a       	sbi	0x05, 4	; 5
    PORTB |= (_BV(PB3));
    32e2:	2b 9a       	sbi	0x05, 3	; 5
    PORTC |= (_BV(PC6));
    32e4:	46 9a       	sbi	0x08, 6	; 8
    PORTB |= (_BV(PB1));
    32e6:	29 9a       	sbi	0x05, 1	; 5

    switch(LEDState)
    {
        case LED_STATE_POST:
            forceOnAllLEDs();
            if(timerVal > (BYTE)(POST_DURATION_TICK_COUNT + timerPostStart))
    32e8:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <timerPostStart>
    32ec:	88 5f       	subi	r24, 0xF8	; 248
    32ee:	8d 17       	cp	r24, r29
    32f0:	60 f6       	brcc	.-104    	; 0x328a <stepLEDStateMachine+0x4e>
            {
                LEDState = LED_STATE_INIT_NO_FLOW;
    32f2:	84 e0       	ldi	r24, 0x04	; 4
    32f4:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <LEDState>
    32f8:	c8 cf       	rjmp	.-112    	; 0x328a <stepLEDStateMachine+0x4e>
            }            
            
            break;
        
        case LED_STATE_BLOCKAGE:
            if(getActiveSystemError())
    32fa:	0e 94 97 08 	call	0x112e	; 0x112e <getActiveSystemError>
    32fe:	81 11       	cpse	r24, r1
    3300:	d1 cf       	rjmp	.-94     	; 0x32a4 <stepLEDStateMachine+0x68>
                turnOffAllLEDs();
                LEDBlinkStartTime = timerVal;
            }
            else
            {
                blockedRows = getActiveBlockageRows();
    3302:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <getActiveBlockageRows>

                // Check for blockage timeouts                
                if(blockedRows & 0x01)
    3306:	80 fd       	sbrc	r24, 0
    3308:	4d c0       	rjmp	.+154    	; 0x33a4 <stepLEDStateMachine+0x168>
                    {
                        toggleRow1LED();
                        flashCounter[0] = 0;
                    }
                }
                else if(noMagMask & 0x01)
    330a:	10 ff       	sbrs	r17, 0
    330c:	78 c0       	rjmp	.+240    	; 0x33fe <stepLEDStateMachine+0x1c2>
                {
                    PORTB &= ~(_BV(PB1));
    330e:	29 98       	cbi	0x05, 1	; 5
                {
                    turnOnRow1LED();
                    flashCounter[0] = 0;
                }
                
                if(blockedRows & 0x02)
    3310:	81 ff       	sbrs	r24, 1
    3312:	5f c0       	rjmp	.+190    	; 0x33d2 <stepLEDStateMachine+0x196>
                {
                    flashCounter[1]++;
    3314:	90 91 46 06 	lds	r25, 0x0646	; 0x800646 <flashCounter+0x1>
    3318:	9f 5f       	subi	r25, 0xFF	; 255
    331a:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <flashCounter+0x1>

                    if(flashCounter[1] > SLOW_BLINK_TICK_COUNT)
    331e:	95 30       	cpi	r25, 0x05	; 5
    3320:	30 f0       	brcs	.+12     	; 0x332e <stepLEDStateMachine+0xf2>
    PORTB ^= (_BV(PB1));
}

void toggleRow2LED(void)
{
    PORTC ^= (_BV(PC6));
    3322:	28 b1       	in	r18, 0x08	; 8
    3324:	90 e4       	ldi	r25, 0x40	; 64
    3326:	92 27       	eor	r25, r18
    3328:	98 b9       	out	0x08, r25	; 8
                    flashCounter[1]++;

                    if(flashCounter[1] > SLOW_BLINK_TICK_COUNT)
                    {
                        toggleRow2LED();
                        flashCounter[1] = 0;
    332a:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <flashCounter+0x1>
                {
                    turnOnRow2LED();
                    flashCounter[1] = 0;
                }
                
                if(blockedRows & 0x04)
    332e:	82 ff       	sbrs	r24, 2
    3330:	4c c0       	rjmp	.+152    	; 0x33ca <stepLEDStateMachine+0x18e>
                {
                    flashCounter[2]++;
    3332:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <flashCounter+0x2>
    3336:	9f 5f       	subi	r25, 0xFF	; 255
    3338:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <flashCounter+0x2>

                    if(flashCounter[2] > SLOW_BLINK_TICK_COUNT)
    333c:	95 30       	cpi	r25, 0x05	; 5
    333e:	30 f0       	brcs	.+12     	; 0x334c <stepLEDStateMachine+0x110>
    PORTC ^= (_BV(PC6));
}

void toggleRow3LED(void)
{
    PORTB ^= (_BV(PB4));
    3340:	25 b1       	in	r18, 0x05	; 5
    3342:	90 e1       	ldi	r25, 0x10	; 16
    3344:	92 27       	eor	r25, r18
    3346:	95 b9       	out	0x05, r25	; 5
                    flashCounter[2]++;

                    if(flashCounter[2] > SLOW_BLINK_TICK_COUNT)
                    {
                        toggleRow3LED();
                        flashCounter[2] = 0;
    3348:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <flashCounter+0x2>
                {
                    turnOnRow3LED();
                    flashCounter[2] = 0;
                }
                
                if(blockedRows & 0x08)
    334c:	83 ff       	sbrs	r24, 3
    334e:	45 c0       	rjmp	.+138    	; 0x33da <stepLEDStateMachine+0x19e>
                {
                    flashCounter[3]++;
    3350:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <flashCounter+0x3>
    3354:	8f 5f       	subi	r24, 0xFF	; 255
    3356:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <flashCounter+0x3>

                    if(flashCounter[3] > SLOW_BLINK_TICK_COUNT)
    335a:	85 30       	cpi	r24, 0x05	; 5
    335c:	08 f4       	brcc	.+2      	; 0x3360 <stepLEDStateMachine+0x124>
    335e:	95 cf       	rjmp	.-214    	; 0x328a <stepLEDStateMachine+0x4e>
    PORTB ^= (_BV(PB4));
}

void toggleRow4LED(void)
{
    PORTB ^= (_BV(PB3));
    3360:	95 b1       	in	r25, 0x05	; 5
    3362:	88 e0       	ldi	r24, 0x08	; 8
    3364:	89 27       	eor	r24, r25
    3366:	85 b9       	out	0x05, r24	; 5
                    flashCounter[3]++;

                    if(flashCounter[3] > SLOW_BLINK_TICK_COUNT)
                    {
                        toggleRow4LED();
                        flashCounter[3] = 0;
    3368:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <flashCounter+0x3>
    336c:	8e cf       	rjmp	.-228    	; 0x328a <stepLEDStateMachine+0x4e>
            break;
        
        case LED_STATE_ERROR:
            if(!getActiveSystemError())
            {
                LEDState = LED_STATE_NORMAL; 
    336e:	10 92 4a 06 	sts	0x064A, r1	; 0x80064a <LEDState>
    3372:	8b cf       	rjmp	.-234    	; 0x328a <stepLEDStateMachine+0x4e>
            {
                LEDState = LED_STATE_ERROR;
                turnOffAllLEDs();
                LEDBlinkStartTime = timerVal;
            }
            else if(getFlowDetectedFlag() == 1)
    3374:	0e 94 65 0a 	call	0x14ca	; 0x14ca <getFlowDetectedFlag>
    3378:	81 30       	cpi	r24, 0x01	; 1
    337a:	09 f4       	brne	.+2      	; 0x337e <stepLEDStateMachine+0x142>
    337c:	4c c0       	rjmp	.+152    	; 0x3416 <stepLEDStateMachine+0x1da>
            }
            else // No flow detected yet
            {
                // Use one of the counters to time the LED toggle.
                // All 4 LEDS should flash together so no need to use all 4 counters.
                flashCounter[0]++;
    337e:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <flashCounter>
    3382:	8f 5f       	subi	r24, 0xFF	; 255
    3384:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <flashCounter>

                if(flashCounter[0] > SLOW_BLINK_TICK_COUNT)
    3388:	85 30       	cpi	r24, 0x05	; 5
    338a:	08 f4       	brcc	.+2      	; 0x338e <stepLEDStateMachine+0x152>
    338c:	7e cf       	rjmp	.-260    	; 0x328a <stepLEDStateMachine+0x4e>
}

// Toggles all row LEDs
void toggleAllLEDs(void)
{
    PORTB ^= (_BV(PB1) | _BV(PB3) | _BV(PB4));
    338e:	95 b1       	in	r25, 0x05	; 5
    3390:	8a e1       	ldi	r24, 0x1A	; 26
    3392:	89 27       	eor	r24, r25
    3394:	85 b9       	out	0x05, r24	; 5
    PORTC ^= (_BV(PC6));
    3396:	98 b1       	in	r25, 0x08	; 8
    3398:	80 e4       	ldi	r24, 0x40	; 64
    339a:	89 27       	eor	r24, r25
    339c:	88 b9       	out	0x08, r24	; 8
                flashCounter[0]++;

                if(flashCounter[0] > SLOW_BLINK_TICK_COUNT)
                {
                    toggleAllLEDs();
                    flashCounter[0] = 0;
    339e:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <flashCounter>
    33a2:	73 cf       	rjmp	.-282    	; 0x328a <stepLEDStateMachine+0x4e>
                blockedRows = getActiveBlockageRows();

                // Check for blockage timeouts                
                if(blockedRows & 0x01)
                {
                    flashCounter[0]++;
    33a4:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <flashCounter>
    33a8:	9f 5f       	subi	r25, 0xFF	; 255
    33aa:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <flashCounter>

                    if(flashCounter[0] > SLOW_BLINK_TICK_COUNT)
    33ae:	95 30       	cpi	r25, 0x05	; 5
    33b0:	08 f4       	brcc	.+2      	; 0x33b4 <stepLEDStateMachine+0x178>
    33b2:	ae cf       	rjmp	.-164    	; 0x3310 <stepLEDStateMachine+0xd4>
    PORTC ^= (_BV(PC6));
}

void toggleRow1LED(void)
{
    PORTB ^= (_BV(PB1));
    33b4:	95 b1       	in	r25, 0x05	; 5
    33b6:	c9 27       	eor	r28, r25
    33b8:	c5 b9       	out	0x05, r28	; 5
                    flashCounter[0]++;

                    if(flashCounter[0] > SLOW_BLINK_TICK_COUNT)
                    {
                        toggleRow1LED();
                        flashCounter[0] = 0;
    33ba:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <flashCounter>
    33be:	a8 cf       	rjmp	.-176    	; 0x3310 <stepLEDStateMachine+0xd4>
            break;
        
        default:
            break;
    }
}
    33c0:	df 91       	pop	r29
    33c2:	cf 91       	pop	r28
    33c4:	1f 91       	pop	r17
                turnOnAllLEDs();
                LEDBlinkStartTime = timerVal;
            }
            else
            {
                turnOnAllLEDs();
    33c6:	0c 94 0e 19 	jmp	0x321c	; 0x321c <turnOnAllLEDs>
                    {
                        toggleRow3LED();
                        flashCounter[2] = 0;
                    }
                }
                else if(noMagMask & 0x04)
    33ca:	12 ff       	sbrs	r17, 2
    33cc:	14 c0       	rjmp	.+40     	; 0x33f6 <stepLEDStateMachine+0x1ba>
                {
                    PORTB &= ~(_BV(PB4));
    33ce:	2c 98       	cbi	0x05, 4	; 5
    33d0:	bd cf       	rjmp	.-134    	; 0x334c <stepLEDStateMachine+0x110>
                    {
                        toggleRow2LED();
                        flashCounter[1] = 0;
                    }
                }
                else if(noMagMask & 0x02)
    33d2:	11 ff       	sbrs	r17, 1
    33d4:	18 c0       	rjmp	.+48     	; 0x3406 <stepLEDStateMachine+0x1ca>
                {
                    PORTC &= ~(_BV(PC6));
    33d6:	46 98       	cbi	0x08, 6	; 8
    33d8:	aa cf       	rjmp	.-172    	; 0x332e <stepLEDStateMachine+0xf2>
                    {
                        toggleRow4LED();
                        flashCounter[3] = 0;
                    }
                }
                else if(noMagMask & 0x08)
    33da:	13 ff       	sbrs	r17, 3
    33dc:	18 c0       	rjmp	.+48     	; 0x340e <stepLEDStateMachine+0x1d2>
                {
                    PORTB &= ~(_BV(PB3));
    33de:	2b 98       	cbi	0x05, 3	; 5
                else
                {
                    turnOnRow4LED();
                    flashCounter[3] = 0;
                }                
                if(blockedRows == 0)
    33e0:	81 11       	cpse	r24, r1
    33e2:	53 cf       	rjmp	.-346    	; 0x328a <stepLEDStateMachine+0x4e>
                {
                    LEDState = LED_STATE_NORMAL;
    33e4:	10 92 4a 06 	sts	0x064A, r1	; 0x80064a <LEDState>
                    turnOnAllLEDs();
    33e8:	0e 94 0e 19 	call	0x321c	; 0x321c <turnOnAllLEDs>
            break;
        
        default:
            break;
    }
}
    33ec:	df 91       	pop	r29
    33ee:	cf 91       	pop	r28
    33f0:	1f 91       	pop	r17
                }                
                if(blockedRows == 0)
                {
                    LEDState = LED_STATE_NORMAL;
                    turnOnAllLEDs();
                    clearActiveBlockageFlag();
    33f2:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <clearActiveBlockageFlag>
    PORTC |= (_BV(PC6));
}

void turnOnRow3LED(void)
{
    PORTB |= (_BV(PB4));
    33f6:	2c 9a       	sbi	0x05, 4	; 5
                    PORTB &= ~(_BV(PB4));
                }
                else
                {
                    turnOnRow3LED();
                    flashCounter[2] = 0;
    33f8:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <flashCounter+0x2>
    33fc:	a7 cf       	rjmp	.-178    	; 0x334c <stepLEDStateMachine+0x110>
    PORTB ^= (_BV(PB3));
}

void turnOnRow1LED(void)
{
    PORTB |= (_BV(PB1));
    33fe:	29 9a       	sbi	0x05, 1	; 5
                    PORTB &= ~(_BV(PB1));
                }
                else
                {
                    turnOnRow1LED();
                    flashCounter[0] = 0;
    3400:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <flashCounter>
    3404:	85 cf       	rjmp	.-246    	; 0x3310 <stepLEDStateMachine+0xd4>
    PORTB |= (_BV(PB1));
}

void turnOnRow2LED(void)
{
    PORTC |= (_BV(PC6));
    3406:	46 9a       	sbi	0x08, 6	; 8
                    PORTC &= ~(_BV(PC6));
                }
                else
                {
                    turnOnRow2LED();
                    flashCounter[1] = 0;
    3408:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <flashCounter+0x1>
    340c:	90 cf       	rjmp	.-224    	; 0x332e <stepLEDStateMachine+0xf2>
    PORTB |= (_BV(PB4));
}

void turnOnRow4LED(void)
{
    PORTB |= (_BV(PB3));
    340e:	2b 9a       	sbi	0x05, 3	; 5
                    PORTB &= ~(_BV(PB3));
                }
                else
                {
                    turnOnRow4LED();
                    flashCounter[3] = 0;
    3410:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <flashCounter+0x3>
    3414:	e5 cf       	rjmp	.-54     	; 0x33e0 <stepLEDStateMachine+0x1a4>

// Turns on all row LEDs 
//  and ignores the unused row mask
static void forceOnAllLEDs(void)
{   
    PORTB |= (_BV(PB4));
    3416:	2c 9a       	sbi	0x05, 4	; 5
    PORTB |= (_BV(PB3));
    3418:	2b 9a       	sbi	0x05, 3	; 5
    PORTC |= (_BV(PC6));
    341a:	46 9a       	sbi	0x08, 6	; 8
    PORTB |= (_BV(PB1));
    341c:	29 9a       	sbi	0x05, 1	; 5
}

// Resets the counters for LED toggling
static void clearFlashCounters(void)
{
    flashCounter[0] = 0;
    341e:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <flashCounter>
    flashCounter[1] = 0;
    3422:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <flashCounter+0x1>
    flashCounter[2] = 0;
    3426:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <flashCounter+0x2>
    flashCounter[3] = 0;
    342a:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <flashCounter+0x3>
            }
            else if(getFlowDetectedFlag() == 1)
            {
                forceOnAllLEDs();
                clearFlashCounters();
                LEDState = LED_STATE_NORMAL;
    342e:	10 92 4a 06 	sts	0x064A, r1	; 0x80064a <LEDState>
    3432:	2b cf       	rjmp	.-426    	; 0x328a <stepLEDStateMachine+0x4e>

00003434 <turnOffAllLEDs>:
}

// Forces all row LEDs to off
void turnOffAllLEDs(void)
{
    PORTB &= ~(_BV(PB1) | _BV(PB3) | _BV(PB4));
    3434:	85 b1       	in	r24, 0x05	; 5
    3436:	85 7e       	andi	r24, 0xE5	; 229
    3438:	85 b9       	out	0x05, r24	; 5
    PORTC &= ~(_BV(PC6));
    343a:	46 98       	cbi	0x08, 6	; 8
    343c:	08 95       	ret

0000343e <toggleAllLEDs>:
}

// Toggles all row LEDs
void toggleAllLEDs(void)
{
    PORTB ^= (_BV(PB1) | _BV(PB3) | _BV(PB4));
    343e:	95 b1       	in	r25, 0x05	; 5
    3440:	8a e1       	ldi	r24, 0x1A	; 26
    3442:	89 27       	eor	r24, r25
    3444:	85 b9       	out	0x05, r24	; 5
    PORTC ^= (_BV(PC6));
    3446:	98 b1       	in	r25, 0x08	; 8
    3448:	80 e4       	ldi	r24, 0x40	; 64
    344a:	89 27       	eor	r24, r25
    344c:	88 b9       	out	0x08, r24	; 8
    344e:	08 95       	ret

00003450 <toggleRow1LED>:
}

void toggleRow1LED(void)
{
    PORTB ^= (_BV(PB1));
    3450:	95 b1       	in	r25, 0x05	; 5
    3452:	82 e0       	ldi	r24, 0x02	; 2
    3454:	89 27       	eor	r24, r25
    3456:	85 b9       	out	0x05, r24	; 5
    3458:	08 95       	ret

0000345a <toggleRow2LED>:
}

void toggleRow2LED(void)
{
    PORTC ^= (_BV(PC6));
    345a:	98 b1       	in	r25, 0x08	; 8
    345c:	80 e4       	ldi	r24, 0x40	; 64
    345e:	89 27       	eor	r24, r25
    3460:	88 b9       	out	0x08, r24	; 8
    3462:	08 95       	ret

00003464 <toggleRow3LED>:
}

void toggleRow3LED(void)
{
    PORTB ^= (_BV(PB4));
    3464:	95 b1       	in	r25, 0x05	; 5
    3466:	80 e1       	ldi	r24, 0x10	; 16
    3468:	89 27       	eor	r24, r25
    346a:	85 b9       	out	0x05, r24	; 5
    346c:	08 95       	ret

0000346e <readHwPartNum>:
        serialNum[i] = eeprom_read_byte((BYTE *)(EE_SERIAL_NUM_LOC + i));
    }
}

void readHwPartNum(BYTE * partNumPtr)
{
    346e:	0f 93       	push	r16
    3470:	1f 93       	push	r17
    3472:	cf 93       	push	r28
    3474:	df 93       	push	r29
    3476:	8c 01       	movw	r16, r24
    3478:	c0 eb       	ldi	r28, 0xB0	; 176
    347a:	d7 e0       	ldi	r29, 0x07	; 7
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_PART_NUM; i++)
    {
        eeprom_busy_wait();
    347c:	f9 99       	sbic	0x1f, 1	; 31
    347e:	fe cf       	rjmp	.-4      	; 0x347c <readHwPartNum+0xe>
        partNumPtr[i] = eeprom_read_byte((BYTE *)(EE_HW_PART_NUM_LOC + i));
    3480:	ce 01       	movw	r24, r28
    3482:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    3486:	f8 01       	movw	r30, r16
    3488:	81 93       	st	Z+, r24
    348a:	8f 01       	movw	r16, r30
    348c:	21 96       	adiw	r28, 0x01	; 1

void readHwPartNum(BYTE * partNumPtr)
{
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_PART_NUM; i++)
    348e:	c0 3c       	cpi	r28, 0xC0	; 192
    3490:	f7 e0       	ldi	r31, 0x07	; 7
    3492:	df 07       	cpc	r29, r31
    3494:	99 f7       	brne	.-26     	; 0x347c <readHwPartNum+0xe>
    {
        eeprom_busy_wait();
        partNumPtr[i] = eeprom_read_byte((BYTE *)(EE_HW_PART_NUM_LOC + i));
    }    
}
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	1f 91       	pop	r17
    349c:	0f 91       	pop	r16
    349e:	08 95       	ret

000034a0 <readHwVersion>:

void readHwVersion(BYTE * versionPtr)
{
    34a0:	0f 93       	push	r16
    34a2:	1f 93       	push	r17
    34a4:	cf 93       	push	r28
    34a6:	df 93       	push	r29
    34a8:	8c 01       	movw	r16, r24
    34aa:	c0 ed       	ldi	r28, 0xD0	; 208
    34ac:	d7 e0       	ldi	r29, 0x07	; 7
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_VER; i++)
    {
        eeprom_busy_wait();
    34ae:	f9 99       	sbic	0x1f, 1	; 31
    34b0:	fe cf       	rjmp	.-4      	; 0x34ae <readHwVersion+0xe>
        versionPtr[i] = eeprom_read_byte((BYTE *)(EE_HW_VER_LOC + i));
    34b2:	ce 01       	movw	r24, r28
    34b4:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    34b8:	f8 01       	movw	r30, r16
    34ba:	81 93       	st	Z+, r24
    34bc:	8f 01       	movw	r16, r30
    34be:	21 96       	adiw	r28, 0x01	; 1

void readHwVersion(BYTE * versionPtr)
{
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_VER; i++)
    34c0:	c0 3e       	cpi	r28, 0xE0	; 224
    34c2:	f7 e0       	ldi	r31, 0x07	; 7
    34c4:	df 07       	cpc	r29, r31
    34c6:	99 f7       	brne	.-26     	; 0x34ae <readHwVersion+0xe>
    {
        eeprom_busy_wait();
        versionPtr[i] = eeprom_read_byte((BYTE *)(EE_HW_VER_LOC + i));
    }
}
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	1f 91       	pop	r17
    34ce:	0f 91       	pop	r16
    34d0:	08 95       	ret

000034d2 <readFwPartNum>:

void readFwPartNum(BYTE * fwPartNum)
{  
    strcpy_P((char *)fwPartNum, FwPartNum);
    34d2:	64 ea       	ldi	r22, 0xA4	; 164
    34d4:	71 e0       	ldi	r23, 0x01	; 1
    34d6:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <strcpy_P>

000034da <readWifiStatus>:
    strcpy_P(fwVersion, p);
}

void readWifiStatus(void)
{
    eeprom_busy_wait();
    34da:	f9 99       	sbic	0x1f, 1	; 31
    34dc:	fe cf       	rjmp	.-4      	; 0x34da <readWifiStatus>
    wifiStatus = eeprom_read_byte((BYTE *)(EE_WIFI_CONFIG_STATE_LOC));
}
    34de:	08 95       	ret

000034e0 <writeSerialNumToEeprom>:


void writeSerialNumToEeprom(BYTE * serialPtr)
{
    34e0:	0f 93       	push	r16
    34e2:	1f 93       	push	r17
    34e4:	cf 93       	push	r28
    34e6:	df 93       	push	r29
    BYTE i;

    _CLI();
    34e8:	f8 94       	cli
    34ea:	8c 01       	movw	r16, r24
    34ec:	c6 ea       	ldi	r28, 0xA6	; 166
    34ee:	d7 e0       	ldi	r29, 0x07	; 7
    for(i = 0; i < 8; i++)
    {
        eeprom_busy_wait();
    34f0:	f9 99       	sbic	0x1f, 1	; 31
    34f2:	fe cf       	rjmp	.-4      	; 0x34f0 <writeSerialNumToEeprom+0x10>
        eeprom_write_byte((BYTE *)(EE_SERIAL_NUM_LOC + i), *serialPtr);
    34f4:	f8 01       	movw	r30, r16
    34f6:	61 91       	ld	r22, Z+
    34f8:	8f 01       	movw	r16, r30
    34fa:	ce 01       	movw	r24, r28
    34fc:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
    3500:	21 96       	adiw	r28, 0x01	; 1
void writeSerialNumToEeprom(BYTE * serialPtr)
{
    BYTE i;

    _CLI();
    for(i = 0; i < 8; i++)
    3502:	ce 3a       	cpi	r28, 0xAE	; 174
    3504:	f7 e0       	ldi	r31, 0x07	; 7
    3506:	df 07       	cpc	r29, r31
    3508:	99 f7       	brne	.-26     	; 0x34f0 <writeSerialNumToEeprom+0x10>
    {
        eeprom_busy_wait();
        eeprom_write_byte((BYTE *)(EE_SERIAL_NUM_LOC + i), *serialPtr);
        serialPtr++;
    }
    eeprom_busy_wait();
    350a:	f9 99       	sbic	0x1f, 1	; 31
    350c:	fe cf       	rjmp	.-4      	; 0x350a <writeSerialNumToEeprom+0x2a>
    eeprom_write_byte((BYTE *)(EE_SERIAL_NUM_LOC + 8), '\0');
    350e:	60 e0       	ldi	r22, 0x00	; 0
    3510:	8e ea       	ldi	r24, 0xAE	; 174
    3512:	97 e0       	ldi	r25, 0x07	; 7
    3514:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
    _SEI();
    3518:	78 94       	sei
}
    351a:	df 91       	pop	r29
    351c:	cf 91       	pop	r28
    351e:	1f 91       	pop	r17
    3520:	0f 91       	pop	r16
    3522:	08 95       	ret

00003524 <writeHwVersionToEeprom>:

void writeHwVersionToEeprom(BYTE * versionPtr)
{
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    3528:	cf 93       	push	r28
    352a:	df 93       	push	r29
    BYTE i;

    _CLI();
    352c:	f8 94       	cli
    352e:	8c 01       	movw	r16, r24
    3530:	c0 ed       	ldi	r28, 0xD0	; 208
    3532:	d7 e0       	ldi	r29, 0x07	; 7
    for(i = 0; i < 5; i++)
    {
        eeprom_busy_wait();
    3534:	f9 99       	sbic	0x1f, 1	; 31
    3536:	fe cf       	rjmp	.-4      	; 0x3534 <writeHwVersionToEeprom+0x10>
        eeprom_write_byte((BYTE *)(EE_HW_VER_LOC + i), *versionPtr);
    3538:	f8 01       	movw	r30, r16
    353a:	61 91       	ld	r22, Z+
    353c:	8f 01       	movw	r16, r30
    353e:	ce 01       	movw	r24, r28
    3540:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
    3544:	21 96       	adiw	r28, 0x01	; 1
void writeHwVersionToEeprom(BYTE * versionPtr)
{
    BYTE i;

    _CLI();
    for(i = 0; i < 5; i++)
    3546:	c5 3d       	cpi	r28, 0xD5	; 213
    3548:	f7 e0       	ldi	r31, 0x07	; 7
    354a:	df 07       	cpc	r29, r31
    354c:	99 f7       	brne	.-26     	; 0x3534 <writeHwVersionToEeprom+0x10>
    {
        eeprom_busy_wait();
        eeprom_write_byte((BYTE *)(EE_HW_VER_LOC + i), *versionPtr);
        versionPtr++;
    }
    eeprom_busy_wait();
    354e:	f9 99       	sbic	0x1f, 1	; 31
    3550:	fe cf       	rjmp	.-4      	; 0x354e <writeHwVersionToEeprom+0x2a>
    eeprom_write_byte((BYTE *)(EE_HW_VER_LOC + 5), '\0');
    3552:	60 e0       	ldi	r22, 0x00	; 0
    3554:	85 ed       	ldi	r24, 0xD5	; 213
    3556:	97 e0       	ldi	r25, 0x07	; 7
    3558:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
    _SEI();
    355c:	78 94       	sei
}
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	1f 91       	pop	r17
    3564:	0f 91       	pop	r16
    3566:	08 95       	ret

00003568 <writeHwPartNumToEeprom>:

void writeHwPartNumToEeprom(BYTE * hwPartNumPtr, BYTE segmentNumber)
{
    3568:	ef 92       	push	r14
    356a:	ff 92       	push	r15
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    BYTE i;
    BYTE writeSize = 0;
    BYTE writeOffset = 0;

    if(segmentNumber == 0)
    3574:	66 23       	and	r22, r22
    3576:	b1 f0       	breq	.+44     	; 0x35a4 <writeHwPartNumToEeprom+0x3c>
    {
        writeSize = 8;
        writeOffset = 0;
    }
    else if(segmentNumber == 1)
    3578:	61 30       	cpi	r22, 0x01	; 1
    357a:	a1 f1       	breq	.+104    	; 0x35e4 <writeHwPartNumToEeprom+0x7c>

void writeHwPartNumToEeprom(BYTE * hwPartNumPtr, BYTE segmentNumber)
{
    BYTE i;
    BYTE writeSize = 0;
    BYTE writeOffset = 0;
    357c:	c0 e0       	ldi	r28, 0x00	; 0
}

void writeHwPartNumToEeprom(BYTE * hwPartNumPtr, BYTE segmentNumber)
{
    BYTE i;
    BYTE writeSize = 0;
    357e:	20 e0       	ldi	r18, 0x00	; 0
    {
        writeSize = 5;
        writeOffset = 8;
    }

    _CLI();
    3580:	f8 94       	cli
    for(i = 0; i < writeSize; i++)
    3582:	21 11       	cpse	r18, r1
    3584:	14 c0       	rjmp	.+40     	; 0x35ae <writeHwPartNumToEeprom+0x46>
    {
        eeprom_busy_wait();
        eeprom_write_byte((BYTE *)(EE_HW_PART_NUM_LOC + writeOffset + i), *hwPartNumPtr);
        hwPartNumPtr++;
    }
    eeprom_busy_wait();
    3586:	f9 99       	sbic	0x1f, 1	; 31
    3588:	fe cf       	rjmp	.-4      	; 0x3586 <writeHwPartNumToEeprom+0x1e>
    eeprom_write_byte((BYTE *)(EE_HW_PART_NUM_LOC + 13), '\0');
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	8d eb       	ldi	r24, 0xBD	; 189
    358e:	97 e0       	ldi	r25, 0x07	; 7
    3590:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
    _SEI();
    3594:	78 94       	sei
}
    3596:	df 91       	pop	r29
    3598:	cf 91       	pop	r28
    359a:	1f 91       	pop	r17
    359c:	0f 91       	pop	r16
    359e:	ff 90       	pop	r15
    35a0:	ef 90       	pop	r14
    35a2:	08 95       	ret
    BYTE writeOffset = 0;

    if(segmentNumber == 0)
    {
        writeSize = 8;
        writeOffset = 0;
    35a4:	c0 e0       	ldi	r28, 0x00	; 0
    BYTE writeSize = 0;
    BYTE writeOffset = 0;

    if(segmentNumber == 0)
    {
        writeSize = 8;
    35a6:	28 e0       	ldi	r18, 0x08	; 8
    {
        writeSize = 5;
        writeOffset = 8;
    }

    _CLI();
    35a8:	f8 94       	cli
    for(i = 0; i < writeSize; i++)
    35aa:	22 23       	and	r18, r18
    35ac:	61 f3       	breq	.-40     	; 0x3586 <writeHwPartNumToEeprom+0x1e>
    35ae:	8c 01       	movw	r16, r24
    35b0:	d0 e0       	ldi	r29, 0x00	; 0
    35b2:	c0 55       	subi	r28, 0x50	; 80
    35b4:	d8 4f       	sbci	r29, 0xF8	; 248
    35b6:	21 50       	subi	r18, 0x01	; 1
    35b8:	e2 2e       	mov	r14, r18
    35ba:	f1 2c       	mov	r15, r1
    35bc:	8f ef       	ldi	r24, 0xFF	; 255
    35be:	e8 1a       	sub	r14, r24
    35c0:	f8 0a       	sbc	r15, r24
    35c2:	e0 0e       	add	r14, r16
    35c4:	f1 1e       	adc	r15, r17
    {
        eeprom_busy_wait();
    35c6:	f9 99       	sbic	0x1f, 1	; 31
    35c8:	fe cf       	rjmp	.-4      	; 0x35c6 <writeHwPartNumToEeprom+0x5e>
        eeprom_write_byte((BYTE *)(EE_HW_PART_NUM_LOC + writeOffset + i), *hwPartNumPtr);
    35ca:	f8 01       	movw	r30, r16
    35cc:	61 91       	ld	r22, Z+
    35ce:	8f 01       	movw	r16, r30
    35d0:	ce 01       	movw	r24, r28
    35d2:	0e 94 01 20 	call	0x4002	; 0x4002 <eeprom_write_byte>
    35d6:	21 96       	adiw	r28, 0x01	; 1
        writeSize = 5;
        writeOffset = 8;
    }

    _CLI();
    for(i = 0; i < writeSize; i++)
    35d8:	0e 15       	cp	r16, r14
    35da:	1f 05       	cpc	r17, r15
    35dc:	a1 f7       	brne	.-24     	; 0x35c6 <writeHwPartNumToEeprom+0x5e>
    {
        eeprom_busy_wait();
        eeprom_write_byte((BYTE *)(EE_HW_PART_NUM_LOC + writeOffset + i), *hwPartNumPtr);
        hwPartNumPtr++;
    }
    eeprom_busy_wait();
    35de:	f9 99       	sbic	0x1f, 1	; 31
    35e0:	d2 cf       	rjmp	.-92     	; 0x3586 <writeHwPartNumToEeprom+0x1e>
    35e2:	d3 cf       	rjmp	.-90     	; 0x358a <writeHwPartNumToEeprom+0x22>
        writeOffset = 0;
    }
    else if(segmentNumber == 1)
    {
        writeSize = 5;
        writeOffset = 8;
    35e4:	c8 e0       	ldi	r28, 0x08	; 8
        writeSize = 8;
        writeOffset = 0;
    }
    else if(segmentNumber == 1)
    {
        writeSize = 5;
    35e6:	25 e0       	ldi	r18, 0x05	; 5
    35e8:	df cf       	rjmp	.-66     	; 0x35a8 <writeHwPartNumToEeprom+0x40>

000035ea <__vector_12>:
DATE:       WHO:  CHANGE DESCRIPTION:
======================================================================
05/08/2004  BWT   Created.
*******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    35ea:	1f 92       	push	r1
    35ec:	0f 92       	push	r0
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	0f 92       	push	r0
    35f2:	11 24       	eor	r1, r1
    35f4:	8f 93       	push	r24
    35f6:	9f 93       	push	r25
    scbyTicksPending++;
    35f8:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <scbyTicksPending>
    35fc:	8f 5f       	subi	r24, 0xFF	; 255
    35fe:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <scbyTicksPending>
    OCR1A  = OCR1A_COUNT_FOR_TICK; // reset output compare value;		
    3602:	89 e0       	ldi	r24, 0x09	; 9
    3604:	9d e3       	ldi	r25, 0x3D	; 61
    3606:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    360a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
} 
    360e:	9f 91       	pop	r25
    3610:	8f 91       	pop	r24
    3612:	0f 90       	pop	r0
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	0f 90       	pop	r0
    3618:	1f 90       	pop	r1
    361a:	18 95       	reti

0000361c <main>:
/*******************************************************************************/

/*******************************************************************************/

int main(void)
{    
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	00 d0       	rcall	.+0      	; 0x3622 <main+0x6>
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62

    _CLI(); //disable all interrupts
    3626:	f8 94       	cli
    //move interrupts back to application section
    //at this point IVSEL bit is set and we need to reset it
    MCUCR |= 0x01;//set the IVCE bit
    3628:	85 b7       	in	r24, 0x35	; 53
    362a:	81 60       	ori	r24, 0x01	; 1
    362c:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0x00; //reset the IVSEL and IVCE bit    
    362e:	15 be       	out	0x35, r1	; 53
======================================================================
07/07/2005  VS       Initial Creation
*******************************************************************************/
static void hwInit(void)
{
    CONFIG_PORTB_DDR;
    3630:	84 b1       	in	r24, 0x04	; 4
    3632:	8b 69       	ori	r24, 0x9B	; 155
    3634:	84 b9       	out	0x04, r24	; 4
    CONFIG_PORTC_DDR;
    3636:	87 b1       	in	r24, 0x07	; 7
    3638:	8f 6c       	ori	r24, 0xCF	; 207
    363a:	87 b9       	out	0x07, r24	; 7
    CONFIG_PORTD_DDR;
    363c:	8a b1       	in	r24, 0x0a	; 10
    363e:	8b 69       	ori	r24, 0x9B	; 155
    3640:	8a b9       	out	0x0a, r24	; 10
    CONFIG_PORTE_DDR;
    3642:	1d b8       	out	0x0d, r1	; 13
    
    PORTB = 0;
    3644:	15 b8       	out	0x05, r1	; 5
    PORTD = 0;
    3646:	1b b8       	out	0x0b, r1	; 11
/*******************************************************************************/

// Read and store the HW config (Wired vs Wireless) from EEPROM 
static void readHwConfig(void)
{
    eeprom_busy_wait();
    3648:	f9 99       	sbic	0x1f, 1	; 31
    364a:	fe cf       	rjmp	.-4      	; 0x3648 <main+0x2c>

    if (eeprom_read_byte((BYTE *)EE_HW_CONFIG_LOC) == 1)
    364c:	8b e6       	ldi	r24, 0x6B	; 107
    364e:	97 e0       	ldi	r25, 0x07	; 7
    3650:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    3654:	81 30       	cpi	r24, 0x01	; 1
    3656:	09 f4       	brne	.+2      	; 0x365a <main+0x3e>
    3658:	97 c0       	rjmp	.+302    	; 0x3788 <main+0x16c>
    {
        hwConfig = HW_TYPE_WIRELESS;
    }
    else
    {
        hwConfig = HW_TYPE_WIRED;
    365a:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <hwConfig>
/*******************************************************************************/

/*******************************************************************************/

int main(void)
{    
    365e:	04 eb       	ldi	r16, 0xB4	; 180
    3660:	16 e0       	ldi	r17, 0x06	; 6
    BYTE i;
    
    for(i = 0; i < LENGTH_SERIAL_NUM; i++)
    {
        eeprom_busy_wait();
        serialNum[i] = eeprom_read_byte((BYTE *)(EE_SERIAL_NUM_LOC + i));
    3662:	86 ea       	ldi	r24, 0xA6	; 166
    3664:	97 e0       	ldi	r25, 0x07	; 7
    3666:	9c 01       	movw	r18, r24
    3668:	24 5b       	subi	r18, 0xB4	; 180
    366a:	36 40       	sbci	r19, 0x06	; 6
    366c:	79 01       	movw	r14, r18
{
    BYTE i;
    
    for(i = 0; i < LENGTH_SERIAL_NUM; i++)
    {
        eeprom_busy_wait();
    366e:	f9 99       	sbic	0x1f, 1	; 31
    3670:	fe cf       	rjmp	.-4      	; 0x366e <main+0x52>
        serialNum[i] = eeprom_read_byte((BYTE *)(EE_SERIAL_NUM_LOC + i));
    3672:	c7 01       	movw	r24, r14
    3674:	80 0f       	add	r24, r16
    3676:	91 1f       	adc	r25, r17
    3678:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <eeprom_read_byte>
    367c:	f8 01       	movw	r30, r16
    367e:	81 93       	st	Z+, r24
    3680:	8f 01       	movw	r16, r30
// Read and store the device Serial Number from EEPROM
static void readSerialNum(void)
{
    BYTE i;
    
    for(i = 0; i < LENGTH_SERIAL_NUM; i++)
    3682:	f6 e0       	ldi	r31, 0x06	; 6
    3684:	0e 3b       	cpi	r16, 0xBE	; 190
    3686:	1f 07       	cpc	r17, r31
    3688:	91 f7       	brne	.-28     	; 0x366e <main+0x52>
static void readFwVersion(void)
{
    PGM_P p; // Pointer used to locate const strings stored in PROGMEM
    
    // Retrieve the version string from Flash and then copy
    memcpy_P(&p, &versionInfoArray[0], sizeof(PGM_P));
    368a:	42 e0       	ldi	r20, 0x02	; 2
    368c:	50 e0       	ldi	r21, 0x00	; 0
    368e:	60 ea       	ldi	r22, 0xA0	; 160
    3690:	71 e0       	ldi	r23, 0x01	; 1
    3692:	ce 01       	movw	r24, r28
    3694:	01 96       	adiw	r24, 0x01	; 1
    3696:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <memcpy_P>
    strcpy_P(fwVersion, p);
    369a:	69 81       	ldd	r22, Y+1	; 0x01
    369c:	7a 81       	ldd	r23, Y+2	; 0x02
    369e:	84 ea       	ldi	r24, 0xA4	; 164
    36a0:	96 e0       	ldi	r25, 0x06	; 6
    36a2:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <strcpy_P>
    hwInit();
    // Read config data from EEPROM
    readHwConfig();
    readSerialNum();
    readFwVersion();
    readCalValues();
    36a6:	0e 94 b8 08 	call	0x1170	; 0x1170 <readCalValues>
    
    // Initialize application level routines.
    appInit();
    36aa:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <appInit>
    turnOnAllLEDs();
    36ae:	0e 94 0e 19 	call	0x321c	; 0x321c <turnOnAllLEDs>
	initUART();
    36b2:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <initUART>
10/10/2006   Vijay Soni       Initial Creation
10/16/2006   Robert Weinmann  Added Interrupt Enable for Output Compare match
*******************************************************************************/
static void SchedulerInit(void)
{
    TCCR1A = 0; // Use OCR1A for TOP count
    36b6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
    TCCR1B = _BV(WGM12) | _BV(CS10); // CTC mode, no clock pre-scaler
    36ba:	89 e0       	ldi	r24, 0x09	; 9
    36bc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
    TIMSK1 |= _BV(OCIE1A); // Enable Output Compare A Match interrupt
    36c0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
    36c4:	82 60       	ori	r24, 0x02	; 2
    36c6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
    OCR1A = OCR1A_COUNT_FOR_TICK;    
    36ca:	89 e0       	ldi	r24, 0x09	; 9
    36cc:	9d e3       	ldi	r25, 0x3D	; 61
    36ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
    36d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>

    scbyCurrentTick = LAST_TICK; //initial value, next value will be 0
    36d6:	8f ef       	ldi	r24, 0xFF	; 255
    36d8:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <scbyCurrentTick>
    scbyTicksPending = 0;
    36dc:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <scbyTicksPending>
    turnOnAllLEDs();
	initUART();
    // Initialize scheduler
    SchedulerInit();
    // Enable interrupts
    _SEI();
    36e0:	78 94       	sei
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    36e2:	9f e0       	ldi	r25, 0x0F	; 15
    36e4:	88 e1       	ldi	r24, 0x18	; 24
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	a8 95       	wdr
    36ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>

    // Enable watch dog timer for 2 second duration
    wdt_enable(WDTO_2S);
    //sendDeviceInfo();
	resetConnectedSensors();
    36f6:	0e 94 3b 12 	call	0x2476	; 0x2476 <resetConnectedSensors>
    sendPingAllSensors(); // Prevent connected sensors from 'No CAN traffic' error state
    36fa:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <sendPingAllSensors>
    /* Start the task manager loop. */
    for (;;)
    {
        //Run0TickTask calls functions that are not time critical.
        //As the 0Tick Task is only serviced when idle
        if (scbyTicksPending == 0)//Ticks Pending == 0
    36fe:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <scbyTicksPending>
    3702:	88 23       	and	r24, r24
    3704:	29 f1       	breq	.+74     	; 0x3750 <main+0x134>
            
        }
        else  // Ticks Pending is > 0
        {            
			// _CLI();// disable interrupts as scbyTicksPending  and scbyCurrentTick is read by interrupt routines
            wdt_reset(); //service the watch dog timer every 1 ms
    3706:	a8 95       	wdr
            scbyTicksPending--;
    3708:	81 50       	subi	r24, 0x01	; 1
    370a:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <scbyTicksPending>
            // _SEI(); // enable interrupts
            if (scbyCurrentTick == LAST_TICK)// Last Tick
    370e:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <scbyCurrentTick>
    3712:	8f 3f       	cpi	r24, 0xFF	; 255
    3714:	21 f1       	breq	.+72     	; 0x375e <main+0x142>
            {
                scbyCurrentTick = 0;
            }
            else
            {
                scbyCurrentTick++;
    3716:	8f 5f       	subi	r24, 0xFF	; 255
    3718:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <scbyCurrentTick>
            }
            
            Run1TickTasks(); //every ~0.97 ms
    371c:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <Run1TickTasks>

            //Run one of the following tasks every time as well.
            if (scbyCurrentTick & RUN_2_TICK_MASK)//Run 2 Tick Tasks
    3720:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <scbyCurrentTick>
    3724:	80 fd       	sbrc	r24, 0
    3726:	18 c0       	rjmp	.+48     	; 0x3758 <main+0x13c>
            {
                Run2TickTasks(); // every ~1.95 ms
            }
            else if (scbyCurrentTick & RUN_4_TICK_MASK)// Run 4 Tick Tasks
    3728:	81 fd       	sbrc	r24, 1
    372a:	1c c0       	rjmp	.+56     	; 0x3764 <main+0x148>
            {
                Run4TickTasks(); // every ~3.9 ms
            }
            else if (scbyCurrentTick & RUN_8_TICK_MASK)// Run 8 Tick Tasks
    372c:	82 fd       	sbrc	r24, 2
    372e:	1d c0       	rjmp	.+58     	; 0x376a <main+0x14e>
            {
                Run8TickTasks(); //every ~7.8 ms
            }
            else if (scbyCurrentTick & RUN_16_TICK_MASK)// Run 16 Tick Tasks
    3730:	83 fd       	sbrc	r24, 3
    3732:	1e c0       	rjmp	.+60     	; 0x3770 <main+0x154>
            {
                Run16TickTasks(); //every ~15.6 ms
            }
            else if (scbyCurrentTick & RUN_32_TICK_MASK)// Run 32 Tick Tasks
    3734:	84 fd       	sbrc	r24, 4
    3736:	1f c0       	rjmp	.+62     	; 0x3776 <main+0x15a>
            {
                Run32TickTasks(); // every ~31.2 ms
            }
            else if (scbyCurrentTick & RUN_64_TICK_MASK)
    3738:	85 fd       	sbrc	r24, 5
    373a:	20 c0       	rjmp	.+64     	; 0x377c <main+0x160>
            {
                Run64TickTasks(); //every ~62.1 ms
            }
            else if (scbyCurrentTick & RUN_128_TICK_MASK)
    373c:	86 fd       	sbrc	r24, 6
    373e:	21 c0       	rjmp	.+66     	; 0x3782 <main+0x166>
            {
                Run128TickTasks(); //every ~124.1 ms
            }
            else if (scbyCurrentTick & RUN_256_TICK_MASK)
    3740:	87 ff       	sbrs	r24, 7
    3742:	dd cf       	rjmp	.-70     	; 0x36fe <main+0xe2>
            {
                Run256TickTasks(); // every ~248.3 ms
    3744:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <Run256TickTasks>
    /* Start the task manager loop. */
    for (;;)
    {
        //Run0TickTask calls functions that are not time critical.
        //As the 0Tick Task is only serviced when idle
        if (scbyTicksPending == 0)//Ticks Pending == 0
    3748:	80 91 bf 06 	lds	r24, 0x06BF	; 0x8006bf <scbyTicksPending>
    374c:	81 11       	cpse	r24, r1
    374e:	db cf       	rjmp	.-74     	; 0x3706 <main+0xea>
        {
            wdt_reset();
    3750:	a8 95       	wdr
            Run0TickTasks();
    3752:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <Run0TickTasks>
    3756:	d3 cf       	rjmp	.-90     	; 0x36fe <main+0xe2>
            Run1TickTasks(); //every ~0.97 ms

            //Run one of the following tasks every time as well.
            if (scbyCurrentTick & RUN_2_TICK_MASK)//Run 2 Tick Tasks
            {
                Run2TickTasks(); // every ~1.95 ms
    3758:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <Run2TickTasks>
    375c:	d0 cf       	rjmp	.-96     	; 0x36fe <main+0xe2>
            wdt_reset(); //service the watch dog timer every 1 ms
            scbyTicksPending--;
            // _SEI(); // enable interrupts
            if (scbyCurrentTick == LAST_TICK)// Last Tick
            {
                scbyCurrentTick = 0;
    375e:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <scbyCurrentTick>
    3762:	dc cf       	rjmp	.-72     	; 0x371c <main+0x100>
            {
                Run2TickTasks(); // every ~1.95 ms
            }
            else if (scbyCurrentTick & RUN_4_TICK_MASK)// Run 4 Tick Tasks
            {
                Run4TickTasks(); // every ~3.9 ms
    3764:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <Run4TickTasks>
    3768:	ca cf       	rjmp	.-108    	; 0x36fe <main+0xe2>
            }
            else if (scbyCurrentTick & RUN_8_TICK_MASK)// Run 8 Tick Tasks
            {
                Run8TickTasks(); //every ~7.8 ms
    376a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <Run8TickTasks>
    376e:	c7 cf       	rjmp	.-114    	; 0x36fe <main+0xe2>
            }
            else if (scbyCurrentTick & RUN_16_TICK_MASK)// Run 16 Tick Tasks
            {
                Run16TickTasks(); //every ~15.6 ms
    3770:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <Run16TickTasks>
    3774:	c4 cf       	rjmp	.-120    	; 0x36fe <main+0xe2>
            }
            else if (scbyCurrentTick & RUN_32_TICK_MASK)// Run 32 Tick Tasks
            {
                Run32TickTasks(); // every ~31.2 ms
    3776:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <Run32TickTasks>
    377a:	c1 cf       	rjmp	.-126    	; 0x36fe <main+0xe2>
            }
            else if (scbyCurrentTick & RUN_64_TICK_MASK)
            {
                Run64TickTasks(); //every ~62.1 ms
    377c:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <Run64TickTasks>
    3780:	be cf       	rjmp	.-132    	; 0x36fe <main+0xe2>
            }
            else if (scbyCurrentTick & RUN_128_TICK_MASK)
            {
                Run128TickTasks(); //every ~124.1 ms
    3782:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <Run128TickTasks>
    3786:	bb cf       	rjmp	.-138    	; 0x36fe <main+0xe2>
{
    eeprom_busy_wait();

    if (eeprom_read_byte((BYTE *)EE_HW_CONFIG_LOC) == 1)
    {
        hwConfig = HW_TYPE_WIRELESS;
    3788:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <hwConfig>
    378c:	68 cf       	rjmp	.-304    	; 0x365e <main+0x42>

0000378e <getHwConfig>:

// Returns the device HW config (Wired vs Wireless) 
BYTE getHwConfig(void)
{
    return hwConfig;
}
    378e:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <hwConfig>
    3792:	08 95       	ret

00003794 <getSerialNumPtr>:
// Returns a pointer to the characters of the serial number string
// This assumes a format of ABC-xxxx
BYTE * getSerialNumPtr(void)
{
    return (BYTE *)(&serialNum[0]); 
}
    3794:	84 eb       	ldi	r24, 0xB4	; 180
    3796:	96 e0       	ldi	r25, 0x06	; 6
    3798:	08 95       	ret

0000379a <getFwVersionPtr>:

// Returns a pointer to the characters of the firmware version string
char * getFwVersionPtr(void)
{
    return (char *)(&fwVersion[0]);
}
    379a:	84 ea       	ldi	r24, 0xA4	; 164
    379c:	96 e0       	ldi	r25, 0x06	; 6
    379e:	08 95       	ret

000037a0 <jumpToBootloader>:

void jumpToBootloader(void)
{
    _CLI(); //disable all interrupts
    37a0:	f8 94       	cli
    //move interrupts back to application section
    //at this point IVSEL bit is set and we need to reset it
    MCUCR |= 0x01;//set the IVCE bit
    37a2:	85 b7       	in	r24, 0x35	; 53
    37a4:	81 60       	ori	r24, 0x01	; 1
    37a6:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0x02; //reset the IVSEL and IVCE bit
    37a8:	82 e0       	ldi	r24, 0x02	; 2
    37aa:	85 bf       	out	0x35, r24	; 53
#ifdef MCU_64M1
    asm("jmp (0x7000*2)");  	//jump to boot sector
    37ac:	0c 94 00 70 	jmp	0xe000	; 0xe000 <__data_load_end+0x9fd2>
    37b0:	08 95       	ret

000037b2 <checkSystemDataRequests>:
}

// Handle data ready to be relayed between
//  the display and sensors via WiFi or CAN
void checkSystemDataRequests(void)
{
    37b2:	0f 93       	push	r16
    37b4:	1f 93       	push	r17
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	cd b7       	in	r28, 0x3d	; 61
    37bc:	de b7       	in	r29, 0x3e	; 62
    37be:	27 97       	sbiw	r28, 0x07	; 7
    37c0:	0f b6       	in	r0, 0x3f	; 63
    37c2:	f8 94       	cli
    37c4:	de bf       	out	0x3e, r29	; 62
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	cd bf       	out	0x3d, r28	; 61
    BYTE tempByte;
    BYTE devInfoDone;
	
	// Check if the CAN seq for 
	//  gathering device info has timed out
	if((getRunDeviceInfoSeq()) && (getDevInfoTimer() >= TIMER_COUNT_1_5_SEC_4HZ))
    37ca:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <getRunDeviceInfoSeq>
    37ce:	81 11       	cpse	r24, r1
    37d0:	59 c0       	rjmp	.+178    	; 0x3884 <checkSystemDataRequests+0xd2>
		resetDeviceInfoBuffer();
		devInfoTimeoutFlag = 1;
		reqFlags = getCANDataRequestFlags();
	}
	
    reqFlags = getCANDataRequestFlags();	
    37d2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
    37d6:	18 2f       	mov	r17, r24
    
    if(reqFlags)
    37d8:	88 23       	and	r24, r24
    37da:	81 f0       	breq	.+32     	; 0x37fc <checkSystemDataRequests+0x4a>
    {
        if(reqFlags & UNIT_DEV_INFO_REQ_BITMASK)
    37dc:	80 fd       	sbrc	r24, 0
    37de:	70 c0       	rjmp	.+224    	; 0x38c0 <checkSystemDataRequests+0x10e>
            txDevInfoIndex = 0;
			reqFlags = getCANDataRequestFlags();
            setCANDataRequestFlags(reqFlags & ~(UNIT_DEV_INFO_REQ_BITMASK));

        }
        if(reqFlags & FW_UPDATE_ACK_RESP_BITMASK)
    37e0:	11 fd       	sbrc	r17, 1
    37e2:	ac c0       	rjmp	.+344    	; 0x393c <checkSystemDataRequests+0x18a>
        {
            // Send FW packet ack message
			reqFlags = getCANDataRequestFlags();
            setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_ACK_RESP_BITMASK));
        }
        if(reqFlags & START_FW_UPDATE_RESP_BITMASK)
    37e4:	12 fd       	sbrc	r17, 2
    37e6:	04 c1       	rjmp	.+520    	; 0x39f0 <checkSystemDataRequests+0x23e>
            {
                //Don't clear the flag until a data packet arrives - resend until successful
                sendStartFwUpdateAckMessage();
            }
        }
        if(reqFlags & FW_UPDATE_DATA_RX_BITMASK)
    37e8:	13 fd       	sbrc	r17, 3
    37ea:	59 c0       	rjmp	.+178    	; 0x389e <checkSystemDataRequests+0xec>
            txBytesRemaining = 250;
            txIndex = 0;
			reqFlags = getCANDataRequestFlags();
			setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_DATA_RX_BITMASK));
        }
        if(reqFlags & DEV_INFO_READY_BITMASK) // Send a device info packet via ASIP
    37ec:	14 fd       	sbrc	r17, 4
    37ee:	af c0       	rjmp	.+350    	; 0x394e <checkSystemDataRequests+0x19c>
              }				
			}
			devInfoTimeoutFlag = 0;            
            wdt_reset();
        }
        if(reqFlags & SYSTEM_DEV_INFO_REQ_BITMASK) // Prep for Device Info sequence
    37f0:	15 fd       	sbrc	r17, 5
    37f2:	d9 c0       	rjmp	.+434    	; 0x39a6 <checkSystemDataRequests+0x1f4>

				wirelessDevInfoPending = 1;
                wdt_reset();        
            }
        }
        if(reqFlags & BIT_DATA_RX_BITMASK) // BIT failure reported by CAN
    37f4:	16 fd       	sbrc	r17, 6
    37f6:	4e c1       	rjmp	.+668    	; 0x3a94 <checkSystemDataRequests+0x2e2>
				sendBITMessage((WORD)(tempByte), 0); // Severity 'critical'
				reqFlags = getCANDataRequestFlags();
				setCANDataRequestFlags(reqFlags & ~(BIT_DATA_RX_BITMASK));
			}
        }
        if(reqFlags & FIELD_CAL_REQ_BITMASK) // Cal Status messages pending
    37f8:	17 fd       	sbrc	r17, 7
    37fa:	22 c1       	rjmp	.+580    	; 0x3a40 <checkSystemDataRequests+0x28e>
            }
        }
    }
    
    // Send more FW image data if the sensor module is ready
    if((pendingTxFlag) && (txBytesRemaining))
    37fc:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <pendingTxFlag.2538>
    3800:	88 23       	and	r24, r24
    3802:	c1 f0       	breq	.+48     	; 0x3834 <checkSystemDataRequests+0x82>
    3804:	10 91 53 06 	lds	r17, 0x0653	; 0x800653 <txBytesRemaining.2540>
    3808:	11 23       	and	r17, r17
    380a:	a1 f0       	breq	.+40     	; 0x3834 <checkSystemDataRequests+0x82>
    {        
        if(txBytesRemaining < 8)
    380c:	18 30       	cpi	r17, 0x08	; 8
    380e:	08 f0       	brcs	.+2      	; 0x3812 <checkSystemDataRequests+0x60>
    3810:	fd c0       	rjmp	.+506    	; 0x3a0c <checkSystemDataRequests+0x25a>
        {
            // With a starting packet size of 250 this remainder should always be 2 bytes
            sendCANFwUpdateShortDataPacket(getFwDataPtr() + txIndex, txBytesRemaining);
    3812:	0e 94 d6 07 	call	0xfac	; 0xfac <getFwDataPtr>
    3816:	20 91 52 06 	lds	r18, 0x0652	; 0x800652 <txIndex.2542>
    381a:	61 2f       	mov	r22, r17
    381c:	82 0f       	add	r24, r18
    381e:	91 1d       	adc	r25, r1
    3820:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <sendCANFwUpdateShortDataPacket>
            txBytesRemaining = 0;
    3824:	10 92 53 06 	sts	0x0653, r1	; 0x800653 <txBytesRemaining.2540>
            pendingTxFlag = 0;
    3828:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <pendingTxFlag.2538>
            txIndex = 0;
    382c:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <txIndex.2542>

            sendFwUpdatePacketAckMessage(); // Send the Packet Ack to the display
    3830:	0e 94 30 06 	call	0xc60	; 0xc60 <sendFwUpdatePacketAckMessage>
            txIndex += 8;
            txBytesRemaining -= 8;
        }
    }
    // Also check for device info CAN requests
    if((pendingDevInfoTxFlag) && (txDevInfoBytesRemaining))
    3834:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <pendingDevInfoTxFlag.2539>
    3838:	88 23       	and	r24, r24
    383a:	21 f0       	breq	.+8      	; 0x3844 <checkSystemDataRequests+0x92>
    383c:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <txDevInfoBytesRemaining.2541>
    3840:	81 11       	cpse	r24, r1
    3842:	0b c0       	rjmp	.+22     	; 0x385a <checkSystemDataRequests+0xa8>
        {
            txDevInfoBytesRemaining -= 8;
        }
    }

}
    3844:	27 96       	adiw	r28, 0x07	; 7
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	f8 94       	cli
    384a:	de bf       	out	0x3e, r29	; 62
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	cd bf       	out	0x3d, r28	; 61
    3850:	df 91       	pop	r29
    3852:	cf 91       	pop	r28
    3854:	1f 91       	pop	r17
    3856:	0f 91       	pop	r16
    3858:	08 95       	ret
        }
    }
    // Also check for device info CAN requests
    if((pendingDevInfoTxFlag) && (txDevInfoBytesRemaining))
    {
        sendDeviceInfoData(&outgoingDevInfoMsg[txDevInfoIndex]);
    385a:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <txDevInfoIndex.2543>
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	86 5a       	subi	r24, 0xA6	; 166
    3862:	99 4f       	sbci	r25, 0xF9	; 249
    3864:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sendDeviceInfoData>
        txDevInfoIndex += 8;
    3868:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <txDevInfoIndex.2543>
    386c:	88 5f       	subi	r24, 0xF8	; 248
    386e:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <txDevInfoIndex.2543>
        if(txDevInfoBytesRemaining < 8)
    3872:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <txDevInfoBytesRemaining.2541>
    3876:	88 30       	cpi	r24, 0x08	; 8
    3878:	08 f4       	brcc	.+2      	; 0x387c <checkSystemDataRequests+0xca>
    387a:	db c0       	rjmp	.+438    	; 0x3a32 <checkSystemDataRequests+0x280>
            pendingDevInfoTxFlag = 0;
            txDevInfoIndex = 0;
        }
        else
        {
            txDevInfoBytesRemaining -= 8;
    387c:	88 50       	subi	r24, 0x08	; 8
    387e:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <txDevInfoBytesRemaining.2541>
    3882:	e0 cf       	rjmp	.-64     	; 0x3844 <checkSystemDataRequests+0x92>
    BYTE tempByte;
    BYTE devInfoDone;
	
	// Check if the CAN seq for 
	//  gathering device info has timed out
	if((getRunDeviceInfoSeq()) && (getDevInfoTimer() >= TIMER_COUNT_1_5_SEC_4HZ))
    3884:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <getDevInfoTimer>
    3888:	86 30       	cpi	r24, 0x06	; 6
    388a:	08 f4       	brcc	.+2      	; 0x388e <checkSystemDataRequests+0xdc>
    388c:	a2 cf       	rjmp	.-188    	; 0x37d2 <checkSystemDataRequests+0x20>
	{
		// Abort the dev info seq and move on
		resetDeviceInfoBuffer();
    388e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <resetDeviceInfoBuffer>
		devInfoTimeoutFlag = 1;
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <devInfoTimeoutFlag.2550>
		reqFlags = getCANDataRequestFlags();
    3898:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
    389c:	9a cf       	rjmp	.-204    	; 0x37d2 <checkSystemDataRequests+0x20>
            }
        }
        if(reqFlags & FW_UPDATE_DATA_RX_BITMASK)
        {
            // FW Update data 
            pendingTxFlag = 1;
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	80 93 54 06 	sts	0x0654, r24	; 0x800654 <pendingTxFlag.2538>
            txBytesRemaining = 250;
    38a4:	8a ef       	ldi	r24, 0xFA	; 250
    38a6:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <txBytesRemaining.2540>
            txIndex = 0;
    38aa:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <txIndex.2542>
			reqFlags = getCANDataRequestFlags();
    38ae:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
    38b2:	18 2f       	mov	r17, r24
			setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_DATA_RX_BITMASK));
    38b4:	87 7f       	andi	r24, 0xF7	; 247
    38b6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setCANDataRequestFlags>
        }
        if(reqFlags & DEV_INFO_READY_BITMASK) // Send a device info packet via ASIP
    38ba:	14 ff       	sbrs	r17, 4
    38bc:	99 cf       	rjmp	.-206    	; 0x37f0 <checkSystemDataRequests+0x3e>
    38be:	47 c0       	rjmp	.+142    	; 0x394e <checkSystemDataRequests+0x19c>
    38c0:	4a e5       	ldi	r20, 0x5A	; 90
    38c2:	56 e0       	ldi	r21, 0x06	; 6
    38c4:	84 ea       	ldi	r24, 0xA4	; 164
    38c6:	96 e0       	ldi	r25, 0x06	; 6
	
    reqFlags = getCANDataRequestFlags();	
    
    if(reqFlags)
    {
        if(reqFlags & UNIT_DEV_INFO_REQ_BITMASK)
    38c8:	fa 01       	movw	r30, r20

    tempPtr = getSerialNumPtr();

    for(i = 0; i < 74; i++)
    {
        outgoingDevInfoMsg[i] = 0;
    38ca:	11 92       	st	Z+, r1
    BYTE i;
    BYTE * tempPtr;

    tempPtr = getSerialNumPtr();

    for(i = 0; i < 74; i++)
    38cc:	8e 17       	cp	r24, r30
    38ce:	9f 07       	cpc	r25, r31
    38d0:	e1 f7       	brne	.-8      	; 0x38ca <checkSystemDataRequests+0x118>
    38d2:	84 eb       	ldi	r24, 0xB4	; 180
    38d4:	96 e0       	ldi	r25, 0x06	; 6
    38d6:	e4 e6       	ldi	r30, 0x64	; 100
    38d8:	f6 e0       	ldi	r31, 0x06	; 6
    }

    // Build payload
    for(i = 0; i < 10; i++)
    {
        outgoingDevInfoMsg[i] = *tempPtr++;
    38da:	dc 01       	movw	r26, r24
    38dc:	2d 91       	ld	r18, X+
    38de:	cd 01       	movw	r24, r26
    38e0:	da 01       	movw	r26, r20
    38e2:	2d 93       	st	X+, r18
    38e4:	ad 01       	movw	r20, r26
    {
        outgoingDevInfoMsg[i] = 0;
    }

    // Build payload
    for(i = 0; i < 10; i++)
    38e6:	b6 e0       	ldi	r27, 0x06	; 6
    38e8:	44 36       	cpi	r20, 0x64	; 100
    38ea:	5b 07       	cpc	r21, r27
    38ec:	b1 f7       	brne	.-20     	; 0x38da <checkSystemDataRequests+0x128>
    38ee:	a4 ea       	ldi	r26, 0xA4	; 164
    38f0:	b6 e0       	ldi	r27, 0x06	; 6
    38f2:	24 e7       	ldi	r18, 0x74	; 116
    38f4:	36 e0       	ldi	r19, 0x06	; 6

    tempPtr = (BYTE *)getFwVersionPtr();

    for(i = 10; i < 26; i++)
    {
        outgoingDevInfoMsg[i] = *tempPtr++;
    38f6:	8d 91       	ld	r24, X+
    38f8:	81 93       	st	Z+, r24
        outgoingDevInfoMsg[i] = *tempPtr++;
    }

    tempPtr = (BYTE *)getFwVersionPtr();

    for(i = 10; i < 26; i++)
    38fa:	2e 17       	cp	r18, r30
    38fc:	3f 07       	cpc	r19, r31
    38fe:	d9 f7       	brne	.-10     	; 0x38f6 <checkSystemDataRequests+0x144>
    {
        outgoingDevInfoMsg[i] = *tempPtr++;
    }

    strcpy_P(&outgoingDevInfoMsg[26], FwPartNum);
    3900:	64 ea       	ldi	r22, 0xA4	; 164
    3902:	71 e0       	ldi	r23, 0x01	; 1
    3904:	84 e7       	ldi	r24, 0x74	; 116
    3906:	96 e0       	ldi	r25, 0x06	; 6
    3908:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <strcpy_P>

    readHwVersion(&outgoingDevInfoMsg[42]);
    390c:	84 e8       	ldi	r24, 0x84	; 132
    390e:	96 e0       	ldi	r25, 0x06	; 6
    3910:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <readHwVersion>
    readHwPartNum(&outgoingDevInfoMsg[58]);
    3914:	84 e9       	ldi	r24, 0x94	; 148
    3916:	96 e0       	ldi	r25, 0x06	; 6
    3918:	0e 94 37 1a 	call	0x346e	; 0x346e <readHwPartNum>
    {
        if(reqFlags & UNIT_DEV_INFO_REQ_BITMASK)
        {
            // build FW version msg...
            buildCANDeviceInfo();
            pendingDevInfoTxFlag = 1;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <pendingDevInfoTxFlag.2539>
            txDevInfoBytesRemaining = 74;
    3922:	8a e4       	ldi	r24, 0x4A	; 74
    3924:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <txDevInfoBytesRemaining.2541>
            txDevInfoIndex = 0;
    3928:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <txDevInfoIndex.2543>
			reqFlags = getCANDataRequestFlags();
    392c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
    3930:	18 2f       	mov	r17, r24
            setCANDataRequestFlags(reqFlags & ~(UNIT_DEV_INFO_REQ_BITMASK));
    3932:	8e 7f       	andi	r24, 0xFE	; 254
    3934:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setCANDataRequestFlags>

        }
        if(reqFlags & FW_UPDATE_ACK_RESP_BITMASK)
    3938:	11 ff       	sbrs	r17, 1
    393a:	54 cf       	rjmp	.-344    	; 0x37e4 <checkSystemDataRequests+0x32>
        {
            // Send FW packet ack message
			reqFlags = getCANDataRequestFlags();
    393c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
    3940:	18 2f       	mov	r17, r24
            setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_ACK_RESP_BITMASK));
    3942:	8d 7f       	andi	r24, 0xFD	; 253
    3944:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setCANDataRequestFlags>
        }
        if(reqFlags & START_FW_UPDATE_RESP_BITMASK)
    3948:	12 ff       	sbrs	r17, 2
    394a:	4e cf       	rjmp	.-356    	; 0x37e8 <checkSystemDataRequests+0x36>
    394c:	51 c0       	rjmp	.+162    	; 0x39f0 <checkSystemDataRequests+0x23e>
			reqFlags = getCANDataRequestFlags();
			setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_DATA_RX_BITMASK));
        }
        if(reqFlags & DEV_INFO_READY_BITMASK) // Send a device info packet via ASIP
        {
			if(!getUARTTxBuffEmpty())			
    394e:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <getUARTTxBuffEmpty>
    3952:	88 23       	and	r24, r24
    3954:	09 f4       	brne	.+2      	; 0x3958 <checkSystemDataRequests+0x1a6>
    3956:	d1 c0       	rjmp	.+418    	; 0x3afa <checkSystemDataRequests+0x348>
			{
				clearDevInfoTimer();
				return;
			}
			if(!devInfoTimeoutFlag) // Transmit if the last CAN sequence did not time out
    3958:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <devInfoTimeoutFlag.2550>
    395c:	88 23       	and	r24, r24
    395e:	09 f4       	brne	.+2      	; 0x3962 <checkSystemDataRequests+0x1b0>
    3960:	d9 c0       	rjmp	.+434    	; 0x3b14 <checkSystemDataRequests+0x362>
				devInfoTxCount++;
				devInfoTimeoutTxRetry = 0;
			}
			else // A timeout has occurred
			{
				if(devInfoTimeoutTxRetry < 2)
    3962:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <devInfoTimeoutTxRetry.2551>
    3966:	82 30       	cpi	r24, 0x02	; 2
    3968:	08 f4       	brcc	.+2      	; 0x396c <checkSystemDataRequests+0x1ba>
    396a:	e6 c0       	rjmp	.+460    	; 0x3b38 <checkSystemDataRequests+0x386>
					clearDevInfoTimer();
				}
				else
				{
					// Abort and move on to the next sensor
					devInfoTimeoutTxRetry = 0;
    396c:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <devInfoTimeoutTxRetry.2551>
				}				
			}			
			if((devInfoTxCount > DEV_INFO_TX_RETRY_COUNT) || (devInfoTimeoutFlag))
			{
				devInfoTxCount = 0;
    3970:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <devInfoTxCount.2547>
				reqFlags = getCANDataRequestFlags();
    3974:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
    3978:	18 2f       	mov	r17, r24
				setCANDataRequestFlags(reqFlags & ~(DEV_INFO_READY_BITMASK));
    397a:	8f 7e       	andi	r24, 0xEF	; 239
    397c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setCANDataRequestFlags>
				
              // Kick off the next device info request
              devInfoDone = sendNextTargetedDeviceInfoReq();
    3980:	0e 94 40 12 	call	0x2480	; 0x2480 <sendNextTargetedDeviceInfoReq>
    3984:	08 2f       	mov	r16, r24
			  clearDevInfoTimer(); // Reset the timer for receiving CAN data
    3986:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <clearDevInfoTimer>
              
              if(devInfoDone)
    398a:	00 23       	and	r16, r16
    398c:	39 f0       	breq	.+14     	; 0x399c <checkSystemDataRequests+0x1ea>
              {
	              if(lastDevInfoSent)
    398e:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <lastDevInfoSent.2548>
    3992:	81 11       	cpse	r24, r1
    3994:	df c0       	rjmp	.+446    	; 0x3b54 <checkSystemDataRequests+0x3a2>
					clearRunDeviceInfoSeq();
					enableSensorDataTx();
				  }
				  else
				  {
					lastDevInfoSent = 1; // Force to iterate through one more time to Tx the last data
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	80 93 4f 06 	sts	0x064F, r24	; 0x80064f <lastDevInfoSent.2548>
				  }
              }				
			}
			devInfoTimeoutFlag = 0;            
    399c:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <devInfoTimeoutFlag.2550>
            wdt_reset();
    39a0:	a8 95       	wdr
        }
        if(reqFlags & SYSTEM_DEV_INFO_REQ_BITMASK) // Prep for Device Info sequence
    39a2:	15 ff       	sbrs	r17, 5
    39a4:	27 cf       	rjmp	.-434    	; 0x37f4 <checkSystemDataRequests+0x42>
        {
			setRunDeviceInfoSeq();
    39a6:	0e 94 f6 07 	call	0xfec	; 0xfec <setRunDeviceInfoSeq>
			devInfoTimeoutFlag = 0;
    39aa:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <devInfoTimeoutFlag.2550>
			
			if(wirelessDevInfoPending)
    39ae:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <wirelessDevInfoPending.2549>
    39b2:	81 11       	cpse	r24, r1
    39b4:	85 c0       	rjmp	.+266    	; 0x3ac0 <checkSystemDataRequests+0x30e>
					}
				}				
				return;
			}
			
            devInfoDelayCount++;
    39b6:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <devInfoDelayCount.2545>
    39ba:	8f 5f       	subi	r24, 0xFF	; 255
    39bc:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <devInfoDelayCount.2545>

            if(devInfoDelayCount >= DEV_INFO_DELAY_TIME)  // Wait ~250ms for ping responses
    39c0:	84 30       	cpi	r24, 0x04	; 4
    39c2:	08 f4       	brcc	.+2      	; 0x39c6 <checkSystemDataRequests+0x214>
    39c4:	17 cf       	rjmp	.-466    	; 0x37f4 <checkSystemDataRequests+0x42>
            {
                if(pingCount < SENSOR_PING_RETRY_COUNT)
    39c6:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <pingCount.2546>
    39ca:	83 30       	cpi	r24, 0x03	; 3
    39cc:	08 f4       	brcc	.+2      	; 0x39d0 <checkSystemDataRequests+0x21e>
    39ce:	98 c0       	rjmp	.+304    	; 0x3b00 <checkSystemDataRequests+0x34e>
					pingCount++;
					devInfoDelayCount = 0;
					return;
				}
				
				devInfoDelayCount = 0;
    39d0:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <devInfoDelayCount.2545>
                pingCount = 0;
    39d4:	10 92 4c 06 	sts	0x064C, r1	; 0x80064c <pingCount.2546>
				
                // Get the # of wired sensors that have responded to the ping plus the wireless
                tempByte = getConnectedSensorCount() + 1;
    39d8:	0e 94 81 12 	call	0x2502	; 0x2502 <getConnectedSensorCount>
				sendSensorCount(tempByte);
    39dc:	8f 5f       	subi	r24, 0xFF	; 255
    39de:	0e 94 a2 12 	call	0x2544	; 0x2544 <sendSensorCount>
                sendDeviceInfo(); // Push the wireless sensor device info into the Tx queue
    39e2:	0e 94 28 08 	call	0x1050	; 0x1050 <sendDeviceInfo>

				wirelessDevInfoPending = 1;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <wirelessDevInfoPending.2549>
                wdt_reset();        
    39ec:	a8 95       	wdr
    39ee:	02 cf       	rjmp	.-508    	; 0x37f4 <checkSystemDataRequests+0x42>
            setCANDataRequestFlags(reqFlags & ~(FW_UPDATE_ACK_RESP_BITMASK));
        }
        if(reqFlags & START_FW_UPDATE_RESP_BITMASK)
        {
            // Send FW Update Start ack message
            disableSensorDataTx();
    39f0:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <disableSensorDataTx>
            if((getIsTxIdle()) && (!getRunDeviceInfoSeq()))
    39f4:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <getIsTxIdle>
    39f8:	88 23       	and	r24, r24
    39fa:	09 f4       	brne	.+2      	; 0x39fe <checkSystemDataRequests+0x24c>
    39fc:	f5 ce       	rjmp	.-534    	; 0x37e8 <checkSystemDataRequests+0x36>
    39fe:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <getRunDeviceInfoSeq>
    3a02:	81 11       	cpse	r24, r1
    3a04:	f1 ce       	rjmp	.-542    	; 0x37e8 <checkSystemDataRequests+0x36>
            {
                //Don't clear the flag until a data packet arrives - resend until successful
                sendStartFwUpdateAckMessage();
    3a06:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sendStartFwUpdateAckMessage>
    3a0a:	ee ce       	rjmp	.-548    	; 0x37e8 <checkSystemDataRequests+0x36>

            sendFwUpdatePacketAckMessage(); // Send the Packet Ack to the display
        }
        else
        {
            sendCANFwUpdateDataPacket(getFwDataPtr() + txIndex);
    3a0c:	0e 94 d6 07 	call	0xfac	; 0xfac <getFwDataPtr>
    3a10:	20 91 52 06 	lds	r18, 0x0652	; 0x800652 <txIndex.2542>
    3a14:	82 0f       	add	r24, r18
    3a16:	91 1d       	adc	r25, r1
    3a18:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <sendCANFwUpdateDataPacket>
            txIndex += 8;
    3a1c:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <txIndex.2542>
    3a20:	88 5f       	subi	r24, 0xF8	; 248
    3a22:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <txIndex.2542>
            txBytesRemaining -= 8;
    3a26:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <txBytesRemaining.2540>
    3a2a:	88 50       	subi	r24, 0x08	; 8
    3a2c:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <txBytesRemaining.2540>
    3a30:	01 cf       	rjmp	.-510    	; 0x3834 <checkSystemDataRequests+0x82>
    {
        sendDeviceInfoData(&outgoingDevInfoMsg[txDevInfoIndex]);
        txDevInfoIndex += 8;
        if(txDevInfoBytesRemaining < 8)
        {
            txDevInfoBytesRemaining = 0;
    3a32:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <txDevInfoBytesRemaining.2541>
            pendingDevInfoTxFlag = 0;
    3a36:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <pendingDevInfoTxFlag.2539>
            txDevInfoIndex = 0;
    3a3a:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <txDevInfoIndex.2543>
    3a3e:	02 cf       	rjmp	.-508    	; 0x3844 <checkSystemDataRequests+0x92>
				setCANDataRequestFlags(reqFlags & ~(BIT_DATA_RX_BITMASK));
			}
        }
        if(reqFlags & FIELD_CAL_REQ_BITMASK) // Cal Status messages pending
        {
            tempByte = getConnectedSensorCount();
    3a40:	0e 94 81 12 	call	0x2502	; 0x2502 <getConnectedSensorCount>
    3a44:	18 2f       	mov	r17, r24
            
            if((getCalStatusResponseCount() >= tempByte) && (!getRunCalibrationFlag()))
    3a46:	0e 94 84 12 	call	0x2508	; 0x2508 <getCalStatusResponseCount>
    3a4a:	81 17       	cp	r24, r17
    3a4c:	08 f4       	brcc	.+2      	; 0x3a50 <checkSystemDataRequests+0x29e>
    3a4e:	d6 ce       	rjmp	.-596    	; 0x37fc <checkSystemDataRequests+0x4a>
    3a50:	0e 94 87 04 	call	0x90e	; 0x90e <getRunCalibrationFlag>
    3a54:	81 11       	cpse	r24, r1
    3a56:	d2 ce       	rjmp	.-604    	; 0x37fc <checkSystemDataRequests+0x4a>
            {                
                tempByte++; // Increment sensor count to include this sensor
                
                if(!calStatusDataReady)
    3a58:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <calStatusDataReady>
    3a5c:	88 23       	and	r24, r24
    3a5e:	09 f4       	brne	.+2      	; 0x3a62 <checkSystemDataRequests+0x2b0>
    3a60:	85 c0       	rjmp	.+266    	; 0x3b6c <checkSystemDataRequests+0x3ba>
                {
                    fillLocalCalStatusData();
                    calStatusDataReady = 1;
                }
                if((!getCalStatusAckReceivedFlag()) && (txRetryCount < 80)) // Retry results message for ~5 sec @ 62ms retry loop
    3a62:	0e 94 fd 07 	call	0xffa	; 0xffa <getCalStatusAckReceivedFlag>
    3a66:	81 11       	cpse	r24, r1
    3a68:	05 c0       	rjmp	.+10     	; 0x3a74 <checkSystemDataRequests+0x2c2>
    3a6a:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <txRetryCount.2544>
    3a6e:	80 35       	cpi	r24, 0x50	; 80
    3a70:	08 f4       	brcc	.+2      	; 0x3a74 <checkSystemDataRequests+0x2c2>
    3a72:	9a c0       	rjmp	.+308    	; 0x3ba8 <checkSystemDataRequests+0x3f6>
                    transmitCalStatusInfoASIP(tempByte, getFwDataPtr());
                    txRetryCount++;
                }
                else
                {
					reqFlags = getCANDataRequestFlags();
    3a74:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
                    setCANDataRequestFlags(reqFlags & ~(FIELD_CAL_REQ_BITMASK));
    3a78:	8f 77       	andi	r24, 0x7F	; 127
    3a7a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setCANDataRequestFlags>
                    clearCalStatusAckReceivedFlag();
    3a7e:	0e 94 00 08 	call	0x1000	; 0x1000 <clearCalStatusAckReceivedFlag>
                    calStatusDataReady = 0;
    3a82:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <calStatusDataReady>
                    txRetryCount = 0;
    3a86:	10 92 4b 06 	sts	0x064B, r1	; 0x80064b <txRetryCount.2544>
                    enableSensorDataTx();
    3a8a:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <enableSensorDataTx>
                    sendCANSensorDataEnableMsg();
    3a8e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <sendCANSensorDataEnableMsg>
    3a92:	b4 ce       	rjmp	.-664    	; 0x37fc <checkSystemDataRequests+0x4a>
                wdt_reset();        
            }
        }
        if(reqFlags & BIT_DATA_RX_BITMASK) // BIT failure reported by CAN
        {
            tempByte = getLastActiveBIT();
    3a94:	0e 94 a1 08 	call	0x1142	; 0x1142 <getLastActiveBIT>
    3a98:	08 2f       	mov	r16, r24
			
			if((tempByte != 0xFF) && (!getRunDeviceInfoSeq()))
    3a9a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a9c:	09 f4       	brne	.+2      	; 0x3aa0 <checkSystemDataRequests+0x2ee>
    3a9e:	ac ce       	rjmp	.-680    	; 0x37f8 <checkSystemDataRequests+0x46>
    3aa0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <getRunDeviceInfoSeq>
    3aa4:	81 11       	cpse	r24, r1
    3aa6:	a8 ce       	rjmp	.-688    	; 0x37f8 <checkSystemDataRequests+0x46>
			{
				sendBITMessage((WORD)(tempByte), 0); // Severity 'critical'
    3aa8:	60 e0       	ldi	r22, 0x00	; 0
    3aaa:	80 2f       	mov	r24, r16
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sendBITMessage>
				reqFlags = getCANDataRequestFlags();
    3ab2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
    3ab6:	18 2f       	mov	r17, r24
				setCANDataRequestFlags(reqFlags & ~(BIT_DATA_RX_BITMASK));
    3ab8:	8f 7b       	andi	r24, 0xBF	; 191
    3aba:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setCANDataRequestFlags>
    3abe:	9c ce       	rjmp	.-712    	; 0x37f8 <checkSystemDataRequests+0x46>
			setRunDeviceInfoSeq();
			devInfoTimeoutFlag = 0;
			
			if(wirelessDevInfoPending)
			{
				if(!getUARTTxBuffEmpty())			
    3ac0:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <getUARTTxBuffEmpty>
    3ac4:	88 23       	and	r24, r24
    3ac6:	c9 f0       	breq	.+50     	; 0x3afa <checkSystemDataRequests+0x348>
				{
					clearDevInfoTimer();
					return;
				}			
				sendDeviceInfo();
    3ac8:	0e 94 28 08 	call	0x1050	; 0x1050 <sendDeviceInfo>
				devInfoTxCount++;
    3acc:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <devInfoTxCount.2547>
    3ad0:	8f 5f       	subi	r24, 0xFF	; 255
    3ad2:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <devInfoTxCount.2547>
				
				if(devInfoTxCount > DEV_INFO_TX_RETRY_COUNT)
    3ad6:	85 30       	cpi	r24, 0x05	; 5
    3ad8:	08 f4       	brcc	.+2      	; 0x3adc <checkSystemDataRequests+0x32a>
    3ada:	b4 ce       	rjmp	.-664    	; 0x3844 <checkSystemDataRequests+0x92>
				{
					reqFlags = getCANDataRequestFlags();
    3adc:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <getCANDataRequestFlags>
					setCANDataRequestFlags(reqFlags & ~(SYSTEM_DEV_INFO_REQ_BITMASK));
    3ae0:	8f 7d       	andi	r24, 0xDF	; 223
    3ae2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setCANDataRequestFlags>
					devInfoTxCount = 0;
    3ae6:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <devInfoTxCount.2547>
					wirelessDevInfoPending = 0;
    3aea:	10 92 4e 06 	sts	0x064E, r1	; 0x80064e <wirelessDevInfoPending.2549>
					
					if(getConnectedSensorCount() > 0)
    3aee:	0e 94 81 12 	call	0x2502	; 0x2502 <getConnectedSensorCount>
    3af2:	88 23       	and	r24, r24
    3af4:	b1 f1       	breq	.+108    	; 0x3b62 <checkSystemDataRequests+0x3b0>
					{
						sendNextTargetedDeviceInfoReq();
    3af6:	0e 94 40 12 	call	0x2480	; 0x2480 <sendNextTargetedDeviceInfoReq>
						clearDevInfoTimer(); // Reset the timer for receiving CAN data
    3afa:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <clearDevInfoTimer>
    3afe:	a2 ce       	rjmp	.-700    	; 0x3844 <checkSystemDataRequests+0x92>

            if(devInfoDelayCount >= DEV_INFO_DELAY_TIME)  // Wait ~250ms for ping responses
            {
                if(pingCount < SENSOR_PING_RETRY_COUNT)
				{
					sendPingAllSensors();
    3b00:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <sendPingAllSensors>
					pingCount++;
    3b04:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <pingCount.2546>
    3b08:	8f 5f       	subi	r24, 0xFF	; 255
    3b0a:	80 93 4c 06 	sts	0x064C, r24	; 0x80064c <pingCount.2546>
					devInfoDelayCount = 0;
    3b0e:	10 92 4d 06 	sts	0x064D, r1	; 0x80064d <devInfoDelayCount.2545>
					return;
    3b12:	98 ce       	rjmp	.-720    	; 0x3844 <checkSystemDataRequests+0x92>
				clearDevInfoTimer();
				return;
			}
			if(!devInfoTimeoutFlag) // Transmit if the last CAN sequence did not time out
			{
				transmitDeviceInfoASIP();
    3b14:	0e 94 03 08 	call	0x1006	; 0x1006 <transmitDeviceInfoASIP>
				devInfoTxCount++;
    3b18:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <devInfoTxCount.2547>
    3b1c:	8f 5f       	subi	r24, 0xFF	; 255
    3b1e:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <devInfoTxCount.2547>
				devInfoTimeoutTxRetry = 0;
    3b22:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <devInfoTimeoutTxRetry.2551>
				{
					// Abort and move on to the next sensor
					devInfoTimeoutTxRetry = 0;
				}				
			}			
			if((devInfoTxCount > DEV_INFO_TX_RETRY_COUNT) || (devInfoTimeoutFlag))
    3b26:	85 30       	cpi	r24, 0x05	; 5
    3b28:	08 f0       	brcs	.+2      	; 0x3b2c <checkSystemDataRequests+0x37a>
    3b2a:	22 cf       	rjmp	.-444    	; 0x3970 <checkSystemDataRequests+0x1be>
    3b2c:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <devInfoTimeoutFlag.2550>
    3b30:	88 23       	and	r24, r24
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <checkSystemDataRequests+0x384>
    3b34:	33 cf       	rjmp	.-410    	; 0x399c <checkSystemDataRequests+0x1ea>
    3b36:	1c cf       	rjmp	.-456    	; 0x3970 <checkSystemDataRequests+0x1be>
			else // A timeout has occurred
			{
				if(devInfoTimeoutTxRetry < 2)
				{
					//Re-send the last dev info query
					resendLastTargetedDeviceInfoReq();
    3b38:	0e 94 68 12 	call	0x24d0	; 0x24d0 <resendLastTargetedDeviceInfoReq>
					devInfoTimeoutFlag = 0;
    3b3c:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <devInfoTimeoutFlag.2550>
					devInfoTimeoutTxRetry++;				
    3b40:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <devInfoTimeoutTxRetry.2551>
    3b44:	8f 5f       	subi	r24, 0xFF	; 255
    3b46:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <devInfoTimeoutTxRetry.2551>
					clearDevInfoTimer();
    3b4a:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <clearDevInfoTimer>
    3b4e:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <devInfoTxCount.2547>
    3b52:	e9 cf       	rjmp	.-46     	; 0x3b26 <checkSystemDataRequests+0x374>
              
              if(devInfoDone)
              {
	              if(lastDevInfoSent)
				  {
					lastDevInfoSent = 0;
    3b54:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <lastDevInfoSent.2548>
					clearRunDeviceInfoSeq();
    3b58:	0e 94 fa 07 	call	0xff4	; 0xff4 <clearRunDeviceInfoSeq>
					enableSensorDataTx();
    3b5c:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <enableSensorDataTx>
    3b60:	1d cf       	rjmp	.-454    	; 0x399c <checkSystemDataRequests+0x1ea>
						sendNextTargetedDeviceInfoReq();
						clearDevInfoTimer(); // Reset the timer for receiving CAN data
					}
					else
					{
						clearRunDeviceInfoSeq();
    3b62:	0e 94 fa 07 	call	0xff4	; 0xff4 <clearRunDeviceInfoSeq>
						enableSensorDataTx();
    3b66:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <enableSensorDataTx>
    3b6a:	6c ce       	rjmp	.-808    	; 0x3844 <checkSystemDataRequests+0x92>
static void fillLocalCalStatusData(void)
{
    BYTE statusData[7];
    BYTE* serialNumPtr;

    getCalStatusData(&statusData[0], &statusData[1], &statusData[2]);
    3b6c:	ae 01       	movw	r20, r28
    3b6e:	4d 5f       	subi	r20, 0xFD	; 253
    3b70:	5f 4f       	sbci	r21, 0xFF	; 255
    3b72:	be 01       	movw	r22, r28
    3b74:	6e 5f       	subi	r22, 0xFE	; 254
    3b76:	7f 4f       	sbci	r23, 0xFF	; 255
    3b78:	ce 01       	movw	r24, r28
    3b7a:	01 96       	adiw	r24, 0x01	; 1
    3b7c:	0e 94 8a 04 	call	0x914	; 0x914 <getCalStatusData>

    serialNumPtr = getSerialNumPtr();
    statusData[3] = *(serialNumPtr + 4);
    3b80:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <serialNum+0x4>
    3b84:	8c 83       	std	Y+4, r24	; 0x04
    statusData[4] = *(serialNumPtr + 5);
    3b86:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <serialNum+0x5>
    3b8a:	8d 83       	std	Y+5, r24	; 0x05
    statusData[5] = *(serialNumPtr + 6);
    3b8c:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <serialNum+0x6>
    3b90:	8e 83       	std	Y+6, r24	; 0x06
    statusData[6] = *(serialNumPtr + 7);
    3b92:	80 91 bb 06 	lds	r24, 0x06BB	; 0x8006bb <serialNum+0x7>
    3b96:	8f 83       	std	Y+7, r24	; 0x07

    copyCalStatusDataToTxBuffer(&statusData[0]);
    3b98:	ce 01       	movw	r24, r28
    3b9a:	01 96       	adiw	r24, 0x01	; 1
    3b9c:	0e 94 8d 12 	call	0x251a	; 0x251a <copyCalStatusDataToTxBuffer>
                tempByte++; // Increment sensor count to include this sensor
                
                if(!calStatusDataReady)
                {
                    fillLocalCalStatusData();
                    calStatusDataReady = 1;
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <calStatusDataReady>
    3ba6:	5d cf       	rjmp	.-326    	; 0x3a62 <checkSystemDataRequests+0x2b0>
                }
                if((!getCalStatusAckReceivedFlag()) && (txRetryCount < 80)) // Retry results message for ~5 sec @ 62ms retry loop
                {
                    // Now Tx cal data via ASIP/WiFi
                    transmitCalStatusInfoASIP(tempByte, getFwDataPtr());
    3ba8:	0e 94 d6 07 	call	0xfac	; 0xfac <getFwDataPtr>
    3bac:	bc 01       	movw	r22, r24
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	81 0f       	add	r24, r17
    3bb2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <transmitCalStatusInfoASIP>
                    txRetryCount++;
    3bb6:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <txRetryCount.2544>
    3bba:	8f 5f       	subi	r24, 0xFF	; 255
    3bbc:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <txRetryCount.2544>
    3bc0:	1d ce       	rjmp	.-966    	; 0x37fc <checkSystemDataRequests+0x4a>

00003bc2 <appInit>:
======================================================================
03/27/2005  J       Initial Creation
*******************************************************************************/
void appInit(void)
{
   initCAN();
    3bc2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <initCAN>
   initADC();
    3bc6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <initADC>
   initDAC();
    3bca:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <initDAC>

   readAsipOutCID();
    3bce:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <readAsipOutCID>
   readWifiStatus();
    3bd2:	0e 94 6d 1a 	call	0x34da	; 0x34da <readWifiStatus>
   SET_WIFI_RESET_HIGH;       
    3bd6:	59 98       	cbi	0x0b, 1	; 11
  
   initBitMonitor();
    3bd8:	0e 94 72 08 	call	0x10e4	; 0x10e4 <initBitMonitor>
   initBlockageProcessor();
    3bdc:	0e 94 a4 08 	call	0x1148	; 0x1148 <initBlockageProcessor>
   initLEDStateMachine();
    3be0:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <initLEDStateMachine>

00003be4 <get4HzTimer>:

// Returns the ticks of a 4 Hz timer
BYTE get4HzTimer(void)
{
    return FourHzTimer;
}
    3be4:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <FourHzTimer>
    3be8:	08 95       	ret

00003bea <clear4HzTimer>:

// Clears the tick count of the 4 Hz timer
void clear4HzTimer(void)
{
    FourHzTimer = 0;
    3bea:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <FourHzTimer>
    3bee:	08 95       	ret

00003bf0 <getDevInfoTimer>:
}

BYTE getDevInfoTimer(void)
{
	return DevInfoTimer;	
}
    3bf0:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <DevInfoTimer>
    3bf4:	08 95       	ret

00003bf6 <clearDevInfoTimer>:

void clearDevInfoTimer(void)
{
	DevInfoTimer = 0;
    3bf6:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <DevInfoTimer>
    3bfa:	08 95       	ret

00003bfc <get30SecStartupTimer>:
}

BYTE get30SecStartupTimer(void)
{
    return thirtySecStartupTimer;
}
    3bfc:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <thirtySecStartupTimer>
    3c00:	08 95       	ret

00003c02 <Run0TickTasks>:
    3c02:	08 95       	ret

00003c04 <Run1TickTasks>:
    3c04:	08 95       	ret

00003c06 <Run2TickTasks>:
    3c06:	08 95       	ret

00003c08 <Run4TickTasks>:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run4TickTasks(void)
{   
    processValidAsipMessages();
    3c08:	0e 94 cd 06 	call	0xd9a	; 0xd9a <processValidAsipMessages>
	retransmitBlockageData();
    3c0c:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <retransmitBlockageData>

00003c10 <Run8TickTasks>:
    3c10:	08 95       	ret

00003c12 <Run16TickTasks>:
DATE       WHO      CHANGE DESCRIPTION:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run16TickTasks(void)
{
    3c12:	08 95       	ret

00003c14 <Run32TickTasks>:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run32TickTasks(void)
{
	startADCConversion(); 
    3c14:	0c 94 a7 01 	jmp	0x34e	; 0x34e <startADCConversion>

00003c18 <Run64TickTasks>:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run64TickTasks(void)
{     
   stepBitMonitorStateMachine();	   
    3c18:	0e 94 75 08 	call	0x10ea	; 0x10ea <stepBitMonitorStateMachine>
   checkSystemDataRequests(); 
    3c1c:	0c 94 d9 1b 	jmp	0x37b2	; 0x37b2 <checkSystemDataRequests>

00003c20 <Run128TickTasks>:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run128TickTasks(void)
{
    if(getSensorsReadyFlag()) // If all sensors have been sampled 4x, do the averaging
    3c20:	0e 94 81 04 	call	0x902	; 0x902 <getSensorsReadyFlag>
    3c24:	81 11       	cpse	r24, r1
    3c26:	0d c0       	rjmp	.+26     	; 0x3c42 <Run128TickTasks+0x22>
    {
        averageADCData();
        applyCalibrationToData();
        clearSensorsReadyFlag(); 		
    }
    if(!getRunCalibrationFlag())
    3c28:	0e 94 87 04 	call	0x90e	; 0x90e <getRunCalibrationFlag>
    3c2c:	88 23       	and	r24, r24
    3c2e:	31 f0       	breq	.+12     	; 0x3c3c <Run128TickTasks+0x1c>
    {
        stepLEDStateMachine(); 		
    }

	if(!blockSensorDataTx)
    3c30:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <blockSensorDataTx>
    3c34:	81 11       	cpse	r24, r1
    3c36:	08 95       	ret
    {
		sendFlowRateMessages();	
    3c38:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <sendFlowRateMessages>
        applyCalibrationToData();
        clearSensorsReadyFlag(); 		
    }
    if(!getRunCalibrationFlag())
    {
        stepLEDStateMachine(); 		
    3c3c:	0e 94 1e 19 	call	0x323c	; 0x323c <stepLEDStateMachine>
    3c40:	f7 cf       	rjmp	.-18     	; 0x3c30 <Run128TickTasks+0x10>
*******************************************************************************/
void Run128TickTasks(void)
{
    if(getSensorsReadyFlag()) // If all sensors have been sampled 4x, do the averaging
    {
        averageADCData();
    3c42:	0e 94 52 01 	call	0x2a4	; 0x2a4 <averageADCData>
        applyCalibrationToData();
    3c46:	0e 94 20 09 	call	0x1240	; 0x1240 <applyCalibrationToData>
        clearSensorsReadyFlag(); 		
    3c4a:	0e 94 84 04 	call	0x908	; 0x908 <clearSensorsReadyFlag>
    3c4e:	ec cf       	rjmp	.-40     	; 0x3c28 <Run128TickTasks+0x8>

00003c50 <Run256TickTasks>:
======================================================================
01/12/2006  RVW       Initial Creation
*******************************************************************************/
void Run256TickTasks(void)
{  
    FourHzTimer++;
    3c50:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <FourHzTimer>
    3c54:	8f 5f       	subi	r24, 0xFF	; 255
    3c56:	80 93 c4 06 	sts	0x06C4, r24	; 0x8006c4 <FourHzTimer>
	DevInfoTimer++;
    3c5a:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <DevInfoTimer>
    3c5e:	9f 5f       	subi	r25, 0xFF	; 255
    3c60:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <DevInfoTimer>

    // Set a flag 30 seconds after startup
    if(FourHzTimer > 120)
    3c64:	89 37       	cpi	r24, 0x79	; 121
    3c66:	18 f0       	brcs	.+6      	; 0x3c6e <Run256TickTasks+0x1e>
    {
        thirtySecStartupTimer = 1;
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <thirtySecStartupTimer>
    }
	
	processBlockageData();  			
    3c6e:	0e 94 21 0a 	call	0x1442	; 0x1442 <processBlockageData>
	stepEEUpdateTask();
    3c72:	0c 94 bd 12 	jmp	0x257a	; 0x257a <stepEEUpdateTask>

00003c76 <disableSensorDataTx>:
} 

void disableSensorDataTx(void)
{
    blockSensorDataTx = 1;
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	80 93 c1 06 	sts	0x06C1, r24	; 0x8006c1 <blockSensorDataTx>
    3c7c:	08 95       	ret

00003c7e <enableSensorDataTx>:
}

void enableSensorDataTx(void)
{
    blockSensorDataTx = 0;
    3c7e:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <blockSensorDataTx>
    3c82:	08 95       	ret

00003c84 <initUART>:
		}
	}
	sei();
	
	return free_bytes;
}
    3c84:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <wifiTxBufferHead>
    3c88:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <wifiTxBufferTail>
    3c8c:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <scfTX_Active>
    3c90:	e8 ec       	ldi	r30, 0xC8	; 200
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	80 e8       	ldi	r24, 0x80	; 128
    3c96:	80 83       	st	Z, r24
    3c98:	80 81       	ld	r24, Z
    3c9a:	8f 60       	ori	r24, 0x0F	; 15
    3c9c:	80 83       	st	Z, r24
    3c9e:	83 e3       	ldi	r24, 0x33	; 51
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f00ce>
    3ca6:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f00cd>
    3caa:	80 e2       	ldi	r24, 0x20	; 32
    3cac:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f00cc>
    3cb0:	ea ec       	ldi	r30, 0xCA	; 202
    3cb2:	f0 e0       	ldi	r31, 0x00	; 0
    3cb4:	80 81       	ld	r24, Z
    3cb6:	8b 60       	ori	r24, 0x0B	; 11
    3cb8:	80 83       	st	Z, r24
    3cba:	5f 98       	cbi	0x0b, 7	; 11
    3cbc:	41 98       	cbi	0x08, 1	; 8
    3cbe:	08 95       	ret

00003cc0 <getIsTxIdle>:
    3cc0:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3cc4:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <wifiTxBufferTail>
    3cc8:	98 17       	cp	r25, r24
    3cca:	11 f0       	breq	.+4      	; 0x3cd0 <getIsTxIdle+0x10>
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	08 95       	ret
    3cd0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    3cd4:	82 fb       	bst	r24, 2
    3cd6:	99 27       	eor	r25, r25
    3cd8:	90 f9       	bld	r25, 0
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	89 27       	eor	r24, r25
    3cde:	08 95       	ret

00003ce0 <__vector_21>:
    3ce0:	1f 92       	push	r1
    3ce2:	0f 92       	push	r0
    3ce4:	0f b6       	in	r0, 0x3f	; 63
    3ce6:	0f 92       	push	r0
    3ce8:	11 24       	eor	r1, r1
    3cea:	2f 93       	push	r18
    3cec:	3f 93       	push	r19
    3cee:	4f 93       	push	r20
    3cf0:	5f 93       	push	r21
    3cf2:	6f 93       	push	r22
    3cf4:	7f 93       	push	r23
    3cf6:	8f 93       	push	r24
    3cf8:	9f 93       	push	r25
    3cfa:	af 93       	push	r26
    3cfc:	bf 93       	push	r27
    3cfe:	ef 93       	push	r30
    3d00:	ff 93       	push	r31
    3d02:	98 b1       	in	r25, 0x08	; 8
    3d04:	80 e4       	ldi	r24, 0x40	; 64
    3d06:	89 27       	eor	r24, r25
    3d08:	88 b9       	out	0x08, r24	; 8
    3d0a:	e9 ec       	ldi	r30, 0xC9	; 201
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	80 81       	ld	r24, Z
    3d10:	88 60       	ori	r24, 0x08	; 8
    3d12:	80 83       	st	Z, r24
    3d14:	e8 ec       	ldi	r30, 0xC8	; 200
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	80 81       	ld	r24, Z
    3d1a:	80 68       	ori	r24, 0x80	; 128
    3d1c:	80 83       	st	Z, r24
    3d1e:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <initUART>
    3d22:	ff 91       	pop	r31
    3d24:	ef 91       	pop	r30
    3d26:	bf 91       	pop	r27
    3d28:	af 91       	pop	r26
    3d2a:	9f 91       	pop	r25
    3d2c:	8f 91       	pop	r24
    3d2e:	7f 91       	pop	r23
    3d30:	6f 91       	pop	r22
    3d32:	5f 91       	pop	r21
    3d34:	4f 91       	pop	r20
    3d36:	3f 91       	pop	r19
    3d38:	2f 91       	pop	r18
    3d3a:	0f 90       	pop	r0
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	0f 90       	pop	r0
    3d40:	1f 90       	pop	r1
    3d42:	18 95       	reti

00003d44 <__vector_20>:
    3d44:	1f 92       	push	r1
    3d46:	0f 92       	push	r0
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	0f 92       	push	r0
    3d4c:	11 24       	eor	r1, r1
    3d4e:	2f 93       	push	r18
    3d50:	3f 93       	push	r19
    3d52:	4f 93       	push	r20
    3d54:	5f 93       	push	r21
    3d56:	6f 93       	push	r22
    3d58:	7f 93       	push	r23
    3d5a:	8f 93       	push	r24
    3d5c:	9f 93       	push	r25
    3d5e:	af 93       	push	r26
    3d60:	bf 93       	push	r27
    3d62:	ef 93       	push	r30
    3d64:	ff 93       	push	r31
    3d66:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    3d6a:	80 fd       	sbrc	r24, 0
    3d6c:	2e c0       	rjmp	.+92     	; 0x3dca <__vector_20+0x86>
    3d6e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    3d72:	81 ff       	sbrs	r24, 1
    3d74:	19 c0       	rjmp	.+50     	; 0x3da8 <__vector_20+0x64>
    3d76:	e0 91 c7 06 	lds	r30, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3d7a:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <wifiTxBufferTail>
    3d7e:	e8 17       	cp	r30, r24
    3d80:	61 f1       	breq	.+88     	; 0x3dda <__vector_20+0x96>
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	8e 0f       	add	r24, r30
    3d86:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <wifiTxBufferHead>
    3d8a:	f0 e0       	ldi	r31, 0x00	; 0
    3d8c:	e8 53       	subi	r30, 0x38	; 56
    3d8e:	f9 4f       	sbci	r31, 0xF9	; 249
    3d90:	80 81       	ld	r24, Z
    3d92:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7f00d2>
    3d96:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3d9a:	88 3c       	cpi	r24, 0xC8	; 200
    3d9c:	10 f0       	brcs	.+4      	; 0x3da2 <__vector_20+0x5e>
    3d9e:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <wifiTxBufferHead>
    3da2:	82 e0       	ldi	r24, 0x02	; 2
    3da4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    3da8:	ff 91       	pop	r31
    3daa:	ef 91       	pop	r30
    3dac:	bf 91       	pop	r27
    3dae:	af 91       	pop	r26
    3db0:	9f 91       	pop	r25
    3db2:	8f 91       	pop	r24
    3db4:	7f 91       	pop	r23
    3db6:	6f 91       	pop	r22
    3db8:	5f 91       	pop	r21
    3dba:	4f 91       	pop	r20
    3dbc:	3f 91       	pop	r19
    3dbe:	2f 91       	pop	r18
    3dc0:	0f 90       	pop	r0
    3dc2:	0f be       	out	0x3f, r0	; 63
    3dc4:	0f 90       	pop	r0
    3dc6:	1f 90       	pop	r1
    3dc8:	18 95       	reti
    3dca:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7f00d2>
    3dce:	0e 94 e5 04 	call	0x9ca	; 0x9ca <stepAsipStateMachine>
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f00c9>
    3dd8:	ca cf       	rjmp	.-108    	; 0x3d6e <__vector_20+0x2a>
    3dda:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <scfTX_Active>
    3dde:	e1 cf       	rjmp	.-62     	; 0x3da2 <__vector_20+0x5e>

00003de0 <getUARTTxBuffEmpty>:

BOOL getUARTTxBuffEmpty(void)
{
	return (wifiTxBufferTail == wifiTxBufferHead);
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	20 91 c6 06 	lds	r18, 0x06C6	; 0x8006c6 <wifiTxBufferTail>
    3de6:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3dea:	29 13       	cpse	r18, r25
    3dec:	80 e0       	ldi	r24, 0x00	; 0
}
    3dee:	08 95       	ret

00003df0 <addBytesToWifiTxBuffer>:

BYTE getUART_TxBytesFree(void)
{
	BYTE free_bytes = 0;
	
	cli();
    3df0:	f8 94       	cli
	{
		if(wifiTxBufferHead > wifiTxBufferTail)
    3df2:	20 91 c7 06 	lds	r18, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3df6:	30 91 c6 06 	lds	r19, 0x06C6	; 0x8006c6 <wifiTxBufferTail>
    3dfa:	32 17       	cp	r19, r18
    3dfc:	08 f0       	brcs	.+2      	; 0x3e00 <addBytesToWifiTxBuffer+0x10>
    3dfe:	42 c0       	rjmp	.+132    	; 0x3e84 <addBytesToWifiTxBuffer+0x94>
		{			
			free_bytes = wifiTxBufferHead - wifiTxBufferTail - 1;
    3e00:	21 50       	subi	r18, 0x01	; 1
    3e02:	23 1b       	sub	r18, r19
		else
		{
			free_bytes = WIFI_TX_BUFFER_SIZE - 1;
		}
	}
	sei();
    3e04:	78 94       	sei
BOOL addBytesToWifiTxBuffer(const BYTE * data, BYTE size)
{
    BYTE i;

	// Make sure there is enough room for the data
	if(size > getUART_TxBytesFree())
    3e06:	26 17       	cp	r18, r22
    3e08:	08 f4       	brcc	.+2      	; 0x3e0c <addBytesToWifiTxBuffer+0x1c>
    3e0a:	44 c0       	rjmp	.+136    	; 0x3e94 <addBytesToWifiTxBuffer+0xa4>
	{		
        return FALSE;			
	}	
	
	cli();
    3e0c:	f8 94       	cli
	{
		// Add data to buffer
		for(i = 0; i < size; i++)
    3e0e:	66 23       	and	r22, r22
    3e10:	f1 f0       	breq	.+60     	; 0x3e4e <addBytesToWifiTxBuffer+0x5e>
    3e12:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <wifiTxBufferTail>
    3e16:	dc 01       	movw	r26, r24
    3e18:	61 50       	subi	r22, 0x01	; 1
    3e1a:	26 2f       	mov	r18, r22
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	2f 5f       	subi	r18, 0xFF	; 255
    3e20:	3f 4f       	sbci	r19, 0xFF	; 255
    3e22:	28 0f       	add	r18, r24
    3e24:	39 1f       	adc	r19, r25
    3e26:	04 c0       	rjmp	.+8      	; 0x3e30 <addBytesToWifiTxBuffer+0x40>
		{
			wifiTxBuffer[wifiTxBufferTail++] = *data++;
			if(wifiTxBufferTail >= WIFI_TX_BUFFER_SIZE)
    3e28:	e8 2f       	mov	r30, r24
	}	
	
	cli();
	{
		// Add data to buffer
		for(i = 0; i < size; i++)
    3e2a:	a2 17       	cp	r26, r18
    3e2c:	b3 07       	cpc	r27, r19
    3e2e:	69 f0       	breq	.+26     	; 0x3e4a <addBytesToWifiTxBuffer+0x5a>
		{
			wifiTxBuffer[wifiTxBufferTail++] = *data++;
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	8e 0f       	add	r24, r30
    3e34:	9d 91       	ld	r25, X+
    3e36:	f0 e0       	ldi	r31, 0x00	; 0
    3e38:	e8 53       	subi	r30, 0x38	; 56
    3e3a:	f9 4f       	sbci	r31, 0xF9	; 249
    3e3c:	90 83       	st	Z, r25
			if(wifiTxBufferTail >= WIFI_TX_BUFFER_SIZE)
    3e3e:	88 3c       	cpi	r24, 0xC8	; 200
    3e40:	98 f3       	brcs	.-26     	; 0x3e28 <addBytesToWifiTxBuffer+0x38>
			{
				wifiTxBufferTail = 0;
    3e42:	e0 e0       	ldi	r30, 0x00	; 0
	}	
	
	cli();
	{
		// Add data to buffer
		for(i = 0; i < size; i++)
    3e44:	a2 17       	cp	r26, r18
    3e46:	b3 07       	cpc	r27, r19
    3e48:	99 f7       	brne	.-26     	; 0x3e30 <addBytesToWifiTxBuffer+0x40>
    3e4a:	e0 93 c6 06 	sts	0x06C6, r30	; 0x8006c6 <wifiTxBufferTail>
				wifiTxBufferTail = 0;
			}
		}	
		
		// If the IRQ isn't going already, make it start
		if(scfTX_Active != TRUE)
    3e4e:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <scfTX_Active>
    3e52:	81 30       	cpi	r24, 0x01	; 1
    3e54:	a1 f0       	breq	.+40     	; 0x3e7e <addBytesToWifiTxBuffer+0x8e>
		{
			scfTX_Active = TRUE;
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <scfTX_Active>
			
			LINDAT = wifiTxBuffer[wifiTxBufferHead++];						
    3e5c:	e0 91 c7 06 	lds	r30, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3e60:	8e 0f       	add	r24, r30
    3e62:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <wifiTxBufferHead>
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	e8 53       	subi	r30, 0x38	; 56
    3e6a:	f9 4f       	sbci	r31, 0xF9	; 249
    3e6c:	80 81       	ld	r24, Z
    3e6e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7f00d2>
			if(wifiTxBufferHead >= WIFI_TX_BUFFER_SIZE)
    3e72:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <wifiTxBufferHead>
    3e76:	88 3c       	cpi	r24, 0xC8	; 200
    3e78:	10 f0       	brcs	.+4      	; 0x3e7e <addBytesToWifiTxBuffer+0x8e>
			{
				wifiTxBufferHead = 0;
    3e7a:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <wifiTxBufferHead>
			}
		}
	}	
	sei();
    3e7e:	78 94       	sei
	
	return TRUE;
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	08 95       	ret
	{
		if(wifiTxBufferHead > wifiTxBufferTail)
		{			
			free_bytes = wifiTxBufferHead - wifiTxBufferTail - 1;
		}
		else if(wifiTxBufferTail > wifiTxBufferHead)
    3e84:	23 17       	cp	r18, r19
    3e86:	40 f4       	brcc	.+16     	; 0x3e98 <addBytesToWifiTxBuffer+0xa8>
		{
			free_bytes = WIFI_TX_BUFFER_SIZE - wifiTxBufferTail + wifiTxBufferHead - 1;
    3e88:	29 53       	subi	r18, 0x39	; 57
    3e8a:	23 1b       	sub	r18, r19
		else
		{
			free_bytes = WIFI_TX_BUFFER_SIZE - 1;
		}
	}
	sei();
    3e8c:	78 94       	sei
BOOL addBytesToWifiTxBuffer(const BYTE * data, BYTE size)
{
    BYTE i;

	// Make sure there is enough room for the data
	if(size > getUART_TxBytesFree())
    3e8e:	26 17       	cp	r18, r22
    3e90:	08 f0       	brcs	.+2      	; 0x3e94 <addBytesToWifiTxBuffer+0xa4>
    3e92:	bc cf       	rjmp	.-136    	; 0x3e0c <addBytesToWifiTxBuffer+0x1c>
	{		
        return FALSE;			
    3e94:	80 e0       	ldi	r24, 0x00	; 0
		}
	}	
	sei();
	
	return TRUE;
}
    3e96:	08 95       	ret
		{
			free_bytes = WIFI_TX_BUFFER_SIZE - wifiTxBufferTail + wifiTxBufferHead - 1;
		}
		else
		{
			free_bytes = WIFI_TX_BUFFER_SIZE - 1;
    3e98:	27 ec       	ldi	r18, 0xC7	; 199
    3e9a:	b4 cf       	rjmp	.-152    	; 0x3e04 <addBytesToWifiTxBuffer+0x14>

00003e9c <sendWifiCommand>:

static BYTE asipCID = 0;


void sendWifiCommand(PGM_P command)
{
    3e9c:	0f 93       	push	r16
    3e9e:	1f 93       	push	r17
    3ea0:	cf 93       	push	r28
    3ea2:	df 93       	push	r29
    3ea4:	cd b7       	in	r28, 0x3d	; 61
    3ea6:	de b7       	in	r29, 0x3e	; 62
    3ea8:	e2 97       	sbiw	r28, 0x32	; 50
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	f8 94       	cli
    3eae:	de bf       	out	0x3e, r29	; 62
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	8c 01       	movw	r16, r24
	char wifiConfigTxBuffer[50]; // Tx buffer for WiFi config messages

	// Retrieve the command string from Flash and then add to Tx buffer
	strcpy_P(wifiConfigTxBuffer, command);
    3eb6:	bc 01       	movw	r22, r24
    3eb8:	ce 01       	movw	r24, r28
    3eba:	01 96       	adiw	r24, 0x01	; 1
    3ebc:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <strcpy_P>
	// Send via UART...
	addBytesToWifiTxBuffer((BYTE *)&wifiConfigTxBuffer[0], __strlen_P(command));
    3ec0:	c8 01       	movw	r24, r16
    3ec2:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__strlen_P>
    3ec6:	68 2f       	mov	r22, r24
    3ec8:	ce 01       	movw	r24, r28
    3eca:	01 96       	adiw	r24, 0x01	; 1
    3ecc:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <addBytesToWifiTxBuffer>
}
    3ed0:	e2 96       	adiw	r28, 0x32	; 50
    3ed2:	0f b6       	in	r0, 0x3f	; 63
    3ed4:	f8 94       	cli
    3ed6:	de bf       	out	0x3e, r29	; 62
    3ed8:	0f be       	out	0x3f, r0	; 63
    3eda:	cd bf       	out	0x3d, r28	; 61
    3edc:	df 91       	pop	r29
    3ede:	cf 91       	pop	r28
    3ee0:	1f 91       	pop	r17
    3ee2:	0f 91       	pop	r16
    3ee4:	08 95       	ret

00003ee6 <readAsipOutCID>:

void readAsipOutCID(void)
{
    eeprom_busy_wait();
    3ee6:	f9 99       	sbic	0x1f, 1	; 31
    3ee8:	fe cf       	rjmp	.-4      	; 0x3ee6 <readAsipOutCID>
    asipCID = 0;
    3eea:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <asipCID>
    3eee:	08 95       	ret

00003ef0 <sendUdpPacket>:
}

void sendUdpPacket(AsipMsgStruct * pMessage)
{
    3ef0:	0f 93       	push	r16
    3ef2:	1f 93       	push	r17
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	2a 97       	sbiw	r28, 0x0a	; 10
    3efe:	0f b6       	in	r0, 0x3f	; 63
    3f00:	f8 94       	cli
    3f02:	de bf       	out	0x3e, r29	; 62
    3f04:	0f be       	out	0x3f, r0	; 63
    3f06:	cd bf       	out	0x3d, r28	; 61
    3f08:	8c 01       	movw	r16, r24
	BYTE cmdBuffer[10];
	BYTE remainder;
	BYTE dataLen = pMessage->PayloadLength + 7; // Payload plus ASIP header/checksum
    3f0a:	fc 01       	movw	r30, r24
    3f0c:	22 81       	ldd	r18, Z+2	; 0x02
    3f0e:	87 e0       	ldi	r24, 0x07	; 7
    3f10:	82 0f       	add	r24, r18
	
	// ========== WiFi Command ==========
	// Connection ID
	cmdBuffer[0] = asipCID + '0';
    3f12:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <asipCID>
    3f16:	90 5d       	subi	r25, 0xD0	; 208
    3f18:	99 83       	std	Y+1, r25	; 0x01
	
	// Convert the data length into a 4 digit string
	cmdBuffer[1] = '0'; // Thousands
    3f1a:	90 e3       	ldi	r25, 0x30	; 48
    3f1c:	9a 83       	std	Y+2, r25	; 0x02
	cmdBuffer[2] = (dataLen / 100) + '0'; // Hundreds
    3f1e:	99 e2       	ldi	r25, 0x29	; 41
    3f20:	89 9f       	mul	r24, r25
    3f22:	91 2d       	mov	r25, r1
    3f24:	11 24       	eor	r1, r1
    3f26:	92 95       	swap	r25
    3f28:	9f 70       	andi	r25, 0x0F	; 15
    3f2a:	30 e3       	ldi	r19, 0x30	; 48
    3f2c:	39 0f       	add	r19, r25
    3f2e:	3b 83       	std	Y+3, r19	; 0x03
	remainder = dataLen % 100; 
    3f30:	f4 e6       	ldi	r31, 0x64	; 100
    3f32:	9f 9f       	mul	r25, r31
    3f34:	80 19       	sub	r24, r0
    3f36:	11 24       	eor	r1, r1
	cmdBuffer[3] = (remainder / 10) + '0'; // Tens
    3f38:	9d ec       	ldi	r25, 0xCD	; 205
    3f3a:	89 9f       	mul	r24, r25
    3f3c:	91 2d       	mov	r25, r1
    3f3e:	11 24       	eor	r1, r1
    3f40:	96 95       	lsr	r25
    3f42:	96 95       	lsr	r25
    3f44:	96 95       	lsr	r25
    3f46:	30 e3       	ldi	r19, 0x30	; 48
    3f48:	39 0f       	add	r19, r25
    3f4a:	3c 83       	std	Y+4, r19	; 0x04
	remainder = remainder % 10;
	cmdBuffer[4] = remainder + '0'; // Ones
    3f4c:	3a e0       	ldi	r19, 0x0A	; 10
    3f4e:	93 9f       	mul	r25, r19
    3f50:	80 19       	sub	r24, r0
    3f52:	11 24       	eor	r1, r1
    3f54:	80 5d       	subi	r24, 0xD0	; 208
    3f56:	8d 83       	std	Y+5, r24	; 0x05
	
	// ========== ASIP Message ==========
	// Start of ASIP Frame
	cmdBuffer[5] = 0xC2;
    3f58:	82 ec       	ldi	r24, 0xC2	; 194
    3f5a:	8e 83       	std	Y+6, r24	; 0x06
	cmdBuffer[6] = 0x53;
    3f5c:	83 e5       	ldi	r24, 0x53	; 83
    3f5e:	8f 83       	std	Y+7, r24	; 0x07
	cmdBuffer[7] = pMessage->MsgClass;
    3f60:	f8 01       	movw	r30, r16
    3f62:	80 81       	ld	r24, Z
    3f64:	88 87       	std	Y+8, r24	; 0x08
	cmdBuffer[8] = pMessage->MsgId;
    3f66:	81 81       	ldd	r24, Z+1	; 0x01
    3f68:	89 87       	std	Y+9, r24	; 0x09
	cmdBuffer[9] = pMessage->PayloadLength;
    3f6a:	2a 87       	std	Y+10, r18	; 0x0a
	
	sendWifiCommand(udpBulkTransferSeq);
    3f6c:	86 eb       	ldi	r24, 0xB6	; 182
    3f6e:	91 e0       	ldi	r25, 0x01	; 1
    3f70:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <sendWifiCommand>
	addBytesToWifiTxBuffer(cmdBuffer, 10);
    3f74:	6a e0       	ldi	r22, 0x0A	; 10
    3f76:	ce 01       	movw	r24, r28
    3f78:	01 96       	adiw	r24, 0x01	; 1
    3f7a:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <addBytesToWifiTxBuffer>
	// Add in payload	
	addBytesToWifiTxBuffer(pMessage->PayloadPtr, pMessage->PayloadLength);
    3f7e:	f8 01       	movw	r30, r16
    3f80:	62 81       	ldd	r22, Z+2	; 0x02
    3f82:	83 81       	ldd	r24, Z+3	; 0x03
    3f84:	94 81       	ldd	r25, Z+4	; 0x04
    3f86:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <addBytesToWifiTxBuffer>
	// Add in checksum bytes
	cmdBuffer[0] = pMessage->Checksum1;
    3f8a:	f8 01       	movw	r30, r16
    3f8c:	85 81       	ldd	r24, Z+5	; 0x05
    3f8e:	89 83       	std	Y+1, r24	; 0x01
	cmdBuffer[1] = pMessage->Checksum2;
    3f90:	86 81       	ldd	r24, Z+6	; 0x06
    3f92:	8a 83       	std	Y+2, r24	; 0x02
	addBytesToWifiTxBuffer(cmdBuffer, 2);
    3f94:	62 e0       	ldi	r22, 0x02	; 2
    3f96:	ce 01       	movw	r24, r28
    3f98:	01 96       	adiw	r24, 0x01	; 1
    3f9a:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <addBytesToWifiTxBuffer>
}
    3f9e:	2a 96       	adiw	r28, 0x0a	; 10
    3fa0:	0f b6       	in	r0, 0x3f	; 63
    3fa2:	f8 94       	cli
    3fa4:	de bf       	out	0x3e, r29	; 62
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	cd bf       	out	0x3d, r28	; 61
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	1f 91       	pop	r17
    3fb0:	0f 91       	pop	r16
    3fb2:	08 95       	ret

00003fb4 <__tablejump2__>:
    3fb4:	ee 0f       	add	r30, r30
    3fb6:	ff 1f       	adc	r31, r31
    3fb8:	05 90       	lpm	r0, Z+
    3fba:	f4 91       	lpm	r31, Z
    3fbc:	e0 2d       	mov	r30, r0
    3fbe:	09 94       	ijmp

00003fc0 <memcpy_P>:
    3fc0:	fb 01       	movw	r30, r22
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	02 c0       	rjmp	.+4      	; 0x3fca <memcpy_P+0xa>
    3fc6:	05 90       	lpm	r0, Z+
    3fc8:	0d 92       	st	X+, r0
    3fca:	41 50       	subi	r20, 0x01	; 1
    3fcc:	50 40       	sbci	r21, 0x00	; 0
    3fce:	d8 f7       	brcc	.-10     	; 0x3fc6 <memcpy_P+0x6>
    3fd0:	08 95       	ret

00003fd2 <strcpy_P>:
    3fd2:	fb 01       	movw	r30, r22
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	05 90       	lpm	r0, Z+
    3fd8:	0d 92       	st	X+, r0
    3fda:	00 20       	and	r0, r0
    3fdc:	e1 f7       	brne	.-8      	; 0x3fd6 <strcpy_P+0x4>
    3fde:	08 95       	ret

00003fe0 <__strlen_P>:
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	05 90       	lpm	r0, Z+
    3fe4:	00 20       	and	r0, r0
    3fe6:	e9 f7       	brne	.-6      	; 0x3fe2 <__strlen_P+0x2>
    3fe8:	80 95       	com	r24
    3fea:	90 95       	com	r25
    3fec:	8e 0f       	add	r24, r30
    3fee:	9f 1f       	adc	r25, r31
    3ff0:	08 95       	ret

00003ff2 <eeprom_read_byte>:
    3ff2:	f9 99       	sbic	0x1f, 1	; 31
    3ff4:	fe cf       	rjmp	.-4      	; 0x3ff2 <eeprom_read_byte>
    3ff6:	92 bd       	out	0x22, r25	; 34
    3ff8:	81 bd       	out	0x21, r24	; 33
    3ffa:	f8 9a       	sbi	0x1f, 0	; 31
    3ffc:	99 27       	eor	r25, r25
    3ffe:	80 b5       	in	r24, 0x20	; 32
    4000:	08 95       	ret

00004002 <eeprom_write_byte>:
    4002:	26 2f       	mov	r18, r22

00004004 <eeprom_write_r18>:
    4004:	f9 99       	sbic	0x1f, 1	; 31
    4006:	fe cf       	rjmp	.-4      	; 0x4004 <eeprom_write_r18>
    4008:	1f ba       	out	0x1f, r1	; 31
    400a:	92 bd       	out	0x22, r25	; 34
    400c:	81 bd       	out	0x21, r24	; 33
    400e:	20 bd       	out	0x20, r18	; 32
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	f8 94       	cli
    4014:	fa 9a       	sbi	0x1f, 2	; 31
    4016:	f9 9a       	sbi	0x1f, 1	; 31
    4018:	0f be       	out	0x3f, r0	; 63
    401a:	01 96       	adiw	r24, 0x01	; 1
    401c:	08 95       	ret

0000401e <_exit>:
    401e:	f8 94       	cli

00004020 <__stop_program>:
    4020:	ff cf       	rjmp	.-2      	; 0x4020 <__stop_program>
