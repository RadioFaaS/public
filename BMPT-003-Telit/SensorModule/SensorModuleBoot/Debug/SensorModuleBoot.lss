
SensorModuleBoot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f50  00003000  00003000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000121  00800100  00800100  00001024  2**0
                  ALLOC
  3 .eeprom       00000200  00810000  00810000  00001024  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fuse         00000003  00820000  00820000  00001224  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lock         00000001  00830000  00830000  00001227  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .comment      00000030  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001258  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000118  00000000  00000000  00001298  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001fac  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f87  00000000  00000000  0000335c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000010e2  00000000  00000000  000042e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001c8  00000000  00000000  000053c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f40  00000000  00000000  00005590  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000855  00000000  00000000  000064d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d8  00000000  00000000  00006d25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003000 <__vectors>:
    3000:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__ctors_end>
    3004:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3008:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    300c:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3010:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3014:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3018:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    301c:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3020:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3024:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3028:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    302c:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3030:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <__vector_12>
    3034:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3038:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    303c:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3040:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3044:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3048:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__vector_18>
    304c:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3050:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3054:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3058:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    305c:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3060:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3064:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3068:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    306c:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3070:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3074:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>
    3078:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__bad_interrupt>

0000307c <FwVersion>:
    307c:	55 6e 6b 6e 6f 77 6e 00 00                          Unknown..

00003085 <FwPartNum>:
    3085:	35 30 31 30 31 30 2d 30 30 30 30 35 32 00 00 00     501010-000052...
	...

00003096 <__ctors_end>:
    3096:	11 24       	eor	r1, r1
    3098:	1f be       	out	0x3f, r1	; 63
    309a:	cf ef       	ldi	r28, 0xFF	; 255
    309c:	d4 e0       	ldi	r29, 0x04	; 4
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	cd bf       	out	0x3d, r28	; 61

000030a2 <__do_clear_bss>:
    30a2:	22 e0       	ldi	r18, 0x02	; 2
    30a4:	a0 e0       	ldi	r26, 0x00	; 0
    30a6:	b1 e0       	ldi	r27, 0x01	; 1
    30a8:	01 c0       	rjmp	.+2      	; 0x30ac <.do_clear_bss_start>

000030aa <.do_clear_bss_loop>:
    30aa:	1d 92       	st	X+, r1

000030ac <.do_clear_bss_start>:
    30ac:	a1 32       	cpi	r26, 0x21	; 33
    30ae:	b2 07       	cpc	r27, r18
    30b0:	e1 f7       	brne	.-8      	; 0x30aa <.do_clear_bss_loop>
    30b2:	0e 94 83 1b 	call	0x3706	; 0x3706 <main>
    30b6:	0c 94 a6 1f 	jmp	0x3f4c	; 0x3f4c <_exit>

000030ba <__bad_interrupt>:
    30ba:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__vectors>

000030be <can_clear_all_mob>:
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    30be:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
    30c0:	98 2f       	mov	r25, r24
    30c2:	92 95       	swap	r25
    30c4:	90 7f       	andi	r25, 0xF0	; 240
    30c6:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
        Can_clear_mob();                //! All MOb Registers=0
    30ca:	ee ee       	ldi	r30, 0xEE	; 238
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	11 92       	st	Z+, r1
    30d0:	e8 3f       	cpi	r30, 0xF8	; 248
    30d2:	f1 05       	cpc	r31, r1
    30d4:	e1 f7       	brne	.-8      	; 0x30ce <can_clear_all_mob+0x10>
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    30d6:	8f 5f       	subi	r24, 0xFF	; 255
    30d8:	86 30       	cpi	r24, 0x06	; 6
    30da:	91 f7       	brne	.-28     	; 0x30c0 <can_clear_all_mob+0x2>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
    30dc:	08 95       	ret

000030de <can_get_mob_free>:
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    30de:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    {
        Can_set_mob(mob_number);
    30e4:	98 2f       	mov	r25, r24
    30e6:	92 95       	swap	r25
    30e8:	90 7f       	andi	r25, 0xF0	; 240
    30ea:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
    30ee:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    30f2:	90 7c       	andi	r25, 0xC0	; 192
    30f4:	19 f4       	brne	.+6      	; 0x30fc <can_get_mob_free+0x1e>
        {
            CANPAGE = page_saved;
    30f6:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
            return (mob_number);
    30fa:	08 95       	ret
U8 can_get_mob_free(void)
{
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    30fc:	8f 5f       	subi	r24, 0xFF	; 255
    30fe:	86 30       	cpi	r24, 0x06	; 6
    3100:	89 f7       	brne	.-30     	; 0x30e4 <can_get_mob_free+0x6>
        {
            CANPAGE = page_saved;
            return (mob_number);
        }
    }
    CANPAGE = page_saved;
    3102:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    return (NO_MOB);
    3106:	8f ef       	ldi	r24, 0xFF	; 255
}
    3108:	08 95       	ret

0000310a <can_get_mob_status>:
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    310a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    310e:	80 7c       	andi	r24, 0xC0	; 192
    3110:	39 f0       	breq	.+14     	; 0x3120 <can_get_mob_status+0x16>

    canstmob_copy = CANSTMOB; // Copy for test integrity
    3112:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    3116:	98 2f       	mov	r25, r24
    3118:	90 7e       	andi	r25, 0xE0	; 224
    if (mob_status != 0) {return(mob_status);}
    311a:	19 f0       	breq	.+6      	; 0x3122 <can_get_mob_status+0x18>
    311c:	89 2f       	mov	r24, r25
    311e:	08 95       	ret
U8 can_get_mob_status(void)
{
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
    3120:	8f ef       	ldi	r24, 0xFF	; 255
    mob_status = canstmob_copy & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR));
    if (mob_status != 0) {return(mob_status);}

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
    3122:	08 95       	ret

00003124 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    3124:	bc 01       	movw	r22, r24
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    312c:	49 2f       	mov	r20, r25
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	2f 70       	andi	r18, 0x0F	; 15
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	42 17       	cp	r20, r18
    3136:	53 07       	cpc	r21, r19
    3138:	44 f4       	brge	.+16     	; 0x314a <can_get_data+0x26>
    {
        *(p_can_message_data + data_index) = CANMSG;
    313a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7fc0fa>
    313e:	fb 01       	movw	r30, r22
    3140:	e4 0f       	add	r30, r20
    3142:	f5 1f       	adc	r31, r21
    3144:	80 83       	st	Z, r24
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    3146:	9f 5f       	subi	r25, 0xFF	; 255
    3148:	ef cf       	rjmp	.-34     	; 0x3128 <can_get_data+0x4>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
    314a:	08 95       	ret

0000314c <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U16 mode)
{
    Can_reset();
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    Can_conf_bt();
    3152:	8e e0       	ldi	r24, 0x0E	; 14
    3154:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    3158:	8c e0       	ldi	r24, 0x0C	; 12
    315a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7fc0e3>
    315e:	87 e3       	ldi	r24, 0x37	; 55
    3160:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
    return 1;
}
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	08 95       	ret

00003168 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
U8 can_init(U16 mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
    3168:	0e 94 a6 18 	call	0x314c	; 0x314c <can_fixed_baudrate>
    316c:	88 23       	and	r24, r24
    316e:	41 f0       	breq	.+16     	; 0x3180 <can_init+0x18>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    3170:	0e 94 5f 18 	call	0x30be	; 0x30be <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
    3174:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    3178:	82 60       	ori	r24, 0x02	; 2
    317a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
    return (1);
    317e:	81 e0       	ldi	r24, 0x01	; 1
}
    3180:	08 95       	ret

00003182 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
U8 can_cmd(st_cmd_t* cmd)
{
    3182:	cf 93       	push	r28
    3184:	df 93       	push	r29
    3186:	ec 01       	movw	r28, r24
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {*/
    mob_handle = can_get_mob_free();
    3188:	0e 94 6f 18 	call	0x30de	; 0x30de <can_get_mob_free>
    if (mob_handle!= NO_MOB)
    318c:	8f 3f       	cpi	r24, 0xFF	; 255
    318e:	09 f4       	brne	.+2      	; 0x3192 <can_cmd+0x10>
    3190:	7e c0       	rjmp	.+252    	; 0x328e <can_cmd+0x10c>
    {
      cmd->status = MOB_PENDING; 
    3192:	90 e6       	ldi	r25, 0x60	; 96
    3194:	99 87       	std	Y+9, r25	; 0x09
      cmd->handle = mob_handle;
    3196:	88 83       	st	Y, r24
      Can_set_mob(mob_handle);
    3198:	82 95       	swap	r24
    319a:	80 7f       	andi	r24, 0xF0	; 240
    319c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
      Can_clear_mob();
    31a0:	ee ee       	ldi	r30, 0xEE	; 238
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	11 92       	st	Z+, r1
    31a6:	e8 3f       	cpi	r30, 0xF8	; 248
    31a8:	f1 05       	cpc	r31, r1
    31aa:	e1 f7       	brne	.-8      	; 0x31a4 <can_cmd+0x22>
          
      if(cmd->cmd == CMD_TX_DATA)
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	82 30       	cpi	r24, 0x02	; 2
    31b0:	09 f0       	breq	.+2      	; 0x31b4 <can_cmd+0x32>
    31b2:	6a c0       	rjmp	.+212    	; 0x3288 <can_cmd+0x106>
      {
        if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    31b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    31b6:	81 ff       	sbrs	r24, 1
    31b8:	2b c0       	rjmp	.+86     	; 0x3210 <can_cmd+0x8e>
    31ba:	9d 81       	ldd	r25, Y+5	; 0x05
    31bc:	8c 81       	ldd	r24, Y+4	; 0x04
    31be:	82 95       	swap	r24
    31c0:	86 95       	lsr	r24
    31c2:	87 70       	andi	r24, 0x07	; 7
    31c4:	28 e0       	ldi	r18, 0x08	; 8
    31c6:	92 9f       	mul	r25, r18
    31c8:	80 0d       	add	r24, r0
    31ca:	11 24       	eor	r1, r1
    31cc:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
    31d0:	9c 81       	ldd	r25, Y+4	; 0x04
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	82 95       	swap	r24
    31d6:	86 95       	lsr	r24
    31d8:	87 70       	andi	r24, 0x07	; 7
    31da:	28 e0       	ldi	r18, 0x08	; 8
    31dc:	92 9f       	mul	r25, r18
    31de:	80 0d       	add	r24, r0
    31e0:	11 24       	eor	r1, r1
    31e2:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
    31e6:	9b 81       	ldd	r25, Y+3	; 0x03
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	82 95       	swap	r24
    31ec:	86 95       	lsr	r24
    31ee:	87 70       	andi	r24, 0x07	; 7
    31f0:	28 e0       	ldi	r18, 0x08	; 8
    31f2:	92 9f       	mul	r25, r18
    31f4:	80 0d       	add	r24, r0
    31f6:	11 24       	eor	r1, r1
    31f8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    31fc:	8a 81       	ldd	r24, Y+2	; 0x02
    31fe:	88 0f       	add	r24, r24
    3200:	88 0f       	add	r24, r24
    3202:	88 0f       	add	r24, r24
    3204:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
    3208:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    320c:	80 61       	ori	r24, 0x10	; 16
    320e:	14 c0       	rjmp	.+40     	; 0x3238 <can_cmd+0xb6>
        else              { Can_set_std_id(cmd->id.std);}
    3210:	9b 81       	ldd	r25, Y+3	; 0x03
    3212:	8a 81       	ldd	r24, Y+2	; 0x02
    3214:	86 95       	lsr	r24
    3216:	86 95       	lsr	r24
    3218:	86 95       	lsr	r24
    321a:	20 e2       	ldi	r18, 0x20	; 32
    321c:	92 9f       	mul	r25, r18
    321e:	80 0d       	add	r24, r0
    3220:	11 24       	eor	r1, r1
    3222:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	82 95       	swap	r24
    322a:	88 0f       	add	r24, r24
    322c:	80 7e       	andi	r24, 0xE0	; 224
    322e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
    3232:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    3236:	8f 7e       	andi	r24, 0xEF	; 239
    3238:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    if (mob_handle!= NO_MOB)
    {
      cmd->status = MOB_PENDING; 
      cmd->handle = mob_handle;
      Can_set_mob(mob_handle);
      Can_clear_mob();
    323c:	80 e0       	ldi	r24, 0x00	; 0
          
      if(cmd->cmd == CMD_TX_DATA)
      {
        if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
        else              { Can_set_std_id(cmd->id.std);}
        for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    323e:	9e 81       	ldd	r25, Y+6	; 0x06
    3240:	89 17       	cp	r24, r25
    3242:	48 f4       	brcc	.+18     	; 0x3256 <can_cmd+0xd4>
    3244:	ef 81       	ldd	r30, Y+7	; 0x07
    3246:	f8 85       	ldd	r31, Y+8	; 0x08
    3248:	e8 0f       	add	r30, r24
    324a:	f1 1d       	adc	r31, r1
    324c:	90 81       	ld	r25, Z
    324e:	90 93 fa 00 	sts	0x00FA, r25	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7fc0fa>
    3252:	8f 5f       	subi	r24, 0xFF	; 255
    3254:	f4 cf       	rjmp	.-24     	; 0x323e <can_cmd+0xbc>
        cmd->ctrl.rtr=0; Can_clear_rtr();
    3256:	8a 85       	ldd	r24, Y+10	; 0x0a
    3258:	8e 7f       	andi	r24, 0xFE	; 254
    325a:	8a 87       	std	Y+10, r24	; 0x0a
    325c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
    3260:	8b 7f       	andi	r24, 0xFB	; 251
    3262:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
        Can_set_dlc(cmd->dlc);
    3266:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    326a:	8e 81       	ldd	r24, Y+6	; 0x06
    326c:	89 2b       	or	r24, r25
    326e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
        Can_config_tx();
    3272:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    3276:	8f 73       	andi	r24, 0x3F	; 63
    3278:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    327c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    3280:	80 64       	ori	r24, 0x40	; 64
    3282:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    3286:	01 c0       	rjmp	.+2      	; 0x328a <can_cmd+0x108>
      }
      else
      {
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED;     
    3288:	19 86       	std	Y+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  //} // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	03 c0       	rjmp	.+6      	; 0x3294 <can_cmd+0x112>
        //------------      
      } // switch (cmd ...*/
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    328e:	8f e1       	ldi	r24, 0x1F	; 31
    3290:	89 87       	std	Y+9, r24	; 0x09
      return CAN_CMD_REFUSED;
    3292:	8f ef       	ldi	r24, 0xFF	; 255
    }
  //} // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	08 95       	ret

0000329a <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	ec 01       	movw	r28, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    32a2:	99 85       	ldd	r25, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    32a4:	99 23       	and	r25, r25
    32a6:	09 f4       	brne	.+2      	; 0x32aa <can_get_status+0x10>
    32a8:	7f c0       	rjmp	.+254    	; 0x33a8 <can_get_status+0x10e>
    32aa:	9f 31       	cpi	r25, 0x1F	; 31
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <can_get_status+0x16>
    32ae:	7c c0       	rjmp	.+248    	; 0x33a8 <can_get_status+0x10e>
    32b0:	9f 3f       	cpi	r25, 0xFF	; 255
    32b2:	09 f4       	brne	.+2      	; 0x32b6 <can_get_status+0x1c>
    32b4:	79 c0       	rjmp	.+242    	; 0x33a8 <can_get_status+0x10e>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    32b6:	88 81       	ld	r24, Y
    32b8:	82 95       	swap	r24
    32ba:	80 7f       	andi	r24, 0xF0	; 240
    32bc:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    a_status = can_get_mob_status();
    32c0:	0e 94 85 18 	call	0x310a	; 0x310a <can_get_mob_status>
    32c4:	18 2f       	mov	r17, r24
    
    switch (a_status)
    32c6:	80 32       	cpi	r24, 0x20	; 32
    32c8:	59 f0       	breq	.+22     	; 0x32e0 <can_get_status+0x46>
    32ca:	20 f4       	brcc	.+8      	; 0x32d4 <can_get_status+0x3a>
    32cc:	88 23       	and	r24, r24
    32ce:	09 f4       	brne	.+2      	; 0x32d2 <can_get_status+0x38>
    32d0:	6d c0       	rjmp	.+218    	; 0x33ac <can_get_status+0x112>
    32d2:	62 c0       	rjmp	.+196    	; 0x3398 <can_get_status+0xfe>
    32d4:	80 34       	cpi	r24, 0x40	; 64
    32d6:	09 f4       	brne	.+2      	; 0x32da <can_get_status+0x40>
    32d8:	55 c0       	rjmp	.+170    	; 0x3384 <can_get_status+0xea>
    32da:	80 3a       	cpi	r24, 0xA0	; 160
    32dc:	09 f0       	breq	.+2      	; 0x32e0 <can_get_status+0x46>
    32de:	5c c0       	rjmp	.+184    	; 0x3398 <can_get_status+0xfe>
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    32e0:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    32e4:	8f 70       	andi	r24, 0x0F	; 15
    32e6:	8e 83       	std	Y+6, r24	; 0x06
            can_get_data(cmd->pt_data);
    32e8:	8f 81       	ldd	r24, Y+7	; 0x07
    32ea:	98 85       	ldd	r25, Y+8	; 0x08
    32ec:	0e 94 92 18 	call	0x3124	; 0x3124 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    32f0:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
    32f4:	92 fb       	bst	r25, 2
    32f6:	99 27       	eor	r25, r25
    32f8:	90 f9       	bld	r25, 0
    32fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    32fc:	90 fb       	bst	r25, 0
    32fe:	80 f9       	bld	r24, 0
    3300:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    3302:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    3306:	94 ff       	sbrs	r25, 4
    3308:	29 c0       	rjmp	.+82     	; 0x335c <can_get_status+0xc2>
            {
                cmd->ctrl.ide = 1; // extended frame
    330a:	82 60       	ori	r24, 0x02	; 2
    330c:	8a 87       	std	Y+10, r24	; 0x0a
                Can_get_ext_id(cmd->id.ext);
    330e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
    3312:	86 95       	lsr	r24
    3314:	86 95       	lsr	r24
    3316:	86 95       	lsr	r24
    3318:	8d 83       	std	Y+5, r24	; 0x05
    331a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
    331e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
    3322:	86 95       	lsr	r24
    3324:	86 95       	lsr	r24
    3326:	86 95       	lsr	r24
    3328:	20 e2       	ldi	r18, 0x20	; 32
    332a:	92 9f       	mul	r25, r18
    332c:	80 0d       	add	r24, r0
    332e:	11 24       	eor	r1, r1
    3330:	8c 83       	std	Y+4, r24	; 0x04
    3332:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    3336:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
    333a:	86 95       	lsr	r24
    333c:	86 95       	lsr	r24
    333e:	86 95       	lsr	r24
    3340:	20 e2       	ldi	r18, 0x20	; 32
    3342:	92 9f       	mul	r25, r18
    3344:	80 0d       	add	r24, r0
    3346:	11 24       	eor	r1, r1
    3348:	8b 83       	std	Y+3, r24	; 0x03
    334a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
    334e:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
    3352:	86 95       	lsr	r24
    3354:	86 95       	lsr	r24
    3356:	86 95       	lsr	r24
    3358:	20 e2       	ldi	r18, 0x20	; 32
    335a:	10 c0       	rjmp	.+32     	; 0x337c <can_get_status+0xe2>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    335c:	8d 7f       	andi	r24, 0xFD	; 253
    335e:	8a 87       	std	Y+10, r24	; 0x0a
                    Can_get_std_id(cmd->id.std);
    3360:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
    3364:	82 95       	swap	r24
    3366:	86 95       	lsr	r24
    3368:	87 70       	andi	r24, 0x07	; 7
    336a:	8b 83       	std	Y+3, r24	; 0x03
    336c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
    3370:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
    3374:	82 95       	swap	r24
    3376:	86 95       	lsr	r24
    3378:	87 70       	andi	r24, 0x07	; 7
    337a:	28 e0       	ldi	r18, 0x08	; 8
    337c:	92 9f       	mul	r25, r18
    337e:	80 0d       	add	r24, r0
    3380:	11 24       	eor	r1, r1
    3382:	8a 83       	std	Y+2, r24	; 0x02
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    3384:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    3386:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    338a:	8f 73       	andi	r24, 0x3F	; 63
    338c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
            Can_clear_status_mob(); //   and reset MOb status
    3390:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
            rtn_val = CAN_STATUS_COMPLETED;
    3394:	80 e0       	ldi	r24, 0x00	; 0
            break;
    3396:	0b c0       	rjmp	.+22     	; 0x33ae <can_get_status+0x114>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    3398:	19 87       	std	Y+9, r17	; 0x09
            Can_mob_abort();        // Freed the MOB
    339a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    339e:	8f 73       	andi	r24, 0x3F	; 63
    33a0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
            Can_clear_status_mob(); //   and reset MOb status
    33a4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    33a8:	82 e0       	ldi	r24, 0x02	; 2
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <can_get_status+0x114>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    33ac:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	1f 91       	pop	r17
    33b4:	08 95       	ret

000033b6 <JumpToApp>:
} /* hwInit */

static void JumpToApp(void)
{
   //TOGGLE_LED_1;
PORTB |= (_BV(PB4) | (_BV(PB1)) | (_BV(PB3)));
    33b6:	85 b1       	in	r24, 0x05	; 5
    33b8:	8a 61       	ori	r24, 0x1A	; 26
    33ba:	85 b9       	out	0x05, r24	; 5
PORTC |= (_BV(PC6));
    33bc:	46 9a       	sbi	0x08, 6	; 8
   _CLI(); //disable all interrupts
    33be:	f8 94       	cli
   //move interrupts back to application section
   //at this point IVSEL bit is set and we need to reset it
   MCUCR |= 0x01;//set the IVCE bit
    33c0:	85 b7       	in	r24, 0x35	; 53
    33c2:	81 60       	ori	r24, 0x01	; 1
    33c4:	85 bf       	out	0x35, r24	; 53
   MCUCR = 0x00; //reset the IVSEL and IVCE bit
    33c6:	15 be       	out	0x35, r1	; 53
   asm("jmp (0x0000*2)");  	//jump to application
    33c8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    33cc:	08 95       	ret

000033ce <sendReadyForFwUpdate>:
	while (can_cmd(&scCANmsgTx) != CAN_CMD_ACCEPTED);
}

static void sendReadyForFwUpdate(void)
{  
    while (can_get_status(&scCANmsgTx) == CAN_STATUS_NOT_COMPLETED);
    33ce:	8d ef       	ldi	r24, 0xFD	; 253
    33d0:	91 e0       	ldi	r25, 0x01	; 1
    33d2:	0e 94 4d 19 	call	0x329a	; 0x329a <can_get_status>
    33d6:	81 30       	cpi	r24, 0x01	; 1
    33d8:	d1 f3       	breq	.-12     	; 0x33ce <sendReadyForFwUpdate>
    scCANmsgTx.dlc = 0;
    33da:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <scCANmsgTx+0x6>
	scCANmsgTx.id.std = CANID_READY_FOR_FW_UPDATE; 
    33de:	80 e2       	ldi	r24, 0x20	; 32
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <scCANmsgTx+0x3>
    33e6:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <scCANmsgTx+0x2>
	while (can_cmd(&scCANmsgTx) != CAN_CMD_ACCEPTED);
    33ea:	8d ef       	ldi	r24, 0xFD	; 253
    33ec:	91 e0       	ldi	r25, 0x01	; 1
    33ee:	0e 94 c1 18 	call	0x3182	; 0x3182 <can_cmd>
    33f2:	81 11       	cpse	r24, r1
    33f4:	fa cf       	rjmp	.-12     	; 0x33ea <sendReadyForFwUpdate+0x1c>
}
    33f6:	08 95       	ret

000033f8 <sendChecksums>:
    deviceInfoReadyFlag = 0;
}

static void sendChecksums(void)
{
    while (can_get_status(&scCANmsgTx) == CAN_STATUS_NOT_COMPLETED);
    33f8:	8d ef       	ldi	r24, 0xFD	; 253
    33fa:	91 e0       	ldi	r25, 0x01	; 1
    33fc:	0e 94 4d 19 	call	0x329a	; 0x329a <can_get_status>
    3400:	81 30       	cpi	r24, 0x01	; 1
    3402:	d1 f3       	breq	.-12     	; 0x33f8 <sendChecksums>
    scCANmsgTx.dlc = 8;
    3404:	88 e0       	ldi	r24, 0x08	; 8
    3406:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <scCANmsgTx+0x6>
    abyCANTxBuff[0] = (BYTE)(scbyChksm2 & 0xFF);
    340a:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <scbyChksm2>
    340e:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <scbyChksm2+0x1>
    3412:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <scbyChksm2+0x2>
    3416:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <scbyChksm2+0x3>
    341a:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <abyCANTxBuff>
    abyCANTxBuff[1] = (BYTE)((scbyChksm2 >> 8) & 0xFF);
    341e:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <abyCANTxBuff+0x1>
    abyCANTxBuff[2] = (BYTE)((scbyChksm2 >> 16) & 0xFF);
    3422:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <abyCANTxBuff+0x2>
    abyCANTxBuff[3] = (BYTE)((scbyChksm2 >> 24) & 0xFF);
    3426:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <abyCANTxBuff+0x3>
    abyCANTxBuff[4] = (BYTE)(scbyChksm3 & 0xFF);
    342a:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <scbyChksm3>
    342e:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <scbyChksm3+0x1>
    3432:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <scbyChksm3+0x2>
    3436:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <scbyChksm3+0x3>
    343a:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <abyCANTxBuff+0x4>
    abyCANTxBuff[5] = (BYTE)((scbyChksm3 >> 8) & 0xFF);
    343e:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <abyCANTxBuff+0x5>
    abyCANTxBuff[6] = (BYTE)((scbyChksm3 >> 16) & 0xFF);
    3442:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <abyCANTxBuff+0x6>
    abyCANTxBuff[7] = (BYTE)((scbyChksm3 >> 24) & 0xFF);
    3446:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <abyCANTxBuff+0x7>
    scCANmsgTx.id.std = 0x50;//0x7F;
    344a:	80 e5       	ldi	r24, 0x50	; 80
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <scCANmsgTx+0x3>
    3452:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <scCANmsgTx+0x2>
    while (can_cmd(&scCANmsgTx) != CAN_CMD_ACCEPTED);
    3456:	8d ef       	ldi	r24, 0xFD	; 253
    3458:	91 e0       	ldi	r25, 0x01	; 1
    345a:	0e 94 c1 18 	call	0x3182	; 0x3182 <can_cmd>
    345e:	81 11       	cpse	r24, r1
    3460:	fa cf       	rjmp	.-12     	; 0x3456 <sendChecksums+0x5e>

}
    3462:	08 95       	ret

00003464 <sendInvalidProgMsg>:
}


static void sendInvalidProgMsg(void)
{
    while (can_get_status(&scCANmsgTx) == CAN_STATUS_NOT_COMPLETED);
    3464:	8d ef       	ldi	r24, 0xFD	; 253
    3466:	91 e0       	ldi	r25, 0x01	; 1
    3468:	0e 94 4d 19 	call	0x329a	; 0x329a <can_get_status>
    346c:	81 30       	cpi	r24, 0x01	; 1
    346e:	d1 f3       	breq	.-12     	; 0x3464 <sendInvalidProgMsg>
    scCANmsgTx.dlc = 0;
    3470:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <scCANmsgTx+0x6>
    //*((DWORD*)&abyCANTxBuff[0]) = 0;
    //*((DWORD*)&abyCANTxBuff[4]) = 0;
    scCANmsgTx.id.std = CANID_SENSOR_INVALID_PROG;
    3474:	81 e1       	ldi	r24, 0x11	; 17
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <scCANmsgTx+0x3>
    347c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <scCANmsgTx+0x2>
	while (can_cmd(&scCANmsgTx) != CAN_CMD_ACCEPTED);
    3480:	8d ef       	ldi	r24, 0xFD	; 253
    3482:	91 e0       	ldi	r25, 0x01	; 1
    3484:	0e 94 c1 18 	call	0x3182	; 0x3182 <can_cmd>
    3488:	81 11       	cpse	r24, r1
    348a:	fa cf       	rjmp	.-12     	; 0x3480 <sendInvalidProgMsg+0x1c>
}
    348c:	08 95       	ret

0000348e <__vector_18>:
  CANIE2 |= 0x20; //turn on IEMOB5 bit to enable interrupts on MOB 5
  CANGIE = ((1<<ENRX) | (1<<ENIT));       /* Can_Rx & IT enable */
}

ISR(CAN_INT_vect)
{
    348e:	1f 92       	push	r1
    3490:	0f 92       	push	r0
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	0f 92       	push	r0
    3496:	11 24       	eor	r1, r1
    3498:	0f 93       	push	r16
    349a:	1f 93       	push	r17
    349c:	2f 93       	push	r18
    349e:	3f 93       	push	r19
    34a0:	4f 93       	push	r20
    34a2:	5f 93       	push	r21
    34a4:	6f 93       	push	r22
    34a6:	7f 93       	push	r23
    34a8:	8f 93       	push	r24
    34aa:	9f 93       	push	r25
    34ac:	af 93       	push	r26
    34ae:	bf 93       	push	r27
    34b0:	cf 93       	push	r28
    34b2:	df 93       	push	r29
    34b4:	ef 93       	push	r30
    34b6:	ff 93       	push	r31
	   unsigned int id;       /* can_data index */
	   BYTE* byPtr;
	   BYTE	byCtr;
       BYTE dlc;
       //PORTB |= (_BV(PB1));
	   CANPAGE = (5 << 4);    /*  select channel  to see if it is Rx interrupt */
    34b8:	80 e5       	ldi	r24, 0x50	; 80
    34ba:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
	   if((CANSTMOB & MOB_RX_COMPLETED) == MOB_RX_COMPLETED)
    34be:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    34c2:	85 ff       	sbrs	r24, 5
    34c4:	dd c0       	rjmp	.+442    	; 0x3680 <__vector_18+0x1f2>
	   {
	      id = (((int)(CANIDT2))>>5) + (((int)(CANIDT1))<<3);       // V2.0 part A
    34c6:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
    34ca:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
    34ce:	22 95       	swap	r18
    34d0:	26 95       	lsr	r18
    34d2:	27 70       	andi	r18, 0x07	; 7
    34d4:	38 e0       	ldi	r19, 0x08	; 8
    34d6:	83 9f       	mul	r24, r19
    34d8:	c0 01       	movw	r24, r0
    34da:	11 24       	eor	r1, r1
    34dc:	82 0f       	add	r24, r18
    34de:	91 1d       	adc	r25, r1

		    byPtr = (BYTE*)&abyCANRxBuff[0];

			//Now take appropriate action based on id and data received
			
            if(id == CANID_SENSOR_PROG_DATA_CMD)
    34e0:	8c 30       	cpi	r24, 0x0C	; 12
    34e2:	91 05       	cpc	r25, r1
    34e4:	59 f5       	brne	.+86     	; 0x353c <__vector_18+0xae>
    34e6:	e9 e1       	ldi	r30, 0x19	; 25
    34e8:	f2 e0       	ldi	r31, 0x02	; 2
            {
			    for (byCtr = 0; byCtr < 8; byCtr++)
			    {
    			    *byPtr = CANMSG;
    34ea:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7fc0fa>
    34ee:	81 93       	st	Z+, r24

			//Now take appropriate action based on id and data received
			
            if(id == CANID_SENSOR_PROG_DATA_CMD)
            {
			    for (byCtr = 0; byCtr < 8; byCtr++)
    34f0:	82 e0       	ldi	r24, 0x02	; 2
    34f2:	e1 32       	cpi	r30, 0x21	; 33
    34f4:	f8 07       	cpc	r31, r24
    34f6:	c9 f7       	brne	.-14     	; 0x34ea <__vector_18+0x5c>
			    {
    			    *byPtr = CANMSG;
    			    byPtr++;
			    }
			    if(readyToUpdateFlag)
    34f8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <readyToUpdateFlag>
    34fc:	88 23       	and	r24, r24
    34fe:	09 f4       	brne	.+2      	; 0x3502 <__vector_18+0x74>
    3500:	c4 c0       	rjmp	.+392    	; 0x368a <__vector_18+0x1fc>
			    {
    			    programPacketReceived = 1;
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <programPacketReceived>
                    // Check the DLC for data length
                    dlc = (CANCDMOB & 0x0F);
    3508:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    350c:	8f 70       	andi	r24, 0x0F	; 15

                    if(dlc < 8)
    350e:	88 30       	cpi	r24, 0x08	; 8
    3510:	20 f4       	brcc	.+8      	; 0x351a <__vector_18+0x8c>
                    {
                        shortProgramPacketReceived = 1;
    3512:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <shortProgramPacketReceived>
                        receivedFwByteCount = dlc;
    3516:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <receivedFwByteCount>
                    }
    			    if (appProgrammingStarted == 0)
    351a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <appProgrammingStarted>
    351e:	81 11       	cpse	r24, r1
    3520:	b4 c0       	rjmp	.+360    	; 0x368a <__vector_18+0x1fc>
    			    {
        			    //set the start flag as first can msg has arrived with prog data
        			    appProgrammingStarted = 1;
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <appProgrammingStarted>
        			    //we are going to program now. So set the flag in EE as invalid
        			    eeprom_busy_wait();
    3528:	f9 99       	sbic	0x1f, 1	; 31
    352a:	fe cf       	rjmp	.-4      	; 0x3528 <__vector_18+0x9a>
        			    eeprom_write_byte((BYTE*)EE_PROGM_DATA_VALID_LOC, 0xFF);
    352c:	6f ef       	ldi	r22, 0xFF	; 255
    352e:	8d e6       	ldi	r24, 0x6D	; 109
    3530:	91 e0       	ldi	r25, 0x01	; 1
    3532:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <eeprom_write_byte>
        			    eeprom_busy_wait();
    3536:	f9 99       	sbic	0x1f, 1	; 31
    3538:	fe cf       	rjmp	.-4      	; 0x3536 <__vector_18+0xa8>
    353a:	a7 c0       	rjmp	.+334    	; 0x368a <__vector_18+0x1fc>
    			    }
			    }
            }
            else if(id == CANID_REQ_CHECKSUM)
    353c:	8f 30       	cpi	r24, 0x0F	; 15
    353e:	91 05       	cpc	r25, r1
    3540:	59 f4       	brne	.+22     	; 0x3558 <__vector_18+0xca>
    3542:	e9 e1       	ldi	r30, 0x19	; 25
    3544:	f2 e0       	ldi	r31, 0x02	; 2
    3546:	81 e2       	ldi	r24, 0x21	; 33
    3548:	92 e0       	ldi	r25, 0x02	; 2
            {
			    for (byCtr = 0; byCtr < 8; byCtr++)
			    {
    			    *byPtr++ = CANMSG;
    354a:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7fc0fa>
    354e:	21 93       	st	Z+, r18
    			    }
			    }
            }
            else if(id == CANID_REQ_CHECKSUM)
            {
			    for (byCtr = 0; byCtr < 8; byCtr++)
    3550:	8e 17       	cp	r24, r30
    3552:	9f 07       	cpc	r25, r31
    3554:	d1 f7       	brne	.-12     	; 0x354a <__vector_18+0xbc>
    3556:	99 c0       	rjmp	.+306    	; 0x368a <__vector_18+0x1fc>
			    {
    			    *byPtr++ = CANMSG;
			    }
			    checksumRequestFlag = 1;          
            }
            else if(id == CANID_START_SENSOR_FW_UPDATE)
    3558:	8e 31       	cpi	r24, 0x1E	; 30
    355a:	91 05       	cpc	r25, r1
    355c:	41 f4       	brne	.+16     	; 0x356e <__vector_18+0xe0>
            {      
                startBootMsgSent = 1;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <startBootMsgSent>
                readyToUpdateFlag = 1;   
    3564:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <readyToUpdateFlag>
                fwUpdateRequest = 1;      
    3568:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <fwUpdateRequest>
    356c:	8e c0       	rjmp	.+284    	; 0x368a <__vector_18+0x1fc>
            }
            else if(id == CANID_FW_UPDATE_COMPLETE)
    356e:	88 32       	cpi	r24, 0x28	; 40
    3570:	91 05       	cpc	r25, r1
    3572:	21 f4       	brne	.+8      	; 0x357c <__vector_18+0xee>
            {
                fwUpdateCompleteFlag = 1;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <fwUpdateCompleteFlag>
    357a:	87 c0       	rjmp	.+270    	; 0x368a <__vector_18+0x1fc>
            }            
            else if(id == CANID_CMD_JUMP_APP)
    357c:	8e 30       	cpi	r24, 0x0E	; 14
    357e:	91 05       	cpc	r25, r1
    3580:	69 f4       	brne	.+26     	; 0x359c <__vector_18+0x10e>
            {
				//command received to jump to app
				jumpToAppFlag = 1;
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <jumpToAppFlag>
				scflEeUpdateReq = CANMSG;//flag for ee to be updated
    3588:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7fc0fa>
    358c:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <scflEeUpdateReq>
    3590:	80 e1       	ldi	r24, 0x10	; 16
				for (byCtr = 0; byCtr < LENGTH_SW_VER; byCtr++)
				{
    				scabySwVer[byCtr] = CANMSG;
    3592:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7fc0fa>
    3596:	81 50       	subi	r24, 0x01	; 1
            else if(id == CANID_CMD_JUMP_APP)
            {
				//command received to jump to app
				jumpToAppFlag = 1;
				scflEeUpdateReq = CANMSG;//flag for ee to be updated
				for (byCtr = 0; byCtr < LENGTH_SW_VER; byCtr++)
    3598:	e1 f7       	brne	.-8      	; 0x3592 <__vector_18+0x104>
    359a:	77 c0       	rjmp	.+238    	; 0x368a <__vector_18+0x1fc>
				{
    				scabySwVer[byCtr] = CANMSG;
				}                
            }         
            else if(id == CANID_REQ_SENSOR_VERSIONS)
    359c:	8a 31       	cpi	r24, 0x1A	; 26
    359e:	91 05       	cpc	r25, r1
    35a0:	09 f4       	brne	.+2      	; 0x35a4 <__vector_18+0x116>
    35a2:	73 c0       	rjmp	.+230    	; 0x368a <__vector_18+0x1fc>
            {
                                
            }
            else if(id == CANID_TARGETED_DEVICE_INFO_REQ)
    35a4:	8d 32       	cpi	r24, 0x2D	; 45
    35a6:	91 05       	cpc	r25, r1
    35a8:	09 f0       	breq	.+2      	; 0x35ac <__vector_18+0x11e>
    35aa:	64 c0       	rjmp	.+200    	; 0x3674 <__vector_18+0x1e6>
            {
			    for (byCtr = 0; byCtr < 4; byCtr++)
			    {
    			    *byPtr++ = CANMSG;
    35ac:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7fc0fa>
    35b0:	30 93 19 02 	sts	0x0219, r19	; 0x800219 <abyCANRxBuff>
    35b4:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7fc0fa>
    35b8:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <abyCANRxBuff+0x1>
    35bc:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7fc0fa>
    35c0:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <abyCANRxBuff+0x2>
    35c4:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7fc0fa>
    35c8:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <abyCANRxBuff+0x3>
			    }
			    if((serialNum[4] == abyCANRxBuff[0]) && (serialNum[5] == abyCANRxBuff[1]) &&
    35cc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    35d0:	43 13       	cpse	r20, r19
    35d2:	5b c0       	rjmp	.+182    	; 0x368a <__vector_18+0x1fc>
    35d4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    35d8:	32 13       	cpse	r19, r18
    35da:	57 c0       	rjmp	.+174    	; 0x368a <__vector_18+0x1fc>
    35dc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    35e0:	29 13       	cpse	r18, r25
    35e2:	53 c0       	rjmp	.+166    	; 0x368a <__vector_18+0x1fc>
			    (serialNum[6] == abyCANRxBuff[2]) && (serialNum[7] == abyCANRxBuff[3]))
    35e4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    35e8:	98 13       	cpse	r25, r24
    35ea:	4f c0       	rjmp	.+158    	; 0x368a <__vector_18+0x1fc>
    35ec:	aa e0       	ldi	r26, 0x0A	; 10
    35ee:	b1 e0       	ldi	r27, 0x01	; 1
    35f0:	84 e5       	ldi	r24, 0x54	; 84
    35f2:	91 e0       	ldi	r25, 0x01	; 1
    35f4:	fd 01       	movw	r30, r26
{
    BYTE i;

    for(i = 0; i < 74; i++)
    {
        outgoingMsg[i] = 0;
    35f6:	11 92       	st	Z+, r1

static void buildDeviceInfo(void)
{
    BYTE i;

    for(i = 0; i < 74; i++)
    35f8:	8e 17       	cp	r24, r30
    35fa:	9f 07       	cpc	r25, r31
    35fc:	e1 f7       	brne	.-8      	; 0x35f6 <__vector_18+0x168>
    35fe:	e0 e0       	ldi	r30, 0x00	; 0
    3600:	f1 e0       	ldi	r31, 0x01	; 1
    3602:	8a e0       	ldi	r24, 0x0A	; 10
    3604:	91 e0       	ldi	r25, 0x01	; 1
    }

    // Build payload
    for(i = 0; i < 10; i++)
    {
        outgoingMsg[i] = serialNum[i];
    3606:	21 91       	ld	r18, Z+
    3608:	2d 93       	st	X+, r18
    {
        outgoingMsg[i] = 0;
    }

    // Build payload
    for(i = 0; i < 10; i++)
    360a:	8e 17       	cp	r24, r30
    360c:	9f 07       	cpc	r25, r31
    360e:	d9 f7       	brne	.-10     	; 0x3606 <__vector_18+0x178>
    {
        outgoingMsg[i] = serialNum[i];
    }

    strcpy_P(&outgoingMsg[10], FwVersion);
    3610:	6c e7       	ldi	r22, 0x7C	; 124
    3612:	70 e3       	ldi	r23, 0x30	; 48
    3614:	84 e1       	ldi	r24, 0x14	; 20
    3616:	91 e0       	ldi	r25, 0x01	; 1
    3618:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <strcpy_P>

    strcpy_P(&outgoingMsg[26], FwPartNum);
    361c:	65 e8       	ldi	r22, 0x85	; 133
    361e:	70 e3       	ldi	r23, 0x30	; 48
    3620:	84 e2       	ldi	r24, 0x24	; 36
    3622:	91 e0       	ldi	r25, 0x01	; 1
    3624:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <strcpy_P>
    3628:	04 e3       	ldi	r16, 0x34	; 52
    362a:	11 e0       	ldi	r17, 0x01	; 1
    362c:	c0 ed       	ldi	r28, 0xD0	; 208
    362e:	d1 e0       	ldi	r29, 0x01	; 1
{
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_VER; i++)
    {
        eeprom_busy_wait();
    3630:	f9 99       	sbic	0x1f, 1	; 31
    3632:	fe cf       	rjmp	.-4      	; 0x3630 <__vector_18+0x1a2>
        versionPtr[i] = eeprom_read_byte((BYTE *)(EE_HW_VER_LOC + i));
    3634:	ce 01       	movw	r24, r28
    3636:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <eeprom_read_byte>
    363a:	f8 01       	movw	r30, r16
    363c:	81 93       	st	Z+, r24
    363e:	8f 01       	movw	r16, r30
    3640:	21 96       	adiw	r28, 0x01	; 1

static void readHwVersion(BYTE * versionPtr)
{
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_VER; i++)
    3642:	c0 3e       	cpi	r28, 0xE0	; 224
    3644:	f1 e0       	ldi	r31, 0x01	; 1
    3646:	df 07       	cpc	r29, r31
    3648:	99 f7       	brne	.-26     	; 0x3630 <__vector_18+0x1a2>
    364a:	04 e4       	ldi	r16, 0x44	; 68
    364c:	11 e0       	ldi	r17, 0x01	; 1
    364e:	c0 eb       	ldi	r28, 0xB0	; 176
    3650:	d1 e0       	ldi	r29, 0x01	; 1
{
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_PART_NUM; i++)
    {
        eeprom_busy_wait();
    3652:	f9 99       	sbic	0x1f, 1	; 31
    3654:	fe cf       	rjmp	.-4      	; 0x3652 <__vector_18+0x1c4>
        partNumPtr[i] = eeprom_read_byte((BYTE *)(EE_HW_PART_NUM_LOC + i));
    3656:	ce 01       	movw	r24, r28
    3658:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <eeprom_read_byte>
    365c:	f8 01       	movw	r30, r16
    365e:	81 93       	st	Z+, r24
    3660:	8f 01       	movw	r16, r30
    3662:	21 96       	adiw	r28, 0x01	; 1

static void readHwPartNum(BYTE * partNumPtr)
{
    BYTE i;
    
    for(i = 0; i < LENGTH_HW_PART_NUM; i++)
    3664:	c0 3c       	cpi	r28, 0xC0	; 192
    3666:	f1 e0       	ldi	r31, 0x01	; 1
    3668:	df 07       	cpc	r29, r31
    366a:	99 f7       	brne	.-26     	; 0x3652 <__vector_18+0x1c4>
			    }
			    if((serialNum[4] == abyCANRxBuff[0]) && (serialNum[5] == abyCANRxBuff[1]) &&
			    (serialNum[6] == abyCANRxBuff[2]) && (serialNum[7] == abyCANRxBuff[3]))
			    {
    			    buildDeviceInfo();
    			    deviceInfoReadyFlag = 1;
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <deviceInfoReadyFlag>
    3672:	0b c0       	rjmp	.+22     	; 0x368a <__vector_18+0x1fc>
			    }                
            }
            else if(id == CANID_SENSOR_PING_ALL)
    3674:	8b 97       	sbiw	r24, 0x2b	; 43
    3676:	49 f4       	brne	.+18     	; 0x368a <__vector_18+0x1fc>
            {
                pingRequest = 1;
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <pingRequest>
    367e:	05 c0       	rjmp	.+10     	; 0x368a <__vector_18+0x1fc>
            }

	   }
	   else if (CANSTMOB & MOB_NOT_REACHED) //error in MOB 1
    3680:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    3684:	8f 71       	andi	r24, 0x1F	; 31
    3686:	09 f0       	breq	.+2      	; 0x368a <__vector_18+0x1fc>
	   {
		  _NOP();
    3688:	00 00       	nop
	   }
	   byCtr = CANSTMOB;
    368a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
       
       CANSTMOB = 0x00;                             /* reset channel 0 status */
    368e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
	   CANCDMOB = DLC_MAX;                         /* receive 8 bytes */
    3692:	88 e0       	ldi	r24, 0x08	; 8
    3694:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
	   CANCDMOB |= CH_RxENA;                       /* reception enable */
    3698:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    369c:	80 68       	ori	r24, 0x80	; 128
    369e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
	   CANGIT = CANGIT;                            /* reset all flags */
    36a2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7fc0da>
    36a6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7fc0da>
}
    36aa:	ff 91       	pop	r31
    36ac:	ef 91       	pop	r30
    36ae:	df 91       	pop	r29
    36b0:	cf 91       	pop	r28
    36b2:	bf 91       	pop	r27
    36b4:	af 91       	pop	r26
    36b6:	9f 91       	pop	r25
    36b8:	8f 91       	pop	r24
    36ba:	7f 91       	pop	r23
    36bc:	6f 91       	pop	r22
    36be:	5f 91       	pop	r21
    36c0:	4f 91       	pop	r20
    36c2:	3f 91       	pop	r19
    36c4:	2f 91       	pop	r18
    36c6:	1f 91       	pop	r17
    36c8:	0f 91       	pop	r16
    36ca:	0f 90       	pop	r0
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	0f 90       	pop	r0
    36d0:	1f 90       	pop	r1
    36d2:	18 95       	reti

000036d4 <__vector_12>:
DATE:       WHO:  CHANGE DESCRIPTION:
======================================================================
05/08/2004  BWT   Created.
*******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    36d4:	1f 92       	push	r1
    36d6:	0f 92       	push	r0
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	0f 92       	push	r0
    36dc:	11 24       	eor	r1, r1
    36de:	8f 93       	push	r24
    36e0:	9f 93       	push	r25
    scbyTicksPending++;
    36e2:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <scbyTicksPending>
    36e6:	8f 5f       	subi	r24, 0xFF	; 255
    36e8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <scbyTicksPending>
    OCR1A  = OCR1A_COUNT_FOR_TICK; // reset output compare value;
    36ec:	89 e0       	ldi	r24, 0x09	; 9
    36ee:	9d e3       	ldi	r25, 0x3D	; 61
    36f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    36f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>

}
    36f8:	9f 91       	pop	r25
    36fa:	8f 91       	pop	r24
    36fc:	0f 90       	pop	r0
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	0f 90       	pop	r0
    3702:	1f 90       	pop	r1
    3704:	18 95       	reti

00003706 <main>:
03/27/2005  J       Initial Creation
01/12/2006 RVW      Scheduler period changed to 250 ms
                    Tasks changed to correspond with a power of 2 samples per 250 ms
*******************************************************************************/
int main(void)
{
    3706:	cf 93       	push	r28
    3708:	df 93       	push	r29
    370a:	00 d0       	rcall	.+0      	; 0x370c <main+0x6>
    370c:	00 d0       	rcall	.+0      	; 0x370e <main+0x8>
    370e:	1f 92       	push	r1
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
   BYTE* pbyVal;

   BYTE pendingUpdateFlag = 0xFF;
   BYTE validAppFlag = 0xFF;
   BYTE pageWriteCount = 0;
   appErrorMsgSent = 0;
    3714:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <appErrorMsgSent>
   startBootMsgSent = 0;
    3718:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <startBootMsgSent>
   readyToUpdateFlag = 0;
    371c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <readyToUpdateFlag>
   fwUpdateCompleteFlag = 0;
    3720:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <fwUpdateCompleteFlag>
   deviceInfoReadyFlag = 0;
    3724:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <deviceInfoReadyFlag>
   pingRequest = 0;
    3728:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <pingRequest>
   fwUpdateRequest = 0;
    372c:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <fwUpdateRequest>
   activeError = 0;
    3730:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <activeError>
   commTimer = 0;
    3734:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <commTimer+0x1>
    3738:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <commTimer>

   ////WORD toggleCount = 0;

   _CLI(); //disable all interrupts
    373c:	f8 94       	cli
   //move interrupts to bootloader section from application section
   MCUCR = 0x01; //set the IVCE bit in MCUCR
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	85 bf       	out	0x35, r24	; 53
   MCUCR = 0x02; //set the IVSEL bit and reset the IVCE bit within 4clk cycles from last line
    3742:	82 e0       	ldi	r24, 0x02	; 2
    3744:	85 bf       	out	0x35, r24	; 53
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3746:	9f e0       	ldi	r25, 0x0F	; 15
    3748:	88 e1       	ldi	r24, 0x18	; 24
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	a8 95       	wdr
    3750:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
    3754:	0f be       	out	0x3f, r0	; 63
    3756:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>

   // Enable watch dog timer for 2 second duration
   wdt_enable(WDTO_2S);

   //initialization of other static vars
   programPacketReceived = 0;
    375a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <programPacketReceived>
   shortProgramPacketReceived = 0;
    375e:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <shortProgramPacketReceived>
   programPacketCount = 0;
    3762:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <programPacketCount+0x1>
    3766:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <programPacketCount>
   appProgrammingStarted = 0;
    376a:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <appProgrammingStarted>
   scwIndex = 0;
    376e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <scwIndex+0x1>
    3772:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <scwIndex>
   scdwAddress = 0;
    3776:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <scdwAddress>
    377a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <scdwAddress+0x1>
    377e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <scdwAddress+0x2>
    3782:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <scdwAddress+0x3>
   checksumRequestFlag = 0;
   //scbySleep = 0;
   scflEeUpdateReq = 0;
    3786:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <scflEeUpdateReq>
   //scbyChksm1 = 0;
   scbyChksm2 = 0;
    378a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <scbyChksm2>
    378e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <scbyChksm2+0x1>
    3792:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <scbyChksm2+0x2>
    3796:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <scbyChksm2+0x3>
   scbyChksm3 = 0;
    379a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <scbyChksm3>
    379e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <scbyChksm3+0x1>
    37a2:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <scbyChksm3+0x2>
    37a6:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <scbyChksm3+0x3>
   receivedChecksum = 0;
    37aa:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <receivedChecksum>
    37ae:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <receivedChecksum+0x1>
    37b2:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <receivedChecksum+0x2>
    37b6:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <receivedChecksum+0x3>
======================================================================
07/07/2005  VS       Initial Creation
*******************************************************************************/
static void hwInit(void)
{
    CONFIG_PORTB_DDR;
    37ba:	84 b1       	in	r24, 0x04	; 4
    37bc:	8b 69       	ori	r24, 0x9B	; 155
    37be:	84 b9       	out	0x04, r24	; 4
    CONFIG_PORTC_DDR;
    37c0:	87 b1       	in	r24, 0x07	; 7
    37c2:	8f 6c       	ori	r24, 0xCF	; 207
    37c4:	87 b9       	out	0x07, r24	; 7
    CONFIG_PORTD_DDR;
    37c6:	8a b1       	in	r24, 0x0a	; 10
    37c8:	8b 61       	ori	r24, 0x1B	; 27
    37ca:	8a b9       	out	0x0a, r24	; 10
    CONFIG_PORTE_DDR;
    37cc:	1d b8       	out	0x0d, r1	; 13

    PORTB = 0;
    37ce:	15 b8       	out	0x05, r1	; 5
    PORTD = 0;
    37d0:	1b b8       	out	0x0b, r1	; 11
    37d2:	00 e0       	ldi	r16, 0x00	; 0
    37d4:	11 e0       	ldi	r17, 0x01	; 1
    37d6:	86 ea       	ldi	r24, 0xA6	; 166
    37d8:	91 e0       	ldi	r25, 0x01	; 1
    37da:	9a 83       	std	Y+2, r25	; 0x02
    37dc:	89 83       	std	Y+1, r24	; 0x01
{
    BYTE i;
    
    for(i = 0; i < LENGTH_SERIAL_NUM; i++)
    {
        eeprom_busy_wait();
    37de:	f9 99       	sbic	0x1f, 1	; 31
    37e0:	fe cf       	rjmp	.-4      	; 0x37de <main+0xd8>
        serialNum[i] = eeprom_read_byte((BYTE *)(EE_SERIAL_NUM_LOC + i));
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	9a 81       	ldd	r25, Y+2	; 0x02
    37e6:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <eeprom_read_byte>
    37ea:	d8 01       	movw	r26, r16
    37ec:	8d 93       	st	X+, r24
    37ee:	8d 01       	movw	r16, r26
    37f0:	e9 81       	ldd	r30, Y+1	; 0x01
    37f2:	fa 81       	ldd	r31, Y+2	; 0x02
    37f4:	31 96       	adiw	r30, 0x01	; 1
    37f6:	fa 83       	std	Y+2, r31	; 0x02
    37f8:	e9 83       	std	Y+1, r30	; 0x01
// Read and store the device Serial Number from EEPROM
static void readSerialNum(void)
{
    BYTE i;
    
    for(i = 0; i < LENGTH_SERIAL_NUM; i++)
    37fa:	e0 3b       	cpi	r30, 0xB0	; 176
    37fc:	f1 40       	sbci	r31, 0x01	; 1
    37fe:	79 f7       	brne	.-34     	; 0x37de <main+0xd8>
10/10/2006   Vijay Soni       Initial Creation
10/16/2006   Robert Weinmann  Added Interrupt Enable for Output Compare match
*******************************************************************************/
static void SchedulerInit(void)
{
    TCCR1A = 0; // Use OCR1A for TOP count
    3800:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
    TCCR1B = _BV(WGM12) | _BV(CS10); // CTC mode, no clock pre-scaler
    3804:	89 e0       	ldi	r24, 0x09	; 9
    3806:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
    TIMSK1 |= _BV(OCIE1A); // Enable Output Compare A Match interrupt
    380a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    380e:	82 60       	ori	r24, 0x02	; 2
    3810:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    OCR1A = OCR1A_COUNT_FOR_TICK;
    3814:	89 e0       	ldi	r24, 0x09	; 9
    3816:	9d e3       	ldi	r25, 0x3D	; 61
    3818:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    381c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>

    scbyCurrentTick = LAST_TICK; //initial value, next value will be 0
    3820:	8f ef       	ldi	r24, 0xFF	; 255
    3822:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <scbyCurrentTick>
    scbyTicksPending = 0;
    3826:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <scbyTicksPending>

/*******************************************************************************/

static void CANinit(void)
{
  Can_reset();
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7fc0d8>
  //- Set CAN Bit-timing
  can_init((U16)CAN_BAUDRATE);        // c.f. macro in "can_drv.h"
    3830:	8d e7       	ldi	r24, 0x7D	; 125
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	0e 94 b4 18 	call	0x3168	; 0x3168 <can_init>
  //- Set CAN Timer Prescaler
  CANTCON = CANBT1;
    3838:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7fc0e2>
    383c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

  scCANmsgTx.pt_data = &abyCANTxBuff[0]; //point to buffer
    3840:	8d e0       	ldi	r24, 0x0D	; 13
    3842:	92 e0       	ldi	r25, 0x02	; 2
    3844:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <scCANmsgTx+0x8>
    3848:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <scCANmsgTx+0x7>
  scCANmsgTx.status = STATUS_CLEARED;
    384c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <scCANmsgTx+0x9>
  scCANmsgTx.cmd = CMD_TX_DATA;
    3850:	82 e0       	ldi	r24, 0x02	; 2
    3852:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <scCANmsgTx+0x1>
  scCANmsgTx.dlc = 8;
    3856:	88 e0       	ldi	r24, 0x08	; 8
    3858:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <scCANmsgTx+0x6>

  /* MOB  init for reception */
  CANPAGE = (5 << 4);
    385c:	80 e5       	ldi	r24, 0x50	; 80
    385e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
  CANSTMOB  = 0x00;                            /* reset channel status */
    3862:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
  CANCDMOB = CH_DISABLE;                       /* reset control and dlc register */
    3866:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
  /* Reception Channel : mask */
  CANIDM1 = 0x00;
    386a:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
  CANIDM2 &= ~0xE0;
    386e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
    3872:	8f 71       	andi	r24, 0x1F	; 31
    3874:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
  CANIDM4 = 0;
    3878:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>

  /* Reception Channel configuration */
  CANIDT4 &=~0x04;                             /* clear bit rtr in CANIDT4. */
    387c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
    3880:	8b 7f       	andi	r24, 0xFB	; 251
    3882:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7fc0f0>
  CANCDMOB |= DLC_MAX;                         /* Reception 8 bytes.*/
    3886:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    388a:	88 60       	ori	r24, 0x08	; 8
    388c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
  CANCDMOB |= CH_RxENA;                        /* Reception enabled without buffer.*/
    3890:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
    3894:	80 68       	ori	r24, 0x80	; 128
    3896:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>

  /* interrupt configuration - enable interrupts at reception channel*/
  //CANIE1 |= 0x40; //turn on IEMOB14 bit to enable interrupts on MOB 14
  CANIE2 |= 0x20; //turn on IEMOB5 bit to enable interrupts on MOB 5
    389a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7fc0de>
    389e:	80 62       	ori	r24, 0x20	; 32
    38a0:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7fc0de>
  CANGIE = ((1<<ENRX) | (1<<ENIT));       /* Can_Rx & IT enable */
    38a4:	80 ea       	ldi	r24, 0xA0	; 160
    38a6:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7fc0db>

   SchedulerInit();

   CANinit();

   TURN_LED_ON;
    38aa:	2c 9a       	sbi	0x05, 4	; 5

   	eeprom_busy_wait();
    38ac:	f9 99       	sbic	0x1f, 1	; 31
    38ae:	fe cf       	rjmp	.-4      	; 0x38ac <main+0x1a6>
   	validAppFlag = eeprom_read_byte((BYTE *)EE_PROGM_DATA_VALID_LOC);
    38b0:	8d e6       	ldi	r24, 0x6D	; 109
    38b2:	91 e0       	ldi	r25, 0x01	; 1
    38b4:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <eeprom_read_byte>
    38b8:	18 2f       	mov	r17, r24
   	eeprom_busy_wait();
    38ba:	f9 99       	sbic	0x1f, 1	; 31
    38bc:	fe cf       	rjmp	.-4      	; 0x38ba <main+0x1b4>
   	pendingUpdateFlag = eeprom_read_byte((BYTE *)EE_FW_UPDATE_PENDING_LOC);
    38be:	8a e6       	ldi	r24, 0x6A	; 106
    38c0:	91 e0       	ldi	r25, 0x01	; 1
    38c2:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <eeprom_read_byte>
    38c6:	08 2f       	mov	r16, r24
   /* Enable interrupts */
   _SEI();
    38c8:	78 94       	sei
   WORD wJ;
   BYTE* pbyVal;

   BYTE pendingUpdateFlag = 0xFF;
   BYTE validAppFlag = 0xFF;
   BYTE pageWriteCount = 0;
    38ca:	1d 82       	std	Y+5, r1	; 0x05
{
    while (can_get_status(&scCANmsgTx) == CAN_STATUS_NOT_COMPLETED);
    scCANmsgTx.dlc = 0;
    //*((DWORD*)&abyCANTxBuff[0]) = 0;       //fill the data bytes
	//*((DWORD*)&abyCANTxBuff[4]) = 0;	     //fill the data bytes
	scCANmsgTx.id.std = CANID_PROG_DATA_ACK;
    38cc:	8d e0       	ldi	r24, 0x0D	; 13
    38ce:	88 2e       	mov	r8, r24
    38d0:	91 2c       	mov	r9, r1
        abyCANTxBuff[3] = outgoingMsg[(i * 8) + 3];
        abyCANTxBuff[4] = outgoingMsg[(i * 8) + 4];
        abyCANTxBuff[5] = outgoingMsg[(i * 8) + 5];
        abyCANTxBuff[6] = outgoingMsg[(i * 8) + 6];
        abyCANTxBuff[7] = outgoingMsg[(i * 8) + 7];
        scCANmsgTx.id.std = CANID_DEVICE_INFO;
    38d2:	91 e2       	ldi	r25, 0x21	; 33
    38d4:	29 2e       	mov	r2, r25
    38d6:	31 2c       	mov	r3, r1

   /* Start the task manager loop. */
   //while(1);
   for (;;)
   {
	 wdt_reset();
    38d8:	a8 95       	wdr
     //if (scbySleep == 0)
	 //{

        //if timed out waiting for start of programming/jump cmd
	//jump to application if last programming attempt was successful
	if((validAppFlag == 0) && (pendingUpdateFlag != 0x01))
    38da:	11 11       	cpse	r17, r1
    38dc:	1a c0       	rjmp	.+52     	; 0x3912 <main+0x20c>
    38de:	01 30       	cpi	r16, 0x01	; 1
    38e0:	61 f4       	brne	.+24     	; 0x38fa <main+0x1f4>
            
	}

    if(pendingUpdateFlag == 0x01)
    {
		if(!startBootMsgSent)
    38e2:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <startBootMsgSent>
    38e6:	81 11       	cpse	r24, r1
    38e8:	31 c0       	rjmp	.+98     	; 0x394c <main+0x246>
		{
    		startBootMsgSent = 1;
    38ea:	e1 e0       	ldi	r30, 0x01	; 1
    38ec:	e0 93 63 01 	sts	0x0163, r30	; 0x800163 <startBootMsgSent>
            readyToUpdateFlag = 1;
    38f0:	e0 93 62 01 	sts	0x0162, r30	; 0x800162 <readyToUpdateFlag>
    		sendReadyForFwUpdate();
    38f4:	0e 94 e7 19 	call	0x33ce	; 0x33ce <sendReadyForFwUpdate>
    38f8:	29 c0       	rjmp	.+82     	; 0x394c <main+0x246>

        //if timed out waiting for start of programming/jump cmd
	//jump to application if last programming attempt was successful
	if((validAppFlag == 0) && (pendingUpdateFlag != 0x01))
	{
		eeprom_busy_wait();
    38fa:	f9 99       	sbic	0x1f, 1	; 31
    38fc:	fe cf       	rjmp	.-4      	; 0x38fa <main+0x1f4>
		// EEPROM update not required as we did not receive any command
		eeprom_write_byte((BYTE*)EE_UPDATE_REQ_LOC, 0xFF);
    38fe:	6f ef       	ldi	r22, 0xFF	; 255
    3900:	8c e6       	ldi	r24, 0x6C	; 108
    3902:	91 e0       	ldi	r25, 0x01	; 1
    3904:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <eeprom_write_byte>
		eeprom_busy_wait();
    3908:	f9 99       	sbic	0x1f, 1	; 31
    390a:	fe cf       	rjmp	.-4      	; 0x3908 <main+0x202>
		JumpToApp();
    390c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <JumpToApp>
    3910:	1d c0       	rjmp	.+58     	; 0x394c <main+0x246>
	}
	else if(validAppFlag != 0)//last programming was not successful if it ever happened
	{
        if(activeError == 0)
    3912:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <activeError>
    3916:	81 11       	cpse	r24, r1
    3918:	07 c0       	rjmp	.+14     	; 0x3928 <main+0x222>
        {
            activeError = 1;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <activeError>
            // Turn off all LEDs to sync flashing
            PORTB &= ~(_BV(PB1));
    3920:	29 98       	cbi	0x05, 1	; 5
            PORTC &= ~(_BV(PC6));
    3922:	46 98       	cbi	0x08, 6	; 8
            PORTB &= ~(_BV(PB4));
    3924:	2c 98       	cbi	0x05, 4	; 5
            PORTB &= ~(_BV(PB3));
    3926:	2b 98       	cbi	0x05, 3	; 5
        }
		if(commTimer > INV_APP_RETRY_TIME)//!appErrorMsgSent)
    3928:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <commTimer>
    392c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <commTimer+0x1>
    3930:	89 38       	cpi	r24, 0x89	; 137
    3932:	93 41       	sbci	r25, 0x13	; 19
    3934:	48 f0       	brcs	.+18     	; 0x3948 <main+0x242>
        {
            appErrorMsgSent = 1;
    3936:	b1 e0       	ldi	r27, 0x01	; 1
    3938:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <appErrorMsgSent>
            commTimer = 0;
    393c:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <commTimer+0x1>
    3940:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <commTimer>
            sendInvalidProgMsg();
    3944:	0e 94 32 1a 	call	0x3464	; 0x3464 <sendInvalidProgMsg>
        }
            
	}

    if(pendingUpdateFlag == 0x01)
    3948:	01 30       	cpi	r16, 0x01	; 1
    394a:	59 f2       	breq	.-106    	; 0x38e2 <main+0x1dc>
            readyToUpdateFlag = 1;
    		sendReadyForFwUpdate();
		}        
    }
	//if jump to app command has come from display
	if (jumpToAppFlag == 1)
    394c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <jumpToAppFlag>
    3950:	81 30       	cpi	r24, 0x01	; 1
    3952:	09 f0       	breq	.+2      	; 0x3956 <main+0x250>
    3954:	43 c0       	rjmp	.+134    	; 0x39dc <main+0x2d6>
	{
		eeprom_busy_wait();
    3956:	f9 99       	sbic	0x1f, 1	; 31
    3958:	fe cf       	rjmp	.-4      	; 0x3956 <main+0x250>
		if (scflEeUpdateReq == 1)
    395a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <scflEeUpdateReq>
    395e:	81 30       	cpi	r24, 0x01	; 1
    3960:	41 f4       	brne	.+16     	; 0x3972 <main+0x26c>
		{
			//eeprom update requested
			eeprom_write_byte((BYTE*)EE_UPDATE_REQ_LOC, 0);
    3962:	60 e0       	ldi	r22, 0x00	; 0
    3964:	8c e6       	ldi	r24, 0x6C	; 108
    3966:	91 e0       	ldi	r25, 0x01	; 1
    3968:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <eeprom_write_byte>
			eeprom_busy_wait();
    396c:	f9 99       	sbic	0x1f, 1	; 31
    396e:	fe cf       	rjmp	.-4      	; 0x396c <main+0x266>
    3970:	0d c0       	rjmp	.+26     	; 0x398c <main+0x286>
		}
		else
		{
			if (eeprom_read_byte((BYTE*)EE_UPDATE_REQ_LOC) != 0xFF) //if flag already not 0xFF
    3972:	8c e6       	ldi	r24, 0x6C	; 108
    3974:	91 e0       	ldi	r25, 0x01	; 1
    3976:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <eeprom_read_byte>
    397a:	8f 3f       	cpi	r24, 0xFF	; 255
    397c:	39 f0       	breq	.+14     	; 0x398c <main+0x286>
			{
			    //set eeprom update not requested
				eeprom_busy_wait();
    397e:	f9 99       	sbic	0x1f, 1	; 31
    3980:	fe cf       	rjmp	.-4      	; 0x397e <main+0x278>
			    eeprom_write_byte((BYTE*)EE_UPDATE_REQ_LOC, 0xFF);
    3982:	6f ef       	ldi	r22, 0xFF	; 255
    3984:	8c e6       	ldi	r24, 0x6C	; 108
    3986:	91 e0       	ldi	r25, 0x01	; 1
    3988:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <eeprom_write_byte>

		//either programming was successful or no programming was requested
		//in either case we need to jump to app, but in former case we need
		//to update the EE flag	before jump to app and in later case we need
		//to see if EE flag allows jump
		if (appProgrammingStarted == 0)  //programming was not going on
    398c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <appProgrammingStarted>
    3990:	81 11       	cpse	r24, r1
    3992:	11 c0       	rjmp	.+34     	; 0x39b6 <main+0x2b0>
		{
            eeprom_busy_wait();
    3994:	f9 99       	sbic	0x1f, 1	; 31
    3996:	fe cf       	rjmp	.-4      	; 0x3994 <main+0x28e>
			if (validAppFlag == 0)
    3998:	11 11       	cpse	r17, r1
    399a:	03 c0       	rjmp	.+6      	; 0x39a2 <main+0x29c>
			{
                JumpToApp();
    399c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <JumpToApp>
    39a0:	1b c0       	rjmp	.+54     	; 0x39d8 <main+0x2d2>
			}
			else
			{
			//scbySleep = 1;
			    if(!appErrorMsgSent)
    39a2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <appErrorMsgSent>
    39a6:	81 11       	cpse	r24, r1
    39a8:	17 c0       	rjmp	.+46     	; 0x39d8 <main+0x2d2>
			    {
    			    appErrorMsgSent = 1;
    39aa:	f1 e0       	ldi	r31, 0x01	; 1
    39ac:	f0 93 64 01 	sts	0x0164, r31	; 0x800164 <appErrorMsgSent>
				    sendInvalidProgMsg();
    39b0:	0e 94 32 1a 	call	0x3464	; 0x3464 <sendInvalidProgMsg>
    39b4:	11 c0       	rjmp	.+34     	; 0x39d8 <main+0x2d2>
	    }
	    else
	    {
		    //programming was going on
		    // set the flag in EE as program is valid
		    eeprom_busy_wait();
    39b6:	f9 99       	sbic	0x1f, 1	; 31
    39b8:	fe cf       	rjmp	.-4      	; 0x39b6 <main+0x2b0>
		    eeprom_write_byte((BYTE*)EE_PROGM_DATA_VALID_LOC, 0);
    39ba:	60 e0       	ldi	r22, 0x00	; 0
    39bc:	8d e6       	ldi	r24, 0x6D	; 109
    39be:	91 e0       	ldi	r25, 0x01	; 1
    39c0:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <eeprom_write_byte>
		    eeprom_busy_wait();
    39c4:	f9 99       	sbic	0x1f, 1	; 31
    39c6:	fe cf       	rjmp	.-4      	; 0x39c4 <main+0x2be>
            eeprom_write_byte((BYTE*)EE_FW_UPDATE_PENDING_LOC, 0);
    39c8:	60 e0       	ldi	r22, 0x00	; 0
    39ca:	8a e6       	ldi	r24, 0x6A	; 106
    39cc:	91 e0       	ldi	r25, 0x01	; 1
    39ce:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <eeprom_write_byte>
            validAppFlag = 0;
			    eeprom_busy_wait();
    39d2:	f9 99       	sbic	0x1f, 1	; 31
    39d4:	fe cf       	rjmp	.-4      	; 0x39d2 <main+0x2cc>
		    // set the flag in EE as program is valid
		    eeprom_busy_wait();
		    eeprom_write_byte((BYTE*)EE_PROGM_DATA_VALID_LOC, 0);
		    eeprom_busy_wait();
            eeprom_write_byte((BYTE*)EE_FW_UPDATE_PENDING_LOC, 0);
            validAppFlag = 0;
    39d6:	10 e0       	ldi	r17, 0x00	; 0
			    eeprom_busy_wait();
			    //eeprom_write_byte((BYTE*)(EE_SW_VER_LOC + byI), scabySwVer[byI]);
	    }
			//eeprom_busy_wait();
	    JumpToApp();
    39d8:	0e 94 db 19 	call	0x33b6	; 0x33b6 <JumpToApp>
	}
		////} //if (jumpToAppFlag == 1)

    if (scbyTicksPending != 0) //Ticks Pending != 0
    39dc:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <scbyTicksPending>
    39e0:	88 23       	and	r24, r24
    39e2:	09 f4       	brne	.+2      	; 0x39e6 <main+0x2e0>
    39e4:	c7 c0       	rjmp	.+398    	; 0x3b74 <main+0x46e>
    {
        scbyTicksPending--;
    39e6:	81 50       	subi	r24, 0x01	; 1
    39e8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <scbyTicksPending>
        if (scbyCurrentTick == LAST_TICK)
    39ec:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <scbyCurrentTick>
    39f0:	8f 3f       	cpi	r24, 0xFF	; 255
    39f2:	19 f4       	brne	.+6      	; 0x39fa <main+0x2f4>
        {
            scbyCurrentTick = 0;
    39f4:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <scbyCurrentTick>
    39f8:	03 c0       	rjmp	.+6      	; 0x3a00 <main+0x2fa>
        }
        else
        {
            scbyCurrentTick++;
    39fa:	8f 5f       	subi	r24, 0xFF	; 255
    39fc:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <scbyCurrentTick>
        }

        //every ~0.97 milli sec
        if (scbyCurrentTick & RUN_2_TICK_MASK)//Run 2 Tick Tasks
    3a00:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <scbyCurrentTick>
    3a04:	80 ff       	sbrs	r24, 0
    3a06:	68 cf       	rjmp	.-304    	; 0x38d8 <main+0x1d2>
        {

            // Debug/Demo to toggle the LED at 1 Hz
            toggleCount++;
    3a08:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <toggleCount>
    3a0c:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <toggleCount+0x1>
    3a10:	01 96       	adiw	r24, 0x01	; 1
    3a12:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <toggleCount+0x1>
    3a16:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <toggleCount>
            commTimer++;
    3a1a:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <commTimer>
    3a1e:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <commTimer+0x1>
    3a22:	2f 5f       	subi	r18, 0xFF	; 255
    3a24:	3f 4f       	sbci	r19, 0xFF	; 255
    3a26:	30 93 5b 01 	sts	0x015B, r19	; 0x80015b <commTimer+0x1>
    3a2a:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <commTimer>

            if((toggleCount > 128) && (activeError) && (!appProgrammingStarted))
    3a2e:	81 38       	cpi	r24, 0x81	; 129
    3a30:	91 05       	cpc	r25, r1
    3a32:	e0 f0       	brcs	.+56     	; 0x3a6c <main+0x366>
    3a34:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <activeError>
    3a38:	88 23       	and	r24, r24
    3a3a:	c1 f0       	breq	.+48     	; 0x3a6c <main+0x366>
    3a3c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <appProgrammingStarted>
    3a40:	81 11       	cpse	r24, r1
    3a42:	14 c0       	rjmp	.+40     	; 0x3a6c <main+0x366>
            {
                TOGGLE_LED_1;
    3a44:	95 b1       	in	r25, 0x05	; 5
    3a46:	82 e0       	ldi	r24, 0x02	; 2
    3a48:	89 27       	eor	r24, r25
    3a4a:	85 b9       	out	0x05, r24	; 5
                TOGGLE_LED_2;
    3a4c:	98 b1       	in	r25, 0x08	; 8
    3a4e:	80 e4       	ldi	r24, 0x40	; 64
    3a50:	89 27       	eor	r24, r25
    3a52:	88 b9       	out	0x08, r24	; 8
                TOGGLE_LED_3;
    3a54:	95 b1       	in	r25, 0x05	; 5
    3a56:	80 e1       	ldi	r24, 0x10	; 16
    3a58:	89 27       	eor	r24, r25
    3a5a:	85 b9       	out	0x05, r24	; 5
                TOGGLE_LED_4;
    3a5c:	95 b1       	in	r25, 0x05	; 5
    3a5e:	88 e0       	ldi	r24, 0x08	; 8
    3a60:	89 27       	eor	r24, r25
    3a62:	85 b9       	out	0x05, r24	; 5
                toggleCount = 0;
    3a64:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <toggleCount+0x1>
    3a68:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <toggleCount>
            }

            wdt_reset();
    3a6c:	a8 95       	wdr
            if(deviceInfoReadyFlag)
    3a6e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <deviceInfoReadyFlag>
    3a72:	88 23       	and	r24, r24
    3a74:	09 f4       	brne	.+2      	; 0x3a78 <main+0x372>
    3a76:	49 c0       	rjmp	.+146    	; 0x3b0a <main+0x404>
    3a78:	fa e0       	ldi	r31, 0x0A	; 10
    3a7a:	af 2e       	mov	r10, r31
    3a7c:	f1 e0       	ldi	r31, 0x01	; 1
    3a7e:	bf 2e       	mov	r11, r31
    3a80:	aa e0       	ldi	r26, 0x0A	; 10
    3a82:	ca 2e       	mov	r12, r26
    BYTE i;

    for(i = 0; i < 10; i++)
    {
        while (can_get_status(&scCANmsgTx) == CAN_STATUS_NOT_COMPLETED);
        scCANmsgTx.dlc = 8;
    3a84:	b8 e0       	ldi	r27, 0x08	; 8
    3a86:	7b 2e       	mov	r7, r27
{
    BYTE i;

    for(i = 0; i < 10; i++)
    {
        while (can_get_status(&scCANmsgTx) == CAN_STATUS_NOT_COMPLETED);
    3a88:	8d ef       	ldi	r24, 0xFD	; 253
    3a8a:	91 e0       	ldi	r25, 0x01	; 1
    3a8c:	0e 94 4d 19 	call	0x329a	; 0x329a <can_get_status>
    3a90:	81 30       	cpi	r24, 0x01	; 1
    3a92:	d1 f3       	breq	.-12     	; 0x3a88 <main+0x382>
        scCANmsgTx.dlc = 8;
    3a94:	70 92 03 02 	sts	0x0203, r7	; 0x800203 <scCANmsgTx+0x6>
        abyCANTxBuff[0] = outgoingMsg[i * 8];
    3a98:	d5 01       	movw	r26, r10
    3a9a:	8c 91       	ld	r24, X
    3a9c:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <abyCANTxBuff>
        abyCANTxBuff[1] = outgoingMsg[(i * 8) + 1];
    3aa0:	11 96       	adiw	r26, 0x01	; 1
    3aa2:	8c 91       	ld	r24, X
    3aa4:	11 97       	sbiw	r26, 0x01	; 1
    3aa6:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <abyCANTxBuff+0x1>
        abyCANTxBuff[2] = outgoingMsg[(i * 8) + 2];
    3aaa:	12 96       	adiw	r26, 0x02	; 2
    3aac:	8c 91       	ld	r24, X
    3aae:	12 97       	sbiw	r26, 0x02	; 2
    3ab0:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <abyCANTxBuff+0x2>
        abyCANTxBuff[3] = outgoingMsg[(i * 8) + 3];
    3ab4:	13 96       	adiw	r26, 0x03	; 3
    3ab6:	8c 91       	ld	r24, X
    3ab8:	13 97       	sbiw	r26, 0x03	; 3
    3aba:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <abyCANTxBuff+0x3>
        abyCANTxBuff[4] = outgoingMsg[(i * 8) + 4];
    3abe:	14 96       	adiw	r26, 0x04	; 4
    3ac0:	8c 91       	ld	r24, X
    3ac2:	14 97       	sbiw	r26, 0x04	; 4
    3ac4:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <abyCANTxBuff+0x4>
        abyCANTxBuff[5] = outgoingMsg[(i * 8) + 5];
    3ac8:	15 96       	adiw	r26, 0x05	; 5
    3aca:	8c 91       	ld	r24, X
    3acc:	15 97       	sbiw	r26, 0x05	; 5
    3ace:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <abyCANTxBuff+0x5>
        abyCANTxBuff[6] = outgoingMsg[(i * 8) + 6];
    3ad2:	16 96       	adiw	r26, 0x06	; 6
    3ad4:	8c 91       	ld	r24, X
    3ad6:	16 97       	sbiw	r26, 0x06	; 6
    3ad8:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <abyCANTxBuff+0x6>
        abyCANTxBuff[7] = outgoingMsg[(i * 8) + 7];
    3adc:	17 96       	adiw	r26, 0x07	; 7
    3ade:	8c 91       	ld	r24, X
    3ae0:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <abyCANTxBuff+0x7>
        scCANmsgTx.id.std = CANID_DEVICE_INFO;
    3ae4:	30 92 00 02 	sts	0x0200, r3	; 0x800200 <scCANmsgTx+0x3>
    3ae8:	20 92 ff 01 	sts	0x01FF, r2	; 0x8001ff <scCANmsgTx+0x2>
	    while (can_cmd(&scCANmsgTx) != CAN_CMD_ACCEPTED);     
    3aec:	8d ef       	ldi	r24, 0xFD	; 253
    3aee:	91 e0       	ldi	r25, 0x01	; 1
    3af0:	0e 94 c1 18 	call	0x3182	; 0x3182 <can_cmd>
    3af4:	81 11       	cpse	r24, r1
    3af6:	fa cf       	rjmp	.-12     	; 0x3aec <main+0x3e6>
        
        wdt_reset();   
    3af8:	a8 95       	wdr
    3afa:	ca 94       	dec	r12
    3afc:	b8 e0       	ldi	r27, 0x08	; 8
    3afe:	ab 0e       	add	r10, r27
    3b00:	b1 1c       	adc	r11, r1

static void sendDeviceInfoData(void)
{
    BYTE i;

    for(i = 0; i < 10; i++)
    3b02:	c1 10       	cpse	r12, r1
    3b04:	c1 cf       	rjmp	.-126    	; 0x3a88 <main+0x382>
	    while (can_cmd(&scCANmsgTx) != CAN_CMD_ACCEPTED);     
        
        wdt_reset();   
    }   

    deviceInfoReadyFlag = 0;
    3b06:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <deviceInfoReadyFlag>
            wdt_reset();
            if(deviceInfoReadyFlag)
            {
                sendDeviceInfoData();
            }
            if(pingRequest)
    3b0a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <pingRequest>
    3b0e:	88 23       	and	r24, r24
    3b10:	39 f1       	breq	.+78     	; 0x3b60 <main+0x45a>
	while (can_cmd(&scCANmsgTx) != CAN_CMD_ACCEPTED);
}

static void sendPingResponse(void)
{
    while (can_get_status(&scCANmsgTx) == CAN_STATUS_NOT_COMPLETED);
    3b12:	8d ef       	ldi	r24, 0xFD	; 253
    3b14:	91 e0       	ldi	r25, 0x01	; 1
    3b16:	0e 94 4d 19 	call	0x329a	; 0x329a <can_get_status>
    3b1a:	81 30       	cpi	r24, 0x01	; 1
    3b1c:	d1 f3       	breq	.-12     	; 0x3b12 <main+0x40c>
    abyCANTxBuff[0] = serialNum[4];
    3b1e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    3b22:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <abyCANTxBuff>
    abyCANTxBuff[1] = serialNum[5];
    3b26:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    3b2a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <abyCANTxBuff+0x1>
    abyCANTxBuff[2] = serialNum[6];
    3b2e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    3b32:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <abyCANTxBuff+0x2>
    abyCANTxBuff[3] = serialNum[7];
    3b36:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    3b3a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <abyCANTxBuff+0x3>
    scCANmsgTx.dlc = 4;
    3b3e:	84 e0       	ldi	r24, 0x04	; 4
    3b40:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <scCANmsgTx+0x6>
    scCANmsgTx.id.std = CANID_PING_RESPONSE;
    3b44:	8c e2       	ldi	r24, 0x2C	; 44
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <scCANmsgTx+0x3>
    3b4c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <scCANmsgTx+0x2>
    while (can_cmd(&scCANmsgTx) != CAN_CMD_ACCEPTED);
    3b50:	8d ef       	ldi	r24, 0xFD	; 253
    3b52:	91 e0       	ldi	r25, 0x01	; 1
    3b54:	0e 94 c1 18 	call	0x3182	; 0x3182 <can_cmd>
    3b58:	81 11       	cpse	r24, r1
    3b5a:	fa cf       	rjmp	.-12     	; 0x3b50 <main+0x44a>
                sendDeviceInfoData();
            }
            if(pingRequest)
            {
                sendPingResponse();
                pingRequest = 0;
    3b5c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <pingRequest>
            }
            if(fwUpdateRequest)
    3b60:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <fwUpdateRequest>
    3b64:	88 23       	and	r24, r24
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <main+0x464>
    3b68:	b7 ce       	rjmp	.-658    	; 0x38d8 <main+0x1d2>
            {
                sendReadyForFwUpdate();
    3b6a:	0e 94 e7 19 	call	0x33ce	; 0x33ce <sendReadyForFwUpdate>
                fwUpdateRequest = 0;
    3b6e:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <fwUpdateRequest>
    3b72:	b2 ce       	rjmp	.-668    	; 0x38d8 <main+0x1d2>

        }//every ~0.97 milli sec
    }
	else//will run all the time otherwise when a 1 tick or 2 tick task is not running
	{
		wdt_reset();
    3b74:	a8 95       	wdr
        if (programPacketReceived == 1)  //packet arrived
    3b76:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <programPacketReceived>
    3b7a:	81 30       	cpi	r24, 0x01	; 1
    3b7c:	09 f0       	breq	.+2      	; 0x3b80 <main+0x47a>
    3b7e:	2a c1       	rjmp	.+596    	; 0x3dd4 <main+0x6ce>
		{
		    programPacketReceived = 0; //reset flag
    3b80:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <programPacketReceived>

            programPacketCount++;
    3b84:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <programPacketCount>
    3b88:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <programPacketCount+0x1>
    3b8c:	01 96       	adiw	r24, 0x01	; 1
    3b8e:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <programPacketCount+0x1>
    3b92:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <programPacketCount>

            if(shortProgramPacketReceived)
    3b96:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <shortProgramPacketReceived>
    3b9a:	22 23       	and	r18, r18
    3b9c:	19 f0       	breq	.+6      	; 0x3ba4 <main+0x49e>
            {
                // receivedFwByteCount should already have been set by CAN driver
                shortProgramPacketReceived = 0;
    3b9e:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <shortProgramPacketReceived>
    3ba2:	03 c0       	rjmp	.+6      	; 0x3baa <main+0x4a4>
            }
            else
            {
                receivedFwByteCount = 8;
    3ba4:	28 e0       	ldi	r18, 0x08	; 8
    3ba6:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <receivedFwByteCount>
            }

            if(programPacketCount < 6) // Handle the first 5 header packets
    3baa:	86 30       	cpi	r24, 0x06	; 6
    3bac:	91 05       	cpc	r25, r1
    3bae:	08 f0       	brcs	.+2      	; 0x3bb2 <main+0x4ac>
    3bb0:	4a c0       	rjmp	.+148    	; 0x3c46 <main+0x540>
            {
                if(programPacketCount == 1)
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	09 f0       	breq	.+2      	; 0x3bb8 <main+0x4b2>
    3bb6:	fc c0       	rjmp	.+504    	; 0x3db0 <main+0x6aa>
                {
                    // First packet so pull out the header info
                    receivedChecksum += (DWORD)abyCANRxBuff[4];
                    receivedChecksum += ((DWORD)abyCANRxBuff[5] << 8);
                    receivedChecksum += ((DWORD)abyCANRxBuff[6] << 16);
                    receivedChecksum += ((DWORD)abyCANRxBuff[7] << 24);
    3bb8:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <abyCANRxBuff+0x4>
    3bbc:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <receivedChecksum>
    3bc0:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <receivedChecksum+0x1>
    3bc4:	a0 91 6f 01 	lds	r26, 0x016F	; 0x80016f <receivedChecksum+0x2>
    3bc8:	b0 91 70 01 	lds	r27, 0x0170	; 0x800170 <receivedChecksum+0x3>
    3bcc:	ac 01       	movw	r20, r24
    3bce:	bd 01       	movw	r22, r26
    3bd0:	42 0f       	add	r20, r18
    3bd2:	51 1d       	adc	r21, r1
    3bd4:	61 1d       	adc	r22, r1
    3bd6:	71 1d       	adc	r23, r1
    3bd8:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <abyCANRxBuff+0x5>
    3bdc:	89 2f       	mov	r24, r25
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	a0 e0       	ldi	r26, 0x00	; 0
    3be2:	b0 e0       	ldi	r27, 0x00	; 0
    3be4:	ba 2f       	mov	r27, r26
    3be6:	a9 2f       	mov	r26, r25
    3be8:	98 2f       	mov	r25, r24
    3bea:	88 27       	eor	r24, r24
    3bec:	84 0f       	add	r24, r20
    3bee:	95 1f       	adc	r25, r21
    3bf0:	a6 1f       	adc	r26, r22
    3bf2:	b7 1f       	adc	r27, r23
    3bf4:	40 91 1f 02 	lds	r20, 0x021F	; 0x80021f <abyCANRxBuff+0x6>
    3bf8:	50 e0       	ldi	r21, 0x00	; 0
    3bfa:	60 e0       	ldi	r22, 0x00	; 0
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	ba 01       	movw	r22, r20
    3c00:	55 27       	eor	r21, r21
    3c02:	44 27       	eor	r20, r20
    3c04:	84 0f       	add	r24, r20
    3c06:	95 1f       	adc	r25, r21
    3c08:	a6 1f       	adc	r26, r22
    3c0a:	b7 1f       	adc	r27, r23
    3c0c:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <abyCANRxBuff+0x7>
    3c10:	50 e0       	ldi	r21, 0x00	; 0
    3c12:	60 e0       	ldi	r22, 0x00	; 0
    3c14:	70 e0       	ldi	r23, 0x00	; 0
    3c16:	74 2f       	mov	r23, r20
    3c18:	66 27       	eor	r22, r22
    3c1a:	55 27       	eor	r21, r21
    3c1c:	44 27       	eor	r20, r20
    3c1e:	84 0f       	add	r24, r20
    3c20:	95 1f       	adc	r25, r21
    3c22:	a6 1f       	adc	r26, r22
    3c24:	b7 1f       	adc	r27, r23
    3c26:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <receivedChecksum>
    3c2a:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <receivedChecksum+0x1>
    3c2e:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <receivedChecksum+0x2>
    3c32:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <receivedChecksum+0x3>

                    // Clear the update pending flag...
                    eeprom_busy_wait();
    3c36:	f9 99       	sbic	0x1f, 1	; 31
    3c38:	fe cf       	rjmp	.-4      	; 0x3c36 <main+0x530>
                    eeprom_write_byte((BYTE*)EE_FW_UPDATE_PENDING_LOC, 0);
    3c3a:	60 e0       	ldi	r22, 0x00	; 0
    3c3c:	8a e6       	ldi	r24, 0x6A	; 106
    3c3e:	91 e0       	ldi	r25, 0x01	; 1
    3c40:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <eeprom_write_byte>
    3c44:	b5 c0       	rjmp	.+362    	; 0x3db0 <main+0x6aa>
            }
            else
            {
			    //point to index in buffer where we need to fill
			    pbyVal = scbyProgPgBuff;	//point to destination array beginning
			    pbyVal += scwIndex;	   //advance in destination array to current index
    3c46:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <scwIndex>
    3c4a:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <scwIndex+0x1>
    3c4e:	e8 58       	subi	r30, 0x88	; 136
    3c50:	fe 4f       	sbci	r31, 0xFE	; 254
			    //stuff 8 bytes in the buffer
			    for (byI = 0; byI < receivedFwByteCount; byI++)
    3c52:	40 e0       	ldi	r20, 0x00	; 0
					        boot_page_fill(wJ, *(WORD*)&scbyProgPgBuff[wJ]);
					        scbyChksm2 = scbyChksm2 + scbyProgPgBuff[wJ] + scbyProgPgBuff[wJ + 1];
					    }

			            //finally write to the page
					    boot_page_write(scdwAddress);
    3c54:	55 e0       	ldi	r21, 0x05	; 5
                        {
                            TOGGLE_LED_1;
                        }
                        if(pageWriteCount > 40)
                        {
                            TOGGLE_LED_2;
    3c56:	80 e4       	ldi	r24, 0x40	; 64
    3c58:	b8 2e       	mov	r11, r24
                        }
                        if(pageWriteCount == 96)
                        {
                            TOGGLE_LED_4;
    3c5a:	98 e0       	ldi	r25, 0x08	; 8
    3c5c:	a9 2e       	mov	r10, r25
            {
			    //point to index in buffer where we need to fill
			    pbyVal = scbyProgPgBuff;	//point to destination array beginning
			    pbyVal += scwIndex;	   //advance in destination array to current index
			    //stuff 8 bytes in the buffer
			    for (byI = 0; byI < receivedFwByteCount; byI++)
    3c5e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <receivedFwByteCount>
    3c62:	48 17       	cp	r20, r24
    3c64:	08 f0       	brcs	.+2      	; 0x3c68 <main+0x562>
    3c66:	a4 c0       	rjmp	.+328    	; 0x3db0 <main+0x6aa>
			    {
			        *pbyVal++ = abyCANRxBuff[byI];
    3c68:	cf 01       	movw	r24, r30
    3c6a:	01 96       	adiw	r24, 0x01	; 1
    3c6c:	a4 2f       	mov	r26, r20
    3c6e:	b0 e0       	ldi	r27, 0x00	; 0
    3c70:	a7 5e       	subi	r26, 0xE7	; 231
    3c72:	bd 4f       	sbci	r27, 0xFD	; 253
    3c74:	2c 91       	ld	r18, X
    3c76:	20 83       	st	Z, r18
				    scwIndex++;
    3c78:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <scwIndex>
    3c7c:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <scwIndex+0x1>
    3c80:	2f 5f       	subi	r18, 0xFF	; 255
    3c82:	3f 4f       	sbci	r19, 0xFF	; 255
    3c84:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <scwIndex+0x1>
    3c88:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <scwIndex>
                
                    if((scwIndex >= 128) && (pageWriteCount < 96))
    3c8c:	20 38       	cpi	r18, 0x80	; 128
    3c8e:	31 05       	cpc	r19, r1
    3c90:	08 f4       	brcc	.+2      	; 0x3c94 <main+0x58e>
    3c92:	8b c0       	rjmp	.+278    	; 0x3daa <main+0x6a4>
    3c94:	ed 81       	ldd	r30, Y+5	; 0x05
    3c96:	e0 36       	cpi	r30, 0x60	; 96
    3c98:	08 f0       	brcs	.+2      	; 0x3c9c <main+0x596>
    3c9a:	87 c0       	rjmp	.+270    	; 0x3daa <main+0x6a4>
				    {
				        _CLI();//disable interrupts
    3c9c:	f8 94       	cli
					    boot_page_erase(scdwAddress);
    3c9e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <scdwAddress>
    3ca2:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <scdwAddress+0x1>
    3ca6:	a0 91 74 01 	lds	r26, 0x0174	; 0x800174 <scdwAddress+0x2>
    3caa:	b0 91 75 01 	lds	r27, 0x0175	; 0x800175 <scdwAddress+0x3>
    3cae:	89 83       	std	Y+1, r24	; 0x01
    3cb0:	9a 83       	std	Y+2, r25	; 0x02
    3cb2:	ab 83       	std	Y+3, r26	; 0x03
    3cb4:	bc 83       	std	Y+4, r27	; 0x04
    3cb6:	23 e0       	ldi	r18, 0x03	; 3
    3cb8:	fc 01       	movw	r30, r24
    3cba:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
    3cbe:	e8 95       	spm
					    while(boot_rww_busy())
    3cc0:	07 b6       	in	r0, 0x37	; 55
    3cc2:	06 fe       	sbrs	r0, 6
    3cc4:	05 c0       	rjmp	.+10     	; 0x3cd0 <main+0x5ca>
					    {
					        boot_rww_enable();
    3cc6:	81 e1       	ldi	r24, 0x11	; 17
    3cc8:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
    3ccc:	e8 95       	spm
    3cce:	f8 cf       	rjmp	.-16     	; 0x3cc0 <main+0x5ba>
    3cd0:	40 90 69 01 	lds	r4, 0x0169	; 0x800169 <scbyChksm2>
    3cd4:	50 90 6a 01 	lds	r5, 0x016A	; 0x80016a <scbyChksm2+0x1>
    3cd8:	60 90 6b 01 	lds	r6, 0x016B	; 0x80016b <scbyChksm2+0x2>
    3cdc:	70 90 6c 01 	lds	r7, 0x016C	; 0x80016c <scbyChksm2+0x3>
    3ce0:	28 e7       	ldi	r18, 0x78	; 120
    3ce2:	31 e0       	ldi	r19, 0x01	; 1
                
                    if((scwIndex >= 128) && (pageWriteCount < 96))
				    {
				        _CLI();//disable interrupts
					    boot_page_erase(scdwAddress);
					    while(boot_rww_busy())
    3ce4:	e0 e0       	ldi	r30, 0x00	; 0
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0

			            //prepare for the page write
					    //for (wJ = 0; wJ < SPM_PAGESIZE; wJ += 2)
                        for (wJ = 0; wJ < 128; wJ += 2)
					    {
					        boot_page_fill(wJ, *(WORD*)&scbyProgPgBuff[wJ]);
    3ce8:	d9 01       	movw	r26, r18
    3cea:	6d 91       	ld	r22, X+
    3cec:	7c 91       	ld	r23, X
    3cee:	b1 e0       	ldi	r27, 0x01	; 1
    3cf0:	0b 01       	movw	r0, r22
    3cf2:	b0 93 57 00 	sts	0x0057, r27	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
    3cf6:	e8 95       	spm
    3cf8:	11 24       	eor	r1, r1
					        scbyChksm2 = scbyChksm2 + scbyProgPgBuff[wJ] + scbyProgPgBuff[wJ + 1];
    3cfa:	d9 01       	movw	r26, r18
    3cfc:	6c 91       	ld	r22, X
    3cfe:	11 96       	adiw	r26, 0x01	; 1
    3d00:	7c 91       	ld	r23, X
    3d02:	c7 2e       	mov	r12, r23
    3d04:	d1 2c       	mov	r13, r1
    3d06:	e1 2c       	mov	r14, r1
    3d08:	f1 2c       	mov	r15, r1
    3d0a:	c6 0e       	add	r12, r22
    3d0c:	d1 1c       	adc	r13, r1
    3d0e:	e1 1c       	adc	r14, r1
    3d10:	f1 1c       	adc	r15, r1
    3d12:	4c 0c       	add	r4, r12
    3d14:	5d 1c       	adc	r5, r13
    3d16:	6e 1c       	adc	r6, r14
    3d18:	7f 1c       	adc	r7, r15
					        boot_rww_enable();
					    }

			            //prepare for the page write
					    //for (wJ = 0; wJ < SPM_PAGESIZE; wJ += 2)
                        for (wJ = 0; wJ < 128; wJ += 2)
    3d1a:	32 96       	adiw	r30, 0x02	; 2
    3d1c:	2e 5f       	subi	r18, 0xFE	; 254
    3d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d20:	e0 38       	cpi	r30, 0x80	; 128
    3d22:	f1 05       	cpc	r31, r1
    3d24:	09 f7       	brne	.-62     	; 0x3ce8 <main+0x5e2>
    3d26:	40 92 69 01 	sts	0x0169, r4	; 0x800169 <scbyChksm2>
    3d2a:	50 92 6a 01 	sts	0x016A, r5	; 0x80016a <scbyChksm2+0x1>
    3d2e:	60 92 6b 01 	sts	0x016B, r6	; 0x80016b <scbyChksm2+0x2>
    3d32:	70 92 6c 01 	sts	0x016C, r7	; 0x80016c <scbyChksm2+0x3>
					        boot_page_fill(wJ, *(WORD*)&scbyProgPgBuff[wJ]);
					        scbyChksm2 = scbyChksm2 + scbyProgPgBuff[wJ] + scbyProgPgBuff[wJ + 1];
					    }

			            //finally write to the page
					    boot_page_write(scdwAddress);
    3d36:	e9 81       	ldd	r30, Y+1	; 0x01
    3d38:	fa 81       	ldd	r31, Y+2	; 0x02
    3d3a:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
    3d3e:	e8 95       	spm
					    scdwAddress = scdwAddress + 128;//SPM_PAGESIZE;
    3d40:	89 81       	ldd	r24, Y+1	; 0x01
    3d42:	9a 81       	ldd	r25, Y+2	; 0x02
    3d44:	ab 81       	ldd	r26, Y+3	; 0x03
    3d46:	bc 81       	ldd	r27, Y+4	; 0x04
    3d48:	80 58       	subi	r24, 0x80	; 128
    3d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d4c:	af 4f       	sbci	r26, 0xFF	; 255
    3d4e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d50:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <scdwAddress>
    3d54:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <scdwAddress+0x1>
    3d58:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <scdwAddress+0x2>
    3d5c:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <scdwAddress+0x3>
					    while(boot_rww_busy())
    3d60:	07 b6       	in	r0, 0x37	; 55
    3d62:	06 fe       	sbrs	r0, 6
    3d64:	05 c0       	rjmp	.+10     	; 0x3d70 <main+0x66a>
					    {
					        boot_rww_enable();
    3d66:	f1 e1       	ldi	r31, 0x11	; 17
    3d68:	f0 93 57 00 	sts	0x0057, r31	; 0x800057 <__TEXT_REGION_LENGTH__+0x7fc057>
    3d6c:	e8 95       	spm
    3d6e:	f8 cf       	rjmp	.-16     	; 0x3d60 <main+0x65a>
					    }
                        pageWriteCount++;
    3d70:	2d 81       	ldd	r18, Y+5	; 0x05
    3d72:	2f 5f       	subi	r18, 0xFF	; 255
    3d74:	2d 83       	std	Y+5, r18	; 0x05
                        if(pageWriteCount > 10)
    3d76:	2b 30       	cpi	r18, 0x0B	; 11
    3d78:	88 f0       	brcs	.+34     	; 0x3d9c <main+0x696>
                        {
                            TOGGLE_LED_1;
    3d7a:	85 b1       	in	r24, 0x05	; 5
    3d7c:	92 e0       	ldi	r25, 0x02	; 2
    3d7e:	89 27       	eor	r24, r25
    3d80:	85 b9       	out	0x05, r24	; 5
                        }
                        if(pageWriteCount > 40)
    3d82:	29 32       	cpi	r18, 0x29	; 41
    3d84:	58 f0       	brcs	.+22     	; 0x3d9c <main+0x696>
                        {
                            TOGGLE_LED_2;
    3d86:	88 b1       	in	r24, 0x08	; 8
    3d88:	8b 25       	eor	r24, r11
    3d8a:	88 b9       	out	0x08, r24	; 8
                        }
                        if(pageWriteCount == 96)
    3d8c:	20 36       	cpi	r18, 0x60	; 96
    3d8e:	31 f4       	brne	.+12     	; 0x3d9c <main+0x696>
                        {
                            TOGGLE_LED_4;
    3d90:	85 b1       	in	r24, 0x05	; 5
    3d92:	8a 25       	eor	r24, r10
    3d94:	85 b9       	out	0x05, r24	; 5
                            fwUpdateCompleteFlag = 1;
    3d96:	a1 e0       	ldi	r26, 0x01	; 1
    3d98:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <fwUpdateCompleteFlag>
                        }
					    _SEI();//enable interrupts
    3d9c:	78 94       	sei
					    scwIndex = 0;
    3d9e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <scwIndex+0x1>
    3da2:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <scwIndex>
		                pbyVal = scbyProgPgBuff;	//point to destination array beginning
    3da6:	88 e7       	ldi	r24, 0x78	; 120
    3da8:	91 e0       	ldi	r25, 0x01	; 1
            {
			    //point to index in buffer where we need to fill
			    pbyVal = scbyProgPgBuff;	//point to destination array beginning
			    pbyVal += scwIndex;	   //advance in destination array to current index
			    //stuff 8 bytes in the buffer
			    for (byI = 0; byI < receivedFwByteCount; byI++)
    3daa:	4f 5f       	subi	r20, 0xFF	; 255
    3dac:	fc 01       	movw	r30, r24
    3dae:	57 cf       	rjmp	.-338    	; 0x3c5e <main+0x558>
}
/*******************************************************************************/

static void sendProgDataAck(void)
{
    while (can_get_status(&scCANmsgTx) == CAN_STATUS_NOT_COMPLETED);
    3db0:	8d ef       	ldi	r24, 0xFD	; 253
    3db2:	91 e0       	ldi	r25, 0x01	; 1
    3db4:	0e 94 4d 19 	call	0x329a	; 0x329a <can_get_status>
    3db8:	81 30       	cpi	r24, 0x01	; 1
    3dba:	d1 f3       	breq	.-12     	; 0x3db0 <main+0x6aa>
    scCANmsgTx.dlc = 0;
    3dbc:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <scCANmsgTx+0x6>
    //*((DWORD*)&abyCANTxBuff[0]) = 0;       //fill the data bytes
	//*((DWORD*)&abyCANTxBuff[4]) = 0;	     //fill the data bytes
	scCANmsgTx.id.std = CANID_PROG_DATA_ACK;
    3dc0:	90 92 00 02 	sts	0x0200, r9	; 0x800200 <scCANmsgTx+0x3>
    3dc4:	80 92 ff 01 	sts	0x01FF, r8	; 0x8001ff <scCANmsgTx+0x2>
	while (can_cmd(&scCANmsgTx) != CAN_CMD_ACCEPTED);
    3dc8:	8d ef       	ldi	r24, 0xFD	; 253
    3dca:	91 e0       	ldi	r25, 0x01	; 1
    3dcc:	0e 94 c1 18 	call	0x3182	; 0x3182 <can_cmd>
    3dd0:	81 11       	cpse	r24, r1
    3dd2:	fa cf       	rjmp	.-12     	; 0x3dc8 <main+0x6c2>
            }
		    sendProgDataAck(); //send Ack
		}//if (programPacketReceived == 1)

		//if (checksumRequestFlag == 1) //request for checksum has come from display
        if(fwUpdateCompleteFlag)
    3dd4:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <fwUpdateCompleteFlag>
    3dd8:	88 23       	and	r24, r24
    3dda:	09 f4       	brne	.+2      	; 0x3dde <main+0x6d8>
    3ddc:	7d cd       	rjmp	.-1286   	; 0x38d8 <main+0x1d2>
		{
			
            //checksumRequestFlag = 0; //reset the request
            fwUpdateCompleteFlag = 0;
    3dde:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <fwUpdateCompleteFlag>
    3de2:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <scbyChksm3>
    3de6:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <scbyChksm3+0x1>
    3dea:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <scbyChksm3+0x2>
    3dee:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <scbyChksm3+0x3>
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	dc 01       	movw	r26, r24
			//now we will calculate the checksum
			scdwAddress = 0;

 			while (scdwAddress < 12288)
			{
				scbyChksm3 = scbyChksm3 + pgm_read_byte_near((WORD)scdwAddress);
    3df8:	fc 01       	movw	r30, r24
    3dfa:	24 91       	lpm	r18, Z
    3dfc:	42 0f       	add	r20, r18
    3dfe:	51 1d       	adc	r21, r1
    3e00:	61 1d       	adc	r22, r1
    3e02:	71 1d       	adc	r23, r1
				scdwAddress++;
    3e04:	01 96       	adiw	r24, 0x01	; 1
    3e06:	a1 1d       	adc	r26, r1
    3e08:	b1 1d       	adc	r27, r1
                wdt_reset();
    3e0a:	a8 95       	wdr
            //checksumRequestFlag = 0; //reset the request
            fwUpdateCompleteFlag = 0;
			//now we will calculate the checksum
			scdwAddress = 0;

 			while (scdwAddress < 12288)
    3e0c:	81 15       	cp	r24, r1
    3e0e:	f0 e3       	ldi	r31, 0x30	; 48
    3e10:	9f 07       	cpc	r25, r31
    3e12:	a1 05       	cpc	r26, r1
    3e14:	b1 05       	cpc	r27, r1
    3e16:	81 f7       	brne	.-32     	; 0x3df8 <main+0x6f2>
    3e18:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <scdwAddress>
    3e1c:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <scdwAddress+0x1>
    3e20:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <scdwAddress+0x2>
    3e24:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <scdwAddress+0x3>
    3e28:	40 93 65 01 	sts	0x0165, r20	; 0x800165 <scbyChksm3>
    3e2c:	50 93 66 01 	sts	0x0166, r21	; 0x800166 <scbyChksm3+0x1>
    3e30:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <scbyChksm3+0x2>
    3e34:	70 93 68 01 	sts	0x0168, r23	; 0x800168 <scbyChksm3+0x3>
				scbyChksm3 = scbyChksm3 + pgm_read_byte_near((WORD)scdwAddress);
				scdwAddress++;
                wdt_reset();
			}

            if((scbyChksm2 == receivedChecksum) && (scbyChksm3 == receivedChecksum))
    3e38:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <scbyChksm2>
    3e3c:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <scbyChksm2+0x1>
    3e40:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <scbyChksm2+0x2>
    3e44:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <scbyChksm2+0x3>
    3e48:	40 90 6d 01 	lds	r4, 0x016D	; 0x80016d <receivedChecksum>
    3e4c:	50 90 6e 01 	lds	r5, 0x016E	; 0x80016e <receivedChecksum+0x1>
    3e50:	60 90 6f 01 	lds	r6, 0x016F	; 0x80016f <receivedChecksum+0x2>
    3e54:	70 90 70 01 	lds	r7, 0x0170	; 0x800170 <receivedChecksum+0x3>
    3e58:	84 15       	cp	r24, r4
    3e5a:	95 05       	cpc	r25, r5
    3e5c:	a6 05       	cpc	r26, r6
    3e5e:	b7 05       	cpc	r27, r7
    3e60:	e1 f4       	brne	.+56     	; 0x3e9a <main+0x794>
    3e62:	48 17       	cp	r20, r24
    3e64:	59 07       	cpc	r21, r25
    3e66:	6a 07       	cpc	r22, r26
    3e68:	7b 07       	cpc	r23, r27
    3e6a:	b9 f4       	brne	.+46     	; 0x3e9a <main+0x794>
            {
                // Success!!
                // set the flag in EE as program is valid
                _CLI();
    3e6c:	f8 94       	cli
                sendChecksums();
    3e6e:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <sendChecksums>
                eeprom_busy_wait();
    3e72:	f9 99       	sbic	0x1f, 1	; 31
    3e74:	fe cf       	rjmp	.-4      	; 0x3e72 <main+0x76c>
                eeprom_write_byte((BYTE*)EE_PROGM_DATA_VALID_LOC, 0);
    3e76:	60 e0       	ldi	r22, 0x00	; 0
    3e78:	8d e6       	ldi	r24, 0x6D	; 109
    3e7a:	91 e0       	ldi	r25, 0x01	; 1
    3e7c:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <eeprom_write_byte>
                eeprom_busy_wait();
    3e80:	f9 99       	sbic	0x1f, 1	; 31
    3e82:	fe cf       	rjmp	.-4      	; 0x3e80 <main+0x77a>
                eeprom_write_byte((BYTE*)EE_FW_UPDATE_PENDING_LOC, 0);
    3e84:	60 e0       	ldi	r22, 0x00	; 0
    3e86:	8a e6       	ldi	r24, 0x6A	; 106
    3e88:	91 e0       	ldi	r25, 0x01	; 1
    3e8a:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <eeprom_write_byte>
                validAppFlag = 0;
                eeprom_busy_wait();
    3e8e:	f9 99       	sbic	0x1f, 1	; 31
    3e90:	fe cf       	rjmp	.-4      	; 0x3e8e <main+0x788>
                JumpToApp();
    3e92:	0e 94 db 19 	call	0x33b6	; 0x33b6 <JumpToApp>
                sendChecksums();
                eeprom_busy_wait();
                eeprom_write_byte((BYTE*)EE_PROGM_DATA_VALID_LOC, 0);
                eeprom_busy_wait();
                eeprom_write_byte((BYTE*)EE_FW_UPDATE_PENDING_LOC, 0);
                validAppFlag = 0;
    3e96:	10 e0       	ldi	r17, 0x00	; 0
                eeprom_busy_wait();
                JumpToApp();
    3e98:	1f cd       	rjmp	.-1474   	; 0x38d8 <main+0x1d2>
            {
                // Checksum fail :(

                // Reset everything for future update attempts
                //appErrorMsgSent = 0;
                startBootMsgSent = 0;
    3e9a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <startBootMsgSent>
                readyToUpdateFlag = 0;
    3e9e:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <readyToUpdateFlag>
                fwUpdateCompleteFlag = 0;
                programPacketReceived = 0;
    3ea2:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <programPacketReceived>
                programPacketCount = 0;
    3ea6:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <programPacketCount+0x1>
    3eaa:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <programPacketCount>
                appProgrammingStarted = 0;
    3eae:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <appProgrammingStarted>
                scwIndex = 0;
    3eb2:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <scwIndex+0x1>
    3eb6:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <scwIndex>
                scdwAddress = 0;
    3eba:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <scdwAddress>
    3ebe:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <scdwAddress+0x1>
    3ec2:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <scdwAddress+0x2>
    3ec6:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <scdwAddress+0x3>
                //checksumRequestFlag = 0;
                //scbySleep = 0;
                //scflEeUpdateReq = 0;
                //scbyChksm1 = 0;
                scbyChksm2 = 0;
    3eca:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <scbyChksm2>
    3ece:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <scbyChksm2+0x1>
    3ed2:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <scbyChksm2+0x2>
    3ed6:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <scbyChksm2+0x3>
                scbyChksm3 = 0;
    3eda:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <scbyChksm3>
    3ede:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <scbyChksm3+0x1>
    3ee2:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <scbyChksm3+0x2>
    3ee6:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <scbyChksm3+0x3>
                receivedChecksum = 0;
    3eea:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <receivedChecksum>
    3eee:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <receivedChecksum+0x1>
    3ef2:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <receivedChecksum+0x2>
    3ef6:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <receivedChecksum+0x3>
                //scflVerReq = 0;
                sendChecksums();
    3efa:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <sendChecksums>
                sendInvalidProgMsg();
    3efe:	0e 94 32 1a 	call	0x3464	; 0x3464 <sendInvalidProgMsg>
                activeError = 1;
    3f02:	21 e0       	ldi	r18, 0x01	; 1
    3f04:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <activeError>
                // Turn off all LEDs to sync flashing
                PORTB &= ~(_BV(PB1));
    3f08:	29 98       	cbi	0x05, 1	; 5
                PORTC &= ~(_BV(PC6));
    3f0a:	46 98       	cbi	0x08, 6	; 8
                PORTB &= ~(_BV(PB4));
    3f0c:	2c 98       	cbi	0x05, 4	; 5
                PORTB &= ~(_BV(PB3));
    3f0e:	2b 98       	cbi	0x05, 3	; 5
    3f10:	e3 cc       	rjmp	.-1594   	; 0x38d8 <main+0x1d2>

00003f12 <strcpy_P>:
    3f12:	fb 01       	movw	r30, r22
    3f14:	dc 01       	movw	r26, r24
    3f16:	05 90       	lpm	r0, Z+
    3f18:	0d 92       	st	X+, r0
    3f1a:	00 20       	and	r0, r0
    3f1c:	e1 f7       	brne	.-8      	; 0x3f16 <strcpy_P+0x4>
    3f1e:	08 95       	ret

00003f20 <eeprom_read_byte>:
    3f20:	f9 99       	sbic	0x1f, 1	; 31
    3f22:	fe cf       	rjmp	.-4      	; 0x3f20 <eeprom_read_byte>
    3f24:	92 bd       	out	0x22, r25	; 34
    3f26:	81 bd       	out	0x21, r24	; 33
    3f28:	f8 9a       	sbi	0x1f, 0	; 31
    3f2a:	99 27       	eor	r25, r25
    3f2c:	80 b5       	in	r24, 0x20	; 32
    3f2e:	08 95       	ret

00003f30 <eeprom_write_byte>:
    3f30:	26 2f       	mov	r18, r22

00003f32 <eeprom_write_r18>:
    3f32:	f9 99       	sbic	0x1f, 1	; 31
    3f34:	fe cf       	rjmp	.-4      	; 0x3f32 <eeprom_write_r18>
    3f36:	1f ba       	out	0x1f, r1	; 31
    3f38:	92 bd       	out	0x22, r25	; 34
    3f3a:	81 bd       	out	0x21, r24	; 33
    3f3c:	20 bd       	out	0x20, r18	; 32
    3f3e:	0f b6       	in	r0, 0x3f	; 63
    3f40:	f8 94       	cli
    3f42:	fa 9a       	sbi	0x1f, 2	; 31
    3f44:	f9 9a       	sbi	0x1f, 1	; 31
    3f46:	0f be       	out	0x3f, r0	; 63
    3f48:	01 96       	adiw	r24, 0x01	; 1
    3f4a:	08 95       	ret

00003f4c <_exit>:
    3f4c:	f8 94       	cli

00003f4e <__stop_program>:
    3f4e:	ff cf       	rjmp	.-2      	; 0x3f4e <__stop_program>
